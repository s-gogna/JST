Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    ECONST

Grammar

Rule 0     S' -> program
Rule 1     program -> translation_unit leave_scope
Rule 2     translation_unit -> translation_unit_opt
Rule 3     translation_unit -> empty
Rule 4     translation_unit_opt -> external_declaration
Rule 5     translation_unit_opt -> translation_unit external_declaration
Rule 6     external_declaration -> function_definition
Rule 7     external_declaration -> declaration
Rule 8     function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement
Rule 9     function_definition -> declarator enter_function_scope declaration_list compound_statement
Rule 10    function_definition -> declarator compound_statement
Rule 11    function_definition -> declaration_specifiers declarator compound_statement
Rule 12    declaration -> declaration_specifiers init_declarator_list SEMI
Rule 13    declaration -> declaration_specifiers SEMI
Rule 14    declaration_list -> declaration
Rule 15    declaration_list -> declaration_list declaration
Rule 16    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 17    declaration_specifiers -> type_specifier declaration_specifiers
Rule 18    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 19    declaration_specifiers -> storage_class_specifier
Rule 20    declaration_specifiers -> type_specifier
Rule 21    declaration_specifiers -> type_qualifier
Rule 22    storage_class_specifier -> AUTO
Rule 23    storage_class_specifier -> REGISTER
Rule 24    storage_class_specifier -> STATIC
Rule 25    storage_class_specifier -> EXTERN
Rule 26    storage_class_specifier -> TYPEDEF
Rule 27    type_specifier -> VOID
Rule 28    type_specifier -> CHAR
Rule 29    type_specifier -> SHORT
Rule 30    type_specifier -> INT
Rule 31    type_specifier -> LONG
Rule 32    type_specifier -> FLOAT
Rule 33    type_specifier -> DOUBLE
Rule 34    type_specifier -> SIGNED
Rule 35    type_specifier -> UNSIGNED
Rule 36    type_specifier -> struct_or_union_specifier
Rule 37    type_specifier -> enum_specifier
Rule 38    type_specifier -> TYPEID
Rule 39    type_qualifier -> CONST
Rule 40    type_qualifier -> VOLATILE
Rule 41    struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE
Rule 42    struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE
Rule 43    struct_or_union_specifier -> struct_or_union identifier
Rule 44    struct_or_union -> STRUCT
Rule 45    struct_or_union -> UNION
Rule 46    struct_declaration_list -> struct_declaration
Rule 47    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 48    init_declarator_list -> init_declarator
Rule 49    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 50    init_declarator -> declarator
Rule 51    init_declarator -> declarator EQUALS initializer
Rule 52    struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI
Rule 53    specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 54    specifier_qualifier_list -> type_specifier
Rule 55    specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 56    specifier_qualifier_list -> type_qualifier
Rule 57    struct_declarator_list -> struct_declarator
Rule 58    struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 59    struct_declarator -> declarator
Rule 60    struct_declarator -> declarator COLON constant_expression
Rule 61    struct_declarator -> COLON constant_expression
Rule 62    enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE
Rule 63    enum_specifier -> ENUM LBRACE enumerator_list RBRACE
Rule 64    enum_specifier -> ENUM identifier
Rule 65    enumerator_list -> enumerator
Rule 66    enumerator_list -> enumerator_list COMMA enumerator
Rule 67    enumerator -> identifier
Rule 68    enumerator -> identifier EQUALS constant_expression
Rule 69    declarator -> pointer direct_declarator
Rule 70    declarator -> direct_declarator
Rule 71    direct_declarator -> identifier
Rule 72    direct_declarator -> LPAREN declarator RPAREN
Rule 73    direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET
Rule 74    direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 75    direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 76    direct_declarator -> direct_declarator LPAREN RPAREN
Rule 77    pointer -> TIMES type_qualifier_list
Rule 78    pointer -> TIMES
Rule 79    pointer -> TIMES type_qualifier_list pointer
Rule 80    pointer -> TIMES pointer
Rule 81    type_qualifier_list -> type_qualifier
Rule 82    type_qualifier_list -> type_qualifier_list type_qualifier
Rule 83    parameter_type_list -> parameter_list
Rule 84    parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 85    parameter_list -> parameter_declaration
Rule 86    parameter_list -> parameter_list COMMA parameter_declaration
Rule 87    parameter_declaration -> declaration_specifiers declarator
Rule 88    parameter_declaration -> declaration_specifiers abstract_declarator_option
Rule 89    identifier_list -> identifier
Rule 90    identifier_list -> identifier_list COMMA identifier
Rule 91    initializer -> assignment_expression
Rule 92    initializer -> LBRACE initializer_list RBRACE
Rule 93    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 94    initializer_list -> initializer
Rule 95    initializer_list -> initializer_list COMMA initializer
Rule 96    type_name -> specifier_qualifier_list abstract_declarator_option
Rule 97    abstract_declarator_option -> empty
Rule 98    abstract_declarator_option -> abstract_declarator
Rule 99    abstract_declarator -> pointer
Rule 100   abstract_declarator -> pointer direct_abstract_declarator
Rule 101   abstract_declarator -> direct_abstract_declarator
Rule 102   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 103   direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
Rule 104   direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET
Rule 105   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
Rule 106   direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN
Rule 107   constant_expression_option -> empty
Rule 108   constant_expression_option -> constant_expression
Rule 109   parameter_type_list_option -> empty
Rule 110   parameter_type_list_option -> parameter_type_list
Rule 111   statement -> labeled_statement
Rule 112   statement -> expression_statement
Rule 113   statement -> compound_statement
Rule 114   statement -> selection_statement
Rule 115   statement -> iteration_statement
Rule 116   statement -> jump_statement
Rule 117   labeled_statement -> identifier COLON statement
Rule 118   labeled_statement -> CASE constant_expression COLON statement
Rule 119   labeled_statement -> DEFAULT COLON statement
Rule 120   expression_statement -> expression_option SEMI
Rule 121   compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
Rule 122   compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
Rule 123   compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
Rule 124   compound_statement -> LBRACE RBRACE
Rule 125   statement_list -> statement
Rule 126   statement_list -> statement_list statement
Rule 127   selection_statement -> IF LPAREN expression RPAREN statement
Rule 128   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 129   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 130   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 131   iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
Rule 132   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 133   jump_statement -> GOTO identifier SEMI
Rule 134   jump_statement -> CONTINUE SEMI
Rule 135   jump_statement -> BREAK SEMI
Rule 136   jump_statement -> RETURN expression_option SEMI
Rule 137   expression_option -> empty
Rule 138   expression_option -> expression
Rule 139   expression -> assignment_expression
Rule 140   expression -> expression COMMA assignment_expression
Rule 141   assignment_expression -> conditional_expression
Rule 142   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 143   assignment_operator -> EQUALS
Rule 144   assignment_operator -> XOREQUAL
Rule 145   assignment_operator -> TIMESEQUAL
Rule 146   assignment_operator -> DIVEQUAL
Rule 147   assignment_operator -> MODEQUAL
Rule 148   assignment_operator -> PLUSEQUAL
Rule 149   assignment_operator -> MINUSEQUAL
Rule 150   assignment_operator -> LSHIFTEQUAL
Rule 151   assignment_operator -> RSHIFTEQUAL
Rule 152   assignment_operator -> ANDEQUAL
Rule 153   assignment_operator -> OREQUAL
Rule 154   constant_expression -> conditional_expression
Rule 155   conditional_expression -> binary_expression
Rule 156   conditional_expression -> binary_expression CONDOP expression COLON conditional_expression
Rule 157   binary_expression -> binary_expression TIMES binary_expression
Rule 158   binary_expression -> binary_expression DIVIDE binary_expression
Rule 159   binary_expression -> binary_expression MOD binary_expression
Rule 160   binary_expression -> binary_expression PLUS binary_expression
Rule 161   binary_expression -> binary_expression MINUS binary_expression
Rule 162   binary_expression -> binary_expression RSHIFT binary_expression
Rule 163   binary_expression -> binary_expression LSHIFT binary_expression
Rule 164   binary_expression -> binary_expression LT binary_expression
Rule 165   binary_expression -> binary_expression LE binary_expression
Rule 166   binary_expression -> binary_expression GE binary_expression
Rule 167   binary_expression -> binary_expression GT binary_expression
Rule 168   binary_expression -> binary_expression EQ binary_expression
Rule 169   binary_expression -> binary_expression NE binary_expression
Rule 170   binary_expression -> binary_expression AND binary_expression
Rule 171   binary_expression -> binary_expression OR binary_expression
Rule 172   binary_expression -> binary_expression XOR binary_expression
Rule 173   binary_expression -> binary_expression LAND binary_expression
Rule 174   binary_expression -> binary_expression LOR binary_expression
Rule 175   binary_expression -> cast_expression
Rule 176   cast_expression -> unary_expression
Rule 177   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 178   unary_expression -> postfix_expression
Rule 179   unary_expression -> PLUSPLUS unary_expression
Rule 180   unary_expression -> MINUSMINUS unary_expression
Rule 181   unary_expression -> unary_operator cast_expression
Rule 182   unary_expression -> SIZEOF unary_expression
Rule 183   unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 184   unary_operator -> AND
Rule 185   unary_operator -> TIMES
Rule 186   unary_operator -> PLUS
Rule 187   unary_operator -> MINUS
Rule 188   unary_operator -> NOT
Rule 189   unary_operator -> LNOT
Rule 190   postfix_expression -> primary_expression
Rule 191   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 192   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 193   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 194   postfix_expression -> postfix_expression PERIOD identifier
Rule 195   postfix_expression -> postfix_expression ARROW identifier
Rule 196   postfix_expression -> postfix_expression PLUSPLUS
Rule 197   postfix_expression -> postfix_expression MINUSMINUS
Rule 198   primary_expression -> identifier
Rule 199   primary_expression -> constant
Rule 200   primary_expression -> string_literal
Rule 201   string_literal -> SCONST
Rule 202   string_literal -> string_literal SCONST
Rule 203   primary_expression -> LPAREN expression RPAREN
Rule 204   argument_expression_list -> assignment_expression
Rule 205   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 206   constant -> ICONST
Rule 207   constant -> FCONST
Rule 208   constant -> CCONST
Rule 209   identifier -> ID
Rule 210   empty -> <empty>
Rule 211   enter_function_scope -> empty
Rule 212   enter_scope -> empty
Rule 213   insert_mode -> empty
Rule 214   leave_scope -> empty
Rule 215   lookup_mode -> empty

Terminals, with rules where they appear

AND                  : 170 184
ANDEQUAL             : 152
ARROW                : 195
AUTO                 : 22
BREAK                : 135
CASE                 : 118
CCONST               : 208
CHAR                 : 28
COLON                : 60 61 117 118 119 156
COMMA                : 49 58 66 84 86 90 93 95 140 205
CONDOP               : 156
CONST                : 39
CONTINUE             : 134
DEFAULT              : 119
DIVEQUAL             : 146
DIVIDE               : 158
DO                   : 132
DOUBLE               : 33
ECONST               : 
ELLIPSIS             : 84
ELSE                 : 128
ENUM                 : 62 63 64
EQ                   : 168
EQUALS               : 51 68 143
EXTERN               : 25
FCONST               : 207
FLOAT                : 32
FOR                  : 131
GE                   : 166
GOTO                 : 133
GT                   : 167
ICONST               : 206
ID                   : 209
IF                   : 127 128
INT                  : 30
LAND                 : 173
LBRACE               : 41 42 62 63 92 93 121 122 123 124
LBRACKET             : 73 103 104 191
LE                   : 165
LNOT                 : 189
LONG                 : 31
LOR                  : 174
LPAREN               : 72 74 75 76 102 105 106 127 128 129 130 131 132 177 183 192 193 203
LSHIFT               : 163
LSHIFTEQUAL          : 150
LT                   : 164
MINUS                : 161 187
MINUSEQUAL           : 149
MINUSMINUS           : 180 197
MOD                  : 159
MODEQUAL             : 147
NE                   : 169
NOT                  : 188
OR                   : 171
OREQUAL              : 153
PERIOD               : 194
PLUS                 : 160 186
PLUSEQUAL            : 148
PLUSPLUS             : 179 196
RBRACE               : 41 42 62 63 92 93 121 122 123 124
RBRACKET             : 73 103 104 191
REGISTER             : 23
RETURN               : 136
RPAREN               : 72 74 75 76 102 105 106 127 128 129 130 131 132 177 183 192 193 203
RSHIFT               : 162
RSHIFTEQUAL          : 151
SCONST               : 201 202
SEMI                 : 12 13 52 120 131 131 132 133 134 135 136
SHORT                : 29
SIGNED               : 34
SIZEOF               : 182 183
STATIC               : 24
STRUCT               : 44
SWITCH               : 129
TIMES                : 77 78 79 80 157 185
TIMESEQUAL           : 145
TYPEDEF              : 26
TYPEID               : 38
UNION                : 45
UNSIGNED             : 35
VOID                 : 27
VOLATILE             : 40
WHILE                : 130 132
XOR                  : 172
XOREQUAL             : 144
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 98 102
abstract_declarator_option : 88 96
argument_expression_list : 192 205
assignment_expression : 91 139 140 142 204 205
assignment_operator  : 142
binary_expression    : 155 156 157 157 158 158 159 159 160 160 161 161 162 162 163 163 164 164 165 165 166 166 167 167 168 168 169 169 170 170 171 171 172 172 173 173 174 174
cast_expression      : 175 177 181
compound_statement   : 8 9 10 11 113
conditional_expression : 141 154 156
constant             : 199
constant_expression  : 60 61 68 108 118
constant_expression_option : 73 103 104
declaration          : 7 14 15
declaration_list     : 8 9 15 121 123
declaration_specifiers : 8 11 12 13 16 17 18 87 88
declarator           : 8 9 10 11 50 51 59 60 72 87
direct_abstract_declarator : 100 101 103 105
direct_declarator    : 69 70 73 74 75 76
empty                : 3 97 107 109 137 211 212 213 214 215
enter_function_scope : 8 9
enter_scope          : 121 122 123
enum_specifier       : 37
enumerator           : 65 66
enumerator_list      : 62 63 66
expression           : 127 128 129 130 132 138 140 156 191 203
expression_option    : 120 131 131 131 136
expression_statement : 112
external_declaration : 4 5
function_definition  : 6
identifier           : 41 43 62 64 67 68 71 89 90 117 133 194 195 198
identifier_list      : 75 90
init_declarator      : 48 49
init_declarator_list : 12 49
initializer          : 51 94 95
initializer_list     : 92 93 95
insert_mode          : 121 123
iteration_statement  : 115
jump_statement       : 116
labeled_statement    : 111
leave_scope          : 1 121 122 123
lookup_mode          : 121 122 123
parameter_declaration : 85 86
parameter_list       : 83 84 86
parameter_type_list  : 74 110
parameter_type_list_option : 105 106
pointer              : 69 79 80 99 100
postfix_expression   : 178 191 192 193 194 195 196 197
primary_expression   : 190
program              : 0
selection_statement  : 114
specifier_qualifier_list : 52 53 55 96
statement            : 117 118 119 125 126 127 128 128 129 130 131 132
statement_list       : 121 122 126
storage_class_specifier : 16 19
string_literal       : 200 202
struct_declaration   : 46 47
struct_declaration_list : 41 42 47
struct_declarator    : 57 58
struct_declarator_list : 52 58
struct_or_union      : 41 42 43
struct_or_union_specifier : 36
translation_unit     : 1 5
translation_unit_opt : 2
type_name            : 177 183
type_qualifier       : 18 21 55 56 81 82
type_qualifier_list  : 77 79 82
type_specifier       : 17 20 53 54
unary_expression     : 142 176 179 180 182
unary_operator       : 181

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . translation_unit leave_scope
    (2) translation_unit -> . translation_unit_opt
    (3) translation_unit -> . empty
    (4) translation_unit_opt -> . external_declaration
    (5) translation_unit_opt -> . translation_unit external_declaration
    (210) empty -> .
    (6) external_declaration -> . function_definition
    (7) external_declaration -> . declaration
    (8) function_definition -> . declaration_specifiers declarator enter_function_scope declaration_list compound_statement
    (9) function_definition -> . declarator enter_function_scope declaration_list compound_statement
    (10) function_definition -> . declarator compound_statement
    (11) function_definition -> . declaration_specifiers declarator compound_statement
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (69) declarator -> . pointer direct_declarator
    (70) declarator -> . direct_declarator
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (209) identifier -> . ID
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for REGISTER resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for TYPEDEF resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for UNSIGNED resolved as shift
  ! shift/reduce conflict for TYPEID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for VOLATILE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for UNION resolved as shift
    $end            reduce using rule 210 (empty -> .)
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 12
    ENUM            shift and go to state 38
    ID              shift and go to state 31
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

  ! AUTO            [ reduce using rule 210 (empty -> .) ]
  ! REGISTER        [ reduce using rule 210 (empty -> .) ]
  ! STATIC          [ reduce using rule 210 (empty -> .) ]
  ! EXTERN          [ reduce using rule 210 (empty -> .) ]
  ! TYPEDEF         [ reduce using rule 210 (empty -> .) ]
  ! VOID            [ reduce using rule 210 (empty -> .) ]
  ! CHAR            [ reduce using rule 210 (empty -> .) ]
  ! SHORT           [ reduce using rule 210 (empty -> .) ]
  ! INT             [ reduce using rule 210 (empty -> .) ]
  ! LONG            [ reduce using rule 210 (empty -> .) ]
  ! FLOAT           [ reduce using rule 210 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 210 (empty -> .) ]
  ! SIGNED          [ reduce using rule 210 (empty -> .) ]
  ! UNSIGNED        [ reduce using rule 210 (empty -> .) ]
  ! TYPEID          [ reduce using rule 210 (empty -> .) ]
  ! CONST           [ reduce using rule 210 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 210 (empty -> .) ]
  ! TIMES           [ reduce using rule 210 (empty -> .) ]
  ! LPAREN          [ reduce using rule 210 (empty -> .) ]
  ! ENUM            [ reduce using rule 210 (empty -> .) ]
  ! ID              [ reduce using rule 210 (empty -> .) ]
  ! STRUCT          [ reduce using rule 210 (empty -> .) ]
  ! UNION           [ reduce using rule 210 (empty -> .) ]

    struct_or_union_specifier      shift and go to state 10
    program                        shift and go to state 23
    storage_class_specifier        shift and go to state 24
    translation_unit_opt           shift and go to state 25
    direct_declarator              shift and go to state 4
    declarator                     shift and go to state 7
    empty                          shift and go to state 28
    struct_or_union                shift and go to state 26
    translation_unit               shift and go to state 9
    pointer                        shift and go to state 33
    declaration_specifiers         shift and go to state 35
    declaration                    shift and go to state 11
    external_declaration           shift and go to state 13
    enum_specifier                 shift and go to state 14
    identifier                     shift and go to state 41
    type_qualifier                 shift and go to state 15
    function_definition            shift and go to state 19
    type_specifier                 shift and go to state 20

state 1

    (31) type_specifier -> LONG .

    AUTO            reduce using rule 31 (type_specifier -> LONG .)
    REGISTER        reduce using rule 31 (type_specifier -> LONG .)
    STATIC          reduce using rule 31 (type_specifier -> LONG .)
    EXTERN          reduce using rule 31 (type_specifier -> LONG .)
    TYPEDEF         reduce using rule 31 (type_specifier -> LONG .)
    VOID            reduce using rule 31 (type_specifier -> LONG .)
    CHAR            reduce using rule 31 (type_specifier -> LONG .)
    SHORT           reduce using rule 31 (type_specifier -> LONG .)
    INT             reduce using rule 31 (type_specifier -> LONG .)
    LONG            reduce using rule 31 (type_specifier -> LONG .)
    FLOAT           reduce using rule 31 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 31 (type_specifier -> LONG .)
    SIGNED          reduce using rule 31 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 31 (type_specifier -> LONG .)
    TYPEID          reduce using rule 31 (type_specifier -> LONG .)
    CONST           reduce using rule 31 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 31 (type_specifier -> LONG .)
    ENUM            reduce using rule 31 (type_specifier -> LONG .)
    STRUCT          reduce using rule 31 (type_specifier -> LONG .)
    UNION           reduce using rule 31 (type_specifier -> LONG .)
    TIMES           reduce using rule 31 (type_specifier -> LONG .)
    LPAREN          reduce using rule 31 (type_specifier -> LONG .)
    ID              reduce using rule 31 (type_specifier -> LONG .)
    LBRACKET        reduce using rule 31 (type_specifier -> LONG .)
    COMMA           reduce using rule 31 (type_specifier -> LONG .)
    RPAREN          reduce using rule 31 (type_specifier -> LONG .)
    SEMI            reduce using rule 31 (type_specifier -> LONG .)
    COLON           reduce using rule 31 (type_specifier -> LONG .)


state 2

    (25) storage_class_specifier -> EXTERN .

    AUTO            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 25 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 25 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 25 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 25 (storage_class_specifier -> EXTERN .)
    TYPEID          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 25 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 25 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 25 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 25 (storage_class_specifier -> EXTERN .)


state 3

    (29) type_specifier -> SHORT .

    AUTO            reduce using rule 29 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 29 (type_specifier -> SHORT .)
    STATIC          reduce using rule 29 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 29 (type_specifier -> SHORT .)
    TYPEDEF         reduce using rule 29 (type_specifier -> SHORT .)
    VOID            reduce using rule 29 (type_specifier -> SHORT .)
    CHAR            reduce using rule 29 (type_specifier -> SHORT .)
    SHORT           reduce using rule 29 (type_specifier -> SHORT .)
    INT             reduce using rule 29 (type_specifier -> SHORT .)
    LONG            reduce using rule 29 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 29 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 29 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 29 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 29 (type_specifier -> SHORT .)
    TYPEID          reduce using rule 29 (type_specifier -> SHORT .)
    CONST           reduce using rule 29 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 29 (type_specifier -> SHORT .)
    ENUM            reduce using rule 29 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 29 (type_specifier -> SHORT .)
    UNION           reduce using rule 29 (type_specifier -> SHORT .)
    TIMES           reduce using rule 29 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 29 (type_specifier -> SHORT .)
    ID              reduce using rule 29 (type_specifier -> SHORT .)
    LBRACKET        reduce using rule 29 (type_specifier -> SHORT .)
    COMMA           reduce using rule 29 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 29 (type_specifier -> SHORT .)
    SEMI            reduce using rule 29 (type_specifier -> SHORT .)
    COLON           reduce using rule 29 (type_specifier -> SHORT .)


state 4

    (70) declarator -> direct_declarator .
    (73) direct_declarator -> direct_declarator . LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (76) direct_declarator -> direct_declarator . LPAREN RPAREN

    LBRACE          reduce using rule 70 (declarator -> direct_declarator .)
    AUTO            reduce using rule 70 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 70 (declarator -> direct_declarator .)
    STATIC          reduce using rule 70 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 70 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 70 (declarator -> direct_declarator .)
    VOID            reduce using rule 70 (declarator -> direct_declarator .)
    CHAR            reduce using rule 70 (declarator -> direct_declarator .)
    SHORT           reduce using rule 70 (declarator -> direct_declarator .)
    INT             reduce using rule 70 (declarator -> direct_declarator .)
    LONG            reduce using rule 70 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 70 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 70 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 70 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 70 (declarator -> direct_declarator .)
    TYPEID          reduce using rule 70 (declarator -> direct_declarator .)
    CONST           reduce using rule 70 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 70 (declarator -> direct_declarator .)
    ENUM            reduce using rule 70 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 70 (declarator -> direct_declarator .)
    UNION           reduce using rule 70 (declarator -> direct_declarator .)
    COMMA           reduce using rule 70 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 70 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 70 (declarator -> direct_declarator .)
    SEMI            reduce using rule 70 (declarator -> direct_declarator .)
    COLON           reduce using rule 70 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 42
    LPAREN          shift and go to state 43


state 5

    (24) storage_class_specifier -> STATIC .

    AUTO            reduce using rule 24 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 24 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 24 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 24 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 24 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 24 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 24 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 24 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 24 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 24 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 24 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 24 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 24 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 24 (storage_class_specifier -> STATIC .)
    TYPEID          reduce using rule 24 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 24 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 24 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 24 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 24 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 24 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 24 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 24 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 24 (storage_class_specifier -> STATIC .)
    LBRACKET        reduce using rule 24 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 24 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 24 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 24 (storage_class_specifier -> STATIC .)


state 6

    (40) type_qualifier -> VOLATILE .

    AUTO            reduce using rule 40 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 40 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 40 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 40 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 40 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 40 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 40 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 40 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 40 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 40 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 40 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 40 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 40 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 40 (type_qualifier -> VOLATILE .)
    TYPEID          reduce using rule 40 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 40 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 40 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 40 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 40 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 40 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 40 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 40 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 40 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 40 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 40 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 40 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 40 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 40 (type_qualifier -> VOLATILE .)


state 7

    (9) function_definition -> declarator . enter_function_scope declaration_list compound_statement
    (10) function_definition -> declarator . compound_statement
    (211) enter_function_scope -> . empty
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (210) empty -> .

    LBRACE          shift and go to state 46
    AUTO            reduce using rule 210 (empty -> .)
    REGISTER        reduce using rule 210 (empty -> .)
    STATIC          reduce using rule 210 (empty -> .)
    EXTERN          reduce using rule 210 (empty -> .)
    TYPEDEF         reduce using rule 210 (empty -> .)
    VOID            reduce using rule 210 (empty -> .)
    CHAR            reduce using rule 210 (empty -> .)
    SHORT           reduce using rule 210 (empty -> .)
    INT             reduce using rule 210 (empty -> .)
    LONG            reduce using rule 210 (empty -> .)
    FLOAT           reduce using rule 210 (empty -> .)
    DOUBLE          reduce using rule 210 (empty -> .)
    SIGNED          reduce using rule 210 (empty -> .)
    UNSIGNED        reduce using rule 210 (empty -> .)
    TYPEID          reduce using rule 210 (empty -> .)
    CONST           reduce using rule 210 (empty -> .)
    VOLATILE        reduce using rule 210 (empty -> .)
    ENUM            reduce using rule 210 (empty -> .)
    STRUCT          reduce using rule 210 (empty -> .)
    UNION           reduce using rule 210 (empty -> .)

    compound_statement             shift and go to state 44
    enter_function_scope           shift and go to state 45
    empty                          shift and go to state 47

state 8

    (34) type_specifier -> SIGNED .

    AUTO            reduce using rule 34 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 34 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 34 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 34 (type_specifier -> SIGNED .)
    TYPEDEF         reduce using rule 34 (type_specifier -> SIGNED .)
    VOID            reduce using rule 34 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 34 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 34 (type_specifier -> SIGNED .)
    INT             reduce using rule 34 (type_specifier -> SIGNED .)
    LONG            reduce using rule 34 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 34 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 34 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 34 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 34 (type_specifier -> SIGNED .)
    TYPEID          reduce using rule 34 (type_specifier -> SIGNED .)
    CONST           reduce using rule 34 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 34 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 34 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 34 (type_specifier -> SIGNED .)
    UNION           reduce using rule 34 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 34 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 34 (type_specifier -> SIGNED .)
    ID              reduce using rule 34 (type_specifier -> SIGNED .)
    LBRACKET        reduce using rule 34 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 34 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 34 (type_specifier -> SIGNED .)
    SEMI            reduce using rule 34 (type_specifier -> SIGNED .)
    COLON           reduce using rule 34 (type_specifier -> SIGNED .)


state 9

    (1) program -> translation_unit . leave_scope
    (5) translation_unit_opt -> translation_unit . external_declaration
    (214) leave_scope -> . empty
    (6) external_declaration -> . function_definition
    (7) external_declaration -> . declaration
    (210) empty -> .
    (8) function_definition -> . declaration_specifiers declarator enter_function_scope declaration_list compound_statement
    (9) function_definition -> . declarator enter_function_scope declaration_list compound_statement
    (10) function_definition -> . declarator compound_statement
    (11) function_definition -> . declaration_specifiers declarator compound_statement
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (69) declarator -> . pointer direct_declarator
    (70) declarator -> . direct_declarator
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (209) identifier -> . ID
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    $end            reduce using rule 210 (empty -> .)
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 12
    ENUM            shift and go to state 38
    ID              shift and go to state 31
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    struct_or_union_specifier      shift and go to state 10
    storage_class_specifier        shift and go to state 24
    direct_declarator              shift and go to state 4
    leave_scope                    shift and go to state 48
    declarator                     shift and go to state 7
    empty                          shift and go to state 50
    struct_or_union                shift and go to state 26
    pointer                        shift and go to state 33
    declaration_specifiers         shift and go to state 35
    declaration                    shift and go to state 11
    external_declaration           shift and go to state 49
    enum_specifier                 shift and go to state 14
    function_definition            shift and go to state 19
    type_qualifier                 shift and go to state 15
    identifier                     shift and go to state 41
    type_specifier                 shift and go to state 20

state 10

    (36) type_specifier -> struct_or_union_specifier .

    AUTO            reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    TYPEDEF         reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    TYPEID          reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 36 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 36 (type_specifier -> struct_or_union_specifier .)


state 11

    (7) external_declaration -> declaration .

    AUTO            reduce using rule 7 (external_declaration -> declaration .)
    REGISTER        reduce using rule 7 (external_declaration -> declaration .)
    STATIC          reduce using rule 7 (external_declaration -> declaration .)
    EXTERN          reduce using rule 7 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 7 (external_declaration -> declaration .)
    VOID            reduce using rule 7 (external_declaration -> declaration .)
    CHAR            reduce using rule 7 (external_declaration -> declaration .)
    SHORT           reduce using rule 7 (external_declaration -> declaration .)
    INT             reduce using rule 7 (external_declaration -> declaration .)
    LONG            reduce using rule 7 (external_declaration -> declaration .)
    FLOAT           reduce using rule 7 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 7 (external_declaration -> declaration .)
    SIGNED          reduce using rule 7 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 7 (external_declaration -> declaration .)
    TYPEID          reduce using rule 7 (external_declaration -> declaration .)
    CONST           reduce using rule 7 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 7 (external_declaration -> declaration .)
    TIMES           reduce using rule 7 (external_declaration -> declaration .)
    LPAREN          reduce using rule 7 (external_declaration -> declaration .)
    ENUM            reduce using rule 7 (external_declaration -> declaration .)
    ID              reduce using rule 7 (external_declaration -> declaration .)
    STRUCT          reduce using rule 7 (external_declaration -> declaration .)
    UNION           reduce using rule 7 (external_declaration -> declaration .)
    $end            reduce using rule 7 (external_declaration -> declaration .)


state 12

    (72) direct_declarator -> LPAREN . declarator RPAREN
    (69) declarator -> . pointer direct_declarator
    (70) declarator -> . direct_declarator
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (209) identifier -> . ID

    TIMES           shift and go to state 36
    LPAREN          shift and go to state 12
    ID              shift and go to state 31

    pointer                        shift and go to state 33
    direct_declarator              shift and go to state 4
    declarator                     shift and go to state 51
    identifier                     shift and go to state 41

state 13

    (4) translation_unit_opt -> external_declaration .

    AUTO            reduce using rule 4 (translation_unit_opt -> external_declaration .)
    REGISTER        reduce using rule 4 (translation_unit_opt -> external_declaration .)
    STATIC          reduce using rule 4 (translation_unit_opt -> external_declaration .)
    EXTERN          reduce using rule 4 (translation_unit_opt -> external_declaration .)
    TYPEDEF         reduce using rule 4 (translation_unit_opt -> external_declaration .)
    VOID            reduce using rule 4 (translation_unit_opt -> external_declaration .)
    CHAR            reduce using rule 4 (translation_unit_opt -> external_declaration .)
    SHORT           reduce using rule 4 (translation_unit_opt -> external_declaration .)
    INT             reduce using rule 4 (translation_unit_opt -> external_declaration .)
    LONG            reduce using rule 4 (translation_unit_opt -> external_declaration .)
    FLOAT           reduce using rule 4 (translation_unit_opt -> external_declaration .)
    DOUBLE          reduce using rule 4 (translation_unit_opt -> external_declaration .)
    SIGNED          reduce using rule 4 (translation_unit_opt -> external_declaration .)
    UNSIGNED        reduce using rule 4 (translation_unit_opt -> external_declaration .)
    TYPEID          reduce using rule 4 (translation_unit_opt -> external_declaration .)
    CONST           reduce using rule 4 (translation_unit_opt -> external_declaration .)
    VOLATILE        reduce using rule 4 (translation_unit_opt -> external_declaration .)
    TIMES           reduce using rule 4 (translation_unit_opt -> external_declaration .)
    LPAREN          reduce using rule 4 (translation_unit_opt -> external_declaration .)
    ENUM            reduce using rule 4 (translation_unit_opt -> external_declaration .)
    ID              reduce using rule 4 (translation_unit_opt -> external_declaration .)
    STRUCT          reduce using rule 4 (translation_unit_opt -> external_declaration .)
    UNION           reduce using rule 4 (translation_unit_opt -> external_declaration .)
    $end            reduce using rule 4 (translation_unit_opt -> external_declaration .)


state 14

    (37) type_specifier -> enum_specifier .

    AUTO            reduce using rule 37 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 37 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 37 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 37 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 37 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 37 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 37 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 37 (type_specifier -> enum_specifier .)
    INT             reduce using rule 37 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 37 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 37 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 37 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 37 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 37 (type_specifier -> enum_specifier .)
    TYPEID          reduce using rule 37 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 37 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 37 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 37 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 37 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 37 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 37 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 37 (type_specifier -> enum_specifier .)
    ID              reduce using rule 37 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 37 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 37 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 37 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 37 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 37 (type_specifier -> enum_specifier .)


state 15

    (18) declaration_specifiers -> type_qualifier . declaration_specifiers
    (21) declaration_specifiers -> type_qualifier .
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    SEMI            reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    TIMES           reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    LPAREN          reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    ID              reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    LBRACKET        reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    RPAREN          reduce using rule 21 (declaration_specifiers -> type_qualifier .)
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    type_qualifier                 shift and go to state 15
    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 52
    struct_or_union                shift and go to state 26
    storage_class_specifier        shift and go to state 24
    type_specifier                 shift and go to state 20

state 16

    (27) type_specifier -> VOID .

    AUTO            reduce using rule 27 (type_specifier -> VOID .)
    REGISTER        reduce using rule 27 (type_specifier -> VOID .)
    STATIC          reduce using rule 27 (type_specifier -> VOID .)
    EXTERN          reduce using rule 27 (type_specifier -> VOID .)
    TYPEDEF         reduce using rule 27 (type_specifier -> VOID .)
    VOID            reduce using rule 27 (type_specifier -> VOID .)
    CHAR            reduce using rule 27 (type_specifier -> VOID .)
    SHORT           reduce using rule 27 (type_specifier -> VOID .)
    INT             reduce using rule 27 (type_specifier -> VOID .)
    LONG            reduce using rule 27 (type_specifier -> VOID .)
    FLOAT           reduce using rule 27 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 27 (type_specifier -> VOID .)
    SIGNED          reduce using rule 27 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 27 (type_specifier -> VOID .)
    TYPEID          reduce using rule 27 (type_specifier -> VOID .)
    CONST           reduce using rule 27 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 27 (type_specifier -> VOID .)
    ENUM            reduce using rule 27 (type_specifier -> VOID .)
    STRUCT          reduce using rule 27 (type_specifier -> VOID .)
    UNION           reduce using rule 27 (type_specifier -> VOID .)
    TIMES           reduce using rule 27 (type_specifier -> VOID .)
    LPAREN          reduce using rule 27 (type_specifier -> VOID .)
    ID              reduce using rule 27 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 27 (type_specifier -> VOID .)
    COMMA           reduce using rule 27 (type_specifier -> VOID .)
    RPAREN          reduce using rule 27 (type_specifier -> VOID .)
    SEMI            reduce using rule 27 (type_specifier -> VOID .)
    COLON           reduce using rule 27 (type_specifier -> VOID .)


state 17

    (39) type_qualifier -> CONST .

    AUTO            reduce using rule 39 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 39 (type_qualifier -> CONST .)
    STATIC          reduce using rule 39 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 39 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 39 (type_qualifier -> CONST .)
    VOID            reduce using rule 39 (type_qualifier -> CONST .)
    CHAR            reduce using rule 39 (type_qualifier -> CONST .)
    SHORT           reduce using rule 39 (type_qualifier -> CONST .)
    INT             reduce using rule 39 (type_qualifier -> CONST .)
    LONG            reduce using rule 39 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 39 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 39 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 39 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 39 (type_qualifier -> CONST .)
    TYPEID          reduce using rule 39 (type_qualifier -> CONST .)
    CONST           reduce using rule 39 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 39 (type_qualifier -> CONST .)
    ENUM            reduce using rule 39 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 39 (type_qualifier -> CONST .)
    UNION           reduce using rule 39 (type_qualifier -> CONST .)
    TIMES           reduce using rule 39 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 39 (type_qualifier -> CONST .)
    ID              reduce using rule 39 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 39 (type_qualifier -> CONST .)
    COMMA           reduce using rule 39 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 39 (type_qualifier -> CONST .)
    COLON           reduce using rule 39 (type_qualifier -> CONST .)
    SEMI            reduce using rule 39 (type_qualifier -> CONST .)


state 18

    (38) type_specifier -> TYPEID .

    AUTO            reduce using rule 38 (type_specifier -> TYPEID .)
    REGISTER        reduce using rule 38 (type_specifier -> TYPEID .)
    STATIC          reduce using rule 38 (type_specifier -> TYPEID .)
    EXTERN          reduce using rule 38 (type_specifier -> TYPEID .)
    TYPEDEF         reduce using rule 38 (type_specifier -> TYPEID .)
    VOID            reduce using rule 38 (type_specifier -> TYPEID .)
    CHAR            reduce using rule 38 (type_specifier -> TYPEID .)
    SHORT           reduce using rule 38 (type_specifier -> TYPEID .)
    INT             reduce using rule 38 (type_specifier -> TYPEID .)
    LONG            reduce using rule 38 (type_specifier -> TYPEID .)
    FLOAT           reduce using rule 38 (type_specifier -> TYPEID .)
    DOUBLE          reduce using rule 38 (type_specifier -> TYPEID .)
    SIGNED          reduce using rule 38 (type_specifier -> TYPEID .)
    UNSIGNED        reduce using rule 38 (type_specifier -> TYPEID .)
    TYPEID          reduce using rule 38 (type_specifier -> TYPEID .)
    CONST           reduce using rule 38 (type_specifier -> TYPEID .)
    VOLATILE        reduce using rule 38 (type_specifier -> TYPEID .)
    ENUM            reduce using rule 38 (type_specifier -> TYPEID .)
    STRUCT          reduce using rule 38 (type_specifier -> TYPEID .)
    UNION           reduce using rule 38 (type_specifier -> TYPEID .)
    TIMES           reduce using rule 38 (type_specifier -> TYPEID .)
    LPAREN          reduce using rule 38 (type_specifier -> TYPEID .)
    ID              reduce using rule 38 (type_specifier -> TYPEID .)
    LBRACKET        reduce using rule 38 (type_specifier -> TYPEID .)
    COMMA           reduce using rule 38 (type_specifier -> TYPEID .)
    RPAREN          reduce using rule 38 (type_specifier -> TYPEID .)
    SEMI            reduce using rule 38 (type_specifier -> TYPEID .)
    COLON           reduce using rule 38 (type_specifier -> TYPEID .)


state 19

    (6) external_declaration -> function_definition .

    AUTO            reduce using rule 6 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 6 (external_declaration -> function_definition .)
    STATIC          reduce using rule 6 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 6 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 6 (external_declaration -> function_definition .)
    VOID            reduce using rule 6 (external_declaration -> function_definition .)
    CHAR            reduce using rule 6 (external_declaration -> function_definition .)
    SHORT           reduce using rule 6 (external_declaration -> function_definition .)
    INT             reduce using rule 6 (external_declaration -> function_definition .)
    LONG            reduce using rule 6 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 6 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 6 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 6 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 6 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 6 (external_declaration -> function_definition .)
    CONST           reduce using rule 6 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 6 (external_declaration -> function_definition .)
    TIMES           reduce using rule 6 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 6 (external_declaration -> function_definition .)
    ENUM            reduce using rule 6 (external_declaration -> function_definition .)
    ID              reduce using rule 6 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 6 (external_declaration -> function_definition .)
    UNION           reduce using rule 6 (external_declaration -> function_definition .)
    $end            reduce using rule 6 (external_declaration -> function_definition .)


state 20

    (17) declaration_specifiers -> type_specifier . declaration_specifiers
    (20) declaration_specifiers -> type_specifier .
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    SEMI            reduce using rule 20 (declaration_specifiers -> type_specifier .)
    TIMES           reduce using rule 20 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 20 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 20 (declaration_specifiers -> type_specifier .)
    LBRACKET        reduce using rule 20 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 20 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 20 (declaration_specifiers -> type_specifier .)
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    type_qualifier                 shift and go to state 15
    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 53
    struct_or_union                shift and go to state 26
    storage_class_specifier        shift and go to state 24
    type_specifier                 shift and go to state 20

state 21

    (26) storage_class_specifier -> TYPEDEF .

    AUTO            reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    TYPEID          reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    LBRACKET        reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 26 (storage_class_specifier -> TYPEDEF .)
    SEMI            reduce using rule 26 (storage_class_specifier -> TYPEDEF .)


state 22

    (22) storage_class_specifier -> AUTO .

    AUTO            reduce using rule 22 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 22 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 22 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 22 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 22 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 22 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 22 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 22 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 22 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 22 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 22 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 22 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 22 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 22 (storage_class_specifier -> AUTO .)
    TYPEID          reduce using rule 22 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 22 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 22 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 22 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 22 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 22 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 22 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 22 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 22 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 22 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 22 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 22 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 22 (storage_class_specifier -> AUTO .)


state 23

    (0) S' -> program .



state 24

    (16) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (19) declaration_specifiers -> storage_class_specifier .
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    SEMI            reduce using rule 19 (declaration_specifiers -> storage_class_specifier .)
    TIMES           reduce using rule 19 (declaration_specifiers -> storage_class_specifier .)
    LPAREN          reduce using rule 19 (declaration_specifiers -> storage_class_specifier .)
    ID              reduce using rule 19 (declaration_specifiers -> storage_class_specifier .)
    LBRACKET        reduce using rule 19 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 19 (declaration_specifiers -> storage_class_specifier .)
    RPAREN          reduce using rule 19 (declaration_specifiers -> storage_class_specifier .)
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    type_qualifier                 shift and go to state 15
    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 54
    struct_or_union                shift and go to state 26
    storage_class_specifier        shift and go to state 24
    type_specifier                 shift and go to state 20

state 25

    (2) translation_unit -> translation_unit_opt .

    AUTO            reduce using rule 2 (translation_unit -> translation_unit_opt .)
    REGISTER        reduce using rule 2 (translation_unit -> translation_unit_opt .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit_opt .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit_opt .)
    TYPEDEF         reduce using rule 2 (translation_unit -> translation_unit_opt .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit_opt .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit_opt .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit_opt .)
    INT             reduce using rule 2 (translation_unit -> translation_unit_opt .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit_opt .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit_opt .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit_opt .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit_opt .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit_opt .)
    TYPEID          reduce using rule 2 (translation_unit -> translation_unit_opt .)
    CONST           reduce using rule 2 (translation_unit -> translation_unit_opt .)
    VOLATILE        reduce using rule 2 (translation_unit -> translation_unit_opt .)
    TIMES           reduce using rule 2 (translation_unit -> translation_unit_opt .)
    LPAREN          reduce using rule 2 (translation_unit -> translation_unit_opt .)
    ENUM            reduce using rule 2 (translation_unit -> translation_unit_opt .)
    ID              reduce using rule 2 (translation_unit -> translation_unit_opt .)
    STRUCT          reduce using rule 2 (translation_unit -> translation_unit_opt .)
    UNION           reduce using rule 2 (translation_unit -> translation_unit_opt .)
    $end            reduce using rule 2 (translation_unit -> translation_unit_opt .)


state 26

    (41) struct_or_union_specifier -> struct_or_union . identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> struct_or_union . LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> struct_or_union . identifier
    (209) identifier -> . ID

    LBRACE          shift and go to state 55
    ID              shift and go to state 31

    identifier                     shift and go to state 56

state 27

    (30) type_specifier -> INT .

    AUTO            reduce using rule 30 (type_specifier -> INT .)
    REGISTER        reduce using rule 30 (type_specifier -> INT .)
    STATIC          reduce using rule 30 (type_specifier -> INT .)
    EXTERN          reduce using rule 30 (type_specifier -> INT .)
    TYPEDEF         reduce using rule 30 (type_specifier -> INT .)
    VOID            reduce using rule 30 (type_specifier -> INT .)
    CHAR            reduce using rule 30 (type_specifier -> INT .)
    SHORT           reduce using rule 30 (type_specifier -> INT .)
    INT             reduce using rule 30 (type_specifier -> INT .)
    LONG            reduce using rule 30 (type_specifier -> INT .)
    FLOAT           reduce using rule 30 (type_specifier -> INT .)
    DOUBLE          reduce using rule 30 (type_specifier -> INT .)
    SIGNED          reduce using rule 30 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 30 (type_specifier -> INT .)
    TYPEID          reduce using rule 30 (type_specifier -> INT .)
    CONST           reduce using rule 30 (type_specifier -> INT .)
    VOLATILE        reduce using rule 30 (type_specifier -> INT .)
    ENUM            reduce using rule 30 (type_specifier -> INT .)
    STRUCT          reduce using rule 30 (type_specifier -> INT .)
    UNION           reduce using rule 30 (type_specifier -> INT .)
    TIMES           reduce using rule 30 (type_specifier -> INT .)
    LPAREN          reduce using rule 30 (type_specifier -> INT .)
    ID              reduce using rule 30 (type_specifier -> INT .)
    LBRACKET        reduce using rule 30 (type_specifier -> INT .)
    COMMA           reduce using rule 30 (type_specifier -> INT .)
    RPAREN          reduce using rule 30 (type_specifier -> INT .)
    SEMI            reduce using rule 30 (type_specifier -> INT .)
    COLON           reduce using rule 30 (type_specifier -> INT .)


state 28

    (3) translation_unit -> empty .

    AUTO            reduce using rule 3 (translation_unit -> empty .)
    REGISTER        reduce using rule 3 (translation_unit -> empty .)
    STATIC          reduce using rule 3 (translation_unit -> empty .)
    EXTERN          reduce using rule 3 (translation_unit -> empty .)
    TYPEDEF         reduce using rule 3 (translation_unit -> empty .)
    VOID            reduce using rule 3 (translation_unit -> empty .)
    CHAR            reduce using rule 3 (translation_unit -> empty .)
    SHORT           reduce using rule 3 (translation_unit -> empty .)
    INT             reduce using rule 3 (translation_unit -> empty .)
    LONG            reduce using rule 3 (translation_unit -> empty .)
    FLOAT           reduce using rule 3 (translation_unit -> empty .)
    DOUBLE          reduce using rule 3 (translation_unit -> empty .)
    SIGNED          reduce using rule 3 (translation_unit -> empty .)
    UNSIGNED        reduce using rule 3 (translation_unit -> empty .)
    TYPEID          reduce using rule 3 (translation_unit -> empty .)
    CONST           reduce using rule 3 (translation_unit -> empty .)
    VOLATILE        reduce using rule 3 (translation_unit -> empty .)
    TIMES           reduce using rule 3 (translation_unit -> empty .)
    LPAREN          reduce using rule 3 (translation_unit -> empty .)
    ENUM            reduce using rule 3 (translation_unit -> empty .)
    ID              reduce using rule 3 (translation_unit -> empty .)
    STRUCT          reduce using rule 3 (translation_unit -> empty .)
    UNION           reduce using rule 3 (translation_unit -> empty .)
    $end            reduce using rule 3 (translation_unit -> empty .)


state 29

    (32) type_specifier -> FLOAT .

    AUTO            reduce using rule 32 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 32 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 32 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 32 (type_specifier -> FLOAT .)
    TYPEDEF         reduce using rule 32 (type_specifier -> FLOAT .)
    VOID            reduce using rule 32 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 32 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 32 (type_specifier -> FLOAT .)
    INT             reduce using rule 32 (type_specifier -> FLOAT .)
    LONG            reduce using rule 32 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 32 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 32 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 32 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 32 (type_specifier -> FLOAT .)
    TYPEID          reduce using rule 32 (type_specifier -> FLOAT .)
    CONST           reduce using rule 32 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 32 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 32 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 32 (type_specifier -> FLOAT .)
    UNION           reduce using rule 32 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 32 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 32 (type_specifier -> FLOAT .)
    ID              reduce using rule 32 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 32 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 32 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 32 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 32 (type_specifier -> FLOAT .)
    COLON           reduce using rule 32 (type_specifier -> FLOAT .)


state 30

    (33) type_specifier -> DOUBLE .

    AUTO            reduce using rule 33 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 33 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 33 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 33 (type_specifier -> DOUBLE .)
    TYPEDEF         reduce using rule 33 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 33 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 33 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 33 (type_specifier -> DOUBLE .)
    INT             reduce using rule 33 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 33 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 33 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 33 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 33 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 33 (type_specifier -> DOUBLE .)
    TYPEID          reduce using rule 33 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 33 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 33 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 33 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 33 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 33 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 33 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 33 (type_specifier -> DOUBLE .)
    ID              reduce using rule 33 (type_specifier -> DOUBLE .)
    LBRACKET        reduce using rule 33 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 33 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 33 (type_specifier -> DOUBLE .)
    SEMI            reduce using rule 33 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 33 (type_specifier -> DOUBLE .)


state 31

    (209) identifier -> ID .

    COLON           reduce using rule 209 (identifier -> ID .)
    LBRACKET        reduce using rule 209 (identifier -> ID .)
    LPAREN          reduce using rule 209 (identifier -> ID .)
    PERIOD          reduce using rule 209 (identifier -> ID .)
    ARROW           reduce using rule 209 (identifier -> ID .)
    PLUSPLUS        reduce using rule 209 (identifier -> ID .)
    MINUSMINUS      reduce using rule 209 (identifier -> ID .)
    EQUALS          reduce using rule 209 (identifier -> ID .)
    XOREQUAL        reduce using rule 209 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 209 (identifier -> ID .)
    DIVEQUAL        reduce using rule 209 (identifier -> ID .)
    MODEQUAL        reduce using rule 209 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 209 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 209 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 209 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 209 (identifier -> ID .)
    ANDEQUAL        reduce using rule 209 (identifier -> ID .)
    OREQUAL         reduce using rule 209 (identifier -> ID .)
    CONDOP          reduce using rule 209 (identifier -> ID .)
    TIMES           reduce using rule 209 (identifier -> ID .)
    DIVIDE          reduce using rule 209 (identifier -> ID .)
    MOD             reduce using rule 209 (identifier -> ID .)
    PLUS            reduce using rule 209 (identifier -> ID .)
    MINUS           reduce using rule 209 (identifier -> ID .)
    RSHIFT          reduce using rule 209 (identifier -> ID .)
    LSHIFT          reduce using rule 209 (identifier -> ID .)
    LT              reduce using rule 209 (identifier -> ID .)
    LE              reduce using rule 209 (identifier -> ID .)
    GE              reduce using rule 209 (identifier -> ID .)
    GT              reduce using rule 209 (identifier -> ID .)
    EQ              reduce using rule 209 (identifier -> ID .)
    NE              reduce using rule 209 (identifier -> ID .)
    AND             reduce using rule 209 (identifier -> ID .)
    OR              reduce using rule 209 (identifier -> ID .)
    XOR             reduce using rule 209 (identifier -> ID .)
    LAND            reduce using rule 209 (identifier -> ID .)
    LOR             reduce using rule 209 (identifier -> ID .)
    COMMA           reduce using rule 209 (identifier -> ID .)
    SEMI            reduce using rule 209 (identifier -> ID .)
    RBRACKET        reduce using rule 209 (identifier -> ID .)
    RPAREN          reduce using rule 209 (identifier -> ID .)
    RBRACE          reduce using rule 209 (identifier -> ID .)
    LBRACE          reduce using rule 209 (identifier -> ID .)
    AUTO            reduce using rule 209 (identifier -> ID .)
    REGISTER        reduce using rule 209 (identifier -> ID .)
    STATIC          reduce using rule 209 (identifier -> ID .)
    EXTERN          reduce using rule 209 (identifier -> ID .)
    TYPEDEF         reduce using rule 209 (identifier -> ID .)
    VOID            reduce using rule 209 (identifier -> ID .)
    CHAR            reduce using rule 209 (identifier -> ID .)
    SHORT           reduce using rule 209 (identifier -> ID .)
    INT             reduce using rule 209 (identifier -> ID .)
    LONG            reduce using rule 209 (identifier -> ID .)
    FLOAT           reduce using rule 209 (identifier -> ID .)
    DOUBLE          reduce using rule 209 (identifier -> ID .)
    SIGNED          reduce using rule 209 (identifier -> ID .)
    UNSIGNED        reduce using rule 209 (identifier -> ID .)
    TYPEID          reduce using rule 209 (identifier -> ID .)
    CONST           reduce using rule 209 (identifier -> ID .)
    VOLATILE        reduce using rule 209 (identifier -> ID .)
    ENUM            reduce using rule 209 (identifier -> ID .)
    STRUCT          reduce using rule 209 (identifier -> ID .)
    UNION           reduce using rule 209 (identifier -> ID .)
    ID              reduce using rule 209 (identifier -> ID .)


state 32

    (28) type_specifier -> CHAR .

    AUTO            reduce using rule 28 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 28 (type_specifier -> CHAR .)
    STATIC          reduce using rule 28 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 28 (type_specifier -> CHAR .)
    TYPEDEF         reduce using rule 28 (type_specifier -> CHAR .)
    VOID            reduce using rule 28 (type_specifier -> CHAR .)
    CHAR            reduce using rule 28 (type_specifier -> CHAR .)
    SHORT           reduce using rule 28 (type_specifier -> CHAR .)
    INT             reduce using rule 28 (type_specifier -> CHAR .)
    LONG            reduce using rule 28 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 28 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 28 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 28 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 28 (type_specifier -> CHAR .)
    TYPEID          reduce using rule 28 (type_specifier -> CHAR .)
    CONST           reduce using rule 28 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 28 (type_specifier -> CHAR .)
    ENUM            reduce using rule 28 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 28 (type_specifier -> CHAR .)
    UNION           reduce using rule 28 (type_specifier -> CHAR .)
    TIMES           reduce using rule 28 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 28 (type_specifier -> CHAR .)
    ID              reduce using rule 28 (type_specifier -> CHAR .)
    LBRACKET        reduce using rule 28 (type_specifier -> CHAR .)
    COMMA           reduce using rule 28 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 28 (type_specifier -> CHAR .)
    SEMI            reduce using rule 28 (type_specifier -> CHAR .)
    COLON           reduce using rule 28 (type_specifier -> CHAR .)


state 33

    (69) declarator -> pointer . direct_declarator
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (209) identifier -> . ID

    LPAREN          shift and go to state 12
    ID              shift and go to state 31

    direct_declarator              shift and go to state 57
    identifier                     shift and go to state 41

state 34

    (45) struct_or_union -> UNION .

    LBRACE          reduce using rule 45 (struct_or_union -> UNION .)
    ID              reduce using rule 45 (struct_or_union -> UNION .)


state 35

    (8) function_definition -> declaration_specifiers . declarator enter_function_scope declaration_list compound_statement
    (11) function_definition -> declaration_specifiers . declarator compound_statement
    (12) declaration -> declaration_specifiers . init_declarator_list SEMI
    (13) declaration -> declaration_specifiers . SEMI
    (69) declarator -> . pointer direct_declarator
    (70) declarator -> . direct_declarator
    (48) init_declarator_list -> . init_declarator
    (49) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (50) init_declarator -> . declarator
    (51) init_declarator -> . declarator EQUALS initializer
    (209) identifier -> . ID

    SEMI            shift and go to state 59
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 12
    ID              shift and go to state 31

    pointer                        shift and go to state 33
    init_declarator                shift and go to state 58
    direct_declarator              shift and go to state 4
    declarator                     shift and go to state 60
    init_declarator_list           shift and go to state 61
    identifier                     shift and go to state 41

state 36

    (77) pointer -> TIMES . type_qualifier_list
    (78) pointer -> TIMES .
    (79) pointer -> TIMES . type_qualifier_list pointer
    (80) pointer -> TIMES . pointer
    (81) type_qualifier_list -> . type_qualifier
    (82) type_qualifier_list -> . type_qualifier_list type_qualifier
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE

    LPAREN          reduce using rule 78 (pointer -> TIMES .)
    ID              reduce using rule 78 (pointer -> TIMES .)
    LBRACKET        reduce using rule 78 (pointer -> TIMES .)
    COMMA           reduce using rule 78 (pointer -> TIMES .)
    RPAREN          reduce using rule 78 (pointer -> TIMES .)
    TIMES           shift and go to state 36
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6

    pointer                        shift and go to state 62
    type_qualifier_list            shift and go to state 63
    type_qualifier                 shift and go to state 64

state 37

    (44) struct_or_union -> STRUCT .

    LBRACE          reduce using rule 44 (struct_or_union -> STRUCT .)
    ID              reduce using rule 44 (struct_or_union -> STRUCT .)


state 38

    (62) enum_specifier -> ENUM . identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> ENUM . LBRACE enumerator_list RBRACE
    (64) enum_specifier -> ENUM . identifier
    (209) identifier -> . ID

    LBRACE          shift and go to state 65
    ID              shift and go to state 31

    identifier                     shift and go to state 66

state 39

    (35) type_specifier -> UNSIGNED .

    AUTO            reduce using rule 35 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 35 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 35 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 35 (type_specifier -> UNSIGNED .)
    TYPEDEF         reduce using rule 35 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 35 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 35 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 35 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 35 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 35 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 35 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 35 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 35 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 35 (type_specifier -> UNSIGNED .)
    TYPEID          reduce using rule 35 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 35 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 35 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 35 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 35 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 35 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 35 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 35 (type_specifier -> UNSIGNED .)
    ID              reduce using rule 35 (type_specifier -> UNSIGNED .)
    LBRACKET        reduce using rule 35 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 35 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 35 (type_specifier -> UNSIGNED .)
    SEMI            reduce using rule 35 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 35 (type_specifier -> UNSIGNED .)


state 40

    (23) storage_class_specifier -> REGISTER .

    AUTO            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    TYPEDEF         reduce using rule 23 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 23 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    TYPEID          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 23 (storage_class_specifier -> REGISTER .)
    LBRACKET        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 23 (storage_class_specifier -> REGISTER .)


state 41

    (71) direct_declarator -> identifier .

    LBRACKET        reduce using rule 71 (direct_declarator -> identifier .)
    LPAREN          reduce using rule 71 (direct_declarator -> identifier .)
    LBRACE          reduce using rule 71 (direct_declarator -> identifier .)
    AUTO            reduce using rule 71 (direct_declarator -> identifier .)
    REGISTER        reduce using rule 71 (direct_declarator -> identifier .)
    STATIC          reduce using rule 71 (direct_declarator -> identifier .)
    EXTERN          reduce using rule 71 (direct_declarator -> identifier .)
    TYPEDEF         reduce using rule 71 (direct_declarator -> identifier .)
    VOID            reduce using rule 71 (direct_declarator -> identifier .)
    CHAR            reduce using rule 71 (direct_declarator -> identifier .)
    SHORT           reduce using rule 71 (direct_declarator -> identifier .)
    INT             reduce using rule 71 (direct_declarator -> identifier .)
    LONG            reduce using rule 71 (direct_declarator -> identifier .)
    FLOAT           reduce using rule 71 (direct_declarator -> identifier .)
    DOUBLE          reduce using rule 71 (direct_declarator -> identifier .)
    SIGNED          reduce using rule 71 (direct_declarator -> identifier .)
    UNSIGNED        reduce using rule 71 (direct_declarator -> identifier .)
    TYPEID          reduce using rule 71 (direct_declarator -> identifier .)
    CONST           reduce using rule 71 (direct_declarator -> identifier .)
    VOLATILE        reduce using rule 71 (direct_declarator -> identifier .)
    ENUM            reduce using rule 71 (direct_declarator -> identifier .)
    STRUCT          reduce using rule 71 (direct_declarator -> identifier .)
    UNION           reduce using rule 71 (direct_declarator -> identifier .)
    RPAREN          reduce using rule 71 (direct_declarator -> identifier .)
    EQUALS          reduce using rule 71 (direct_declarator -> identifier .)
    SEMI            reduce using rule 71 (direct_declarator -> identifier .)
    COMMA           reduce using rule 71 (direct_declarator -> identifier .)
    COLON           reduce using rule 71 (direct_declarator -> identifier .)


state 42

    (73) direct_declarator -> direct_declarator LBRACKET . constant_expression_option RBRACKET
    (107) constant_expression_option -> . empty
    (108) constant_expression_option -> . constant_expression
    (210) empty -> .
    (154) constant_expression -> . conditional_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    RBRACKET        reduce using rule 210 (empty -> .)
    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    constant_expression_option     shift and go to state 79
    string_literal                 shift and go to state 76
    constant_expression            shift and go to state 85
    conditional_expression         shift and go to state 70
    empty                          shift and go to state 86
    identifier                     shift and go to state 93

state 43

    (74) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (75) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (76) direct_declarator -> direct_declarator LPAREN . RPAREN
    (83) parameter_type_list -> . parameter_list
    (84) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (89) identifier_list -> . identifier
    (90) identifier_list -> . identifier_list COMMA identifier
    (85) parameter_list -> . parameter_declaration
    (86) parameter_list -> . parameter_list COMMA parameter_declaration
    (209) identifier -> . ID
    (87) parameter_declaration -> . declaration_specifiers declarator
    (88) parameter_declaration -> . declaration_specifiers abstract_declarator_option
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    RPAREN          shift and go to state 99
    ID              shift and go to state 31
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    identifier_list                shift and go to state 97
    type_qualifier                 shift and go to state 15
    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 98
    parameter_list                 shift and go to state 95
    storage_class_specifier        shift and go to state 24
    struct_or_union                shift and go to state 26
    enum_specifier                 shift and go to state 14
    parameter_type_list            shift and go to state 96
    parameter_declaration          shift and go to state 94
    identifier                     shift and go to state 100
    type_specifier                 shift and go to state 20

state 44

    (10) function_definition -> declarator compound_statement .

    AUTO            reduce using rule 10 (function_definition -> declarator compound_statement .)
    REGISTER        reduce using rule 10 (function_definition -> declarator compound_statement .)
    STATIC          reduce using rule 10 (function_definition -> declarator compound_statement .)
    EXTERN          reduce using rule 10 (function_definition -> declarator compound_statement .)
    TYPEDEF         reduce using rule 10 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 10 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 10 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 10 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 10 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 10 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 10 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 10 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 10 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 10 (function_definition -> declarator compound_statement .)
    TYPEID          reduce using rule 10 (function_definition -> declarator compound_statement .)
    CONST           reduce using rule 10 (function_definition -> declarator compound_statement .)
    VOLATILE        reduce using rule 10 (function_definition -> declarator compound_statement .)
    TIMES           reduce using rule 10 (function_definition -> declarator compound_statement .)
    LPAREN          reduce using rule 10 (function_definition -> declarator compound_statement .)
    ENUM            reduce using rule 10 (function_definition -> declarator compound_statement .)
    ID              reduce using rule 10 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 10 (function_definition -> declarator compound_statement .)
    UNION           reduce using rule 10 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 10 (function_definition -> declarator compound_statement .)


state 45

    (9) function_definition -> declarator enter_function_scope . declaration_list compound_statement
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration_list declaration
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 102
    declaration                    shift and go to state 103
    storage_class_specifier        shift and go to state 24
    struct_or_union                shift and go to state 26
    enum_specifier                 shift and go to state 14
    declaration_list               shift and go to state 101
    type_qualifier                 shift and go to state 15
    type_specifier                 shift and go to state 20

state 46

    (121) compound_statement -> LBRACE . enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> LBRACE . enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> LBRACE . enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> LBRACE . RBRACE
    (212) enter_scope -> . empty
    (210) empty -> .

    RBRACE          shift and go to state 105
    AUTO            reduce using rule 210 (empty -> .)
    REGISTER        reduce using rule 210 (empty -> .)
    STATIC          reduce using rule 210 (empty -> .)
    EXTERN          reduce using rule 210 (empty -> .)
    TYPEDEF         reduce using rule 210 (empty -> .)
    VOID            reduce using rule 210 (empty -> .)
    CHAR            reduce using rule 210 (empty -> .)
    SHORT           reduce using rule 210 (empty -> .)
    INT             reduce using rule 210 (empty -> .)
    LONG            reduce using rule 210 (empty -> .)
    FLOAT           reduce using rule 210 (empty -> .)
    DOUBLE          reduce using rule 210 (empty -> .)
    SIGNED          reduce using rule 210 (empty -> .)
    UNSIGNED        reduce using rule 210 (empty -> .)
    TYPEID          reduce using rule 210 (empty -> .)
    CONST           reduce using rule 210 (empty -> .)
    VOLATILE        reduce using rule 210 (empty -> .)
    ENUM            reduce using rule 210 (empty -> .)
    STRUCT          reduce using rule 210 (empty -> .)
    UNION           reduce using rule 210 (empty -> .)
    CASE            reduce using rule 210 (empty -> .)
    DEFAULT         reduce using rule 210 (empty -> .)
    LBRACE          reduce using rule 210 (empty -> .)
    IF              reduce using rule 210 (empty -> .)
    SWITCH          reduce using rule 210 (empty -> .)
    WHILE           reduce using rule 210 (empty -> .)
    FOR             reduce using rule 210 (empty -> .)
    DO              reduce using rule 210 (empty -> .)
    GOTO            reduce using rule 210 (empty -> .)
    CONTINUE        reduce using rule 210 (empty -> .)
    BREAK           reduce using rule 210 (empty -> .)
    RETURN          reduce using rule 210 (empty -> .)
    ID              reduce using rule 210 (empty -> .)
    PLUSPLUS        reduce using rule 210 (empty -> .)
    MINUSMINUS      reduce using rule 210 (empty -> .)
    SIZEOF          reduce using rule 210 (empty -> .)
    AND             reduce using rule 210 (empty -> .)
    TIMES           reduce using rule 210 (empty -> .)
    PLUS            reduce using rule 210 (empty -> .)
    MINUS           reduce using rule 210 (empty -> .)
    NOT             reduce using rule 210 (empty -> .)
    LNOT            reduce using rule 210 (empty -> .)
    LPAREN          reduce using rule 210 (empty -> .)
    ICONST          reduce using rule 210 (empty -> .)
    FCONST          reduce using rule 210 (empty -> .)
    CCONST          reduce using rule 210 (empty -> .)
    SCONST          reduce using rule 210 (empty -> .)
    SEMI            reduce using rule 210 (empty -> .)

    enter_scope                    shift and go to state 104
    empty                          shift and go to state 106

state 47

    (211) enter_function_scope -> empty .

    AUTO            reduce using rule 211 (enter_function_scope -> empty .)
    REGISTER        reduce using rule 211 (enter_function_scope -> empty .)
    STATIC          reduce using rule 211 (enter_function_scope -> empty .)
    EXTERN          reduce using rule 211 (enter_function_scope -> empty .)
    TYPEDEF         reduce using rule 211 (enter_function_scope -> empty .)
    VOID            reduce using rule 211 (enter_function_scope -> empty .)
    CHAR            reduce using rule 211 (enter_function_scope -> empty .)
    SHORT           reduce using rule 211 (enter_function_scope -> empty .)
    INT             reduce using rule 211 (enter_function_scope -> empty .)
    LONG            reduce using rule 211 (enter_function_scope -> empty .)
    FLOAT           reduce using rule 211 (enter_function_scope -> empty .)
    DOUBLE          reduce using rule 211 (enter_function_scope -> empty .)
    SIGNED          reduce using rule 211 (enter_function_scope -> empty .)
    UNSIGNED        reduce using rule 211 (enter_function_scope -> empty .)
    TYPEID          reduce using rule 211 (enter_function_scope -> empty .)
    CONST           reduce using rule 211 (enter_function_scope -> empty .)
    VOLATILE        reduce using rule 211 (enter_function_scope -> empty .)
    ENUM            reduce using rule 211 (enter_function_scope -> empty .)
    STRUCT          reduce using rule 211 (enter_function_scope -> empty .)
    UNION           reduce using rule 211 (enter_function_scope -> empty .)


state 48

    (1) program -> translation_unit leave_scope .

    $end            reduce using rule 1 (program -> translation_unit leave_scope .)


state 49

    (5) translation_unit_opt -> translation_unit external_declaration .

    AUTO            reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    REGISTER        reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    STATIC          reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    EXTERN          reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    VOID            reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    CHAR            reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    SHORT           reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    INT             reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    LONG            reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    FLOAT           reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    SIGNED          reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    TYPEID          reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    CONST           reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    TIMES           reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    LPAREN          reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    ENUM            reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    ID              reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    STRUCT          reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    UNION           reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)
    $end            reduce using rule 5 (translation_unit_opt -> translation_unit external_declaration .)


state 50

    (214) leave_scope -> empty .

    $end            reduce using rule 214 (leave_scope -> empty .)


state 51

    (72) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 107


state 52

    (18) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMI            reduce using rule 18 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    TIMES           reduce using rule 18 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LPAREN          reduce using rule 18 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ID              reduce using rule 18 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LBRACKET        reduce using rule 18 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 18 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RPAREN          reduce using rule 18 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 53

    (17) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI            reduce using rule 17 (declaration_specifiers -> type_specifier declaration_specifiers .)
    TIMES           reduce using rule 17 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 17 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ID              reduce using rule 17 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 17 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 17 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 17 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 54

    (16) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMI            reduce using rule 16 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    TIMES           reduce using rule 16 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LPAREN          reduce using rule 16 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ID              reduce using rule 16 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 16 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 16 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RPAREN          reduce using rule 16 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 55

    (42) struct_or_union_specifier -> struct_or_union LBRACE . struct_declaration_list RBRACE
    (46) struct_declaration_list -> . struct_declaration
    (47) struct_declaration_list -> . struct_declaration_list struct_declaration
    (52) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (53) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_specifier
    (55) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (56) specifier_qualifier_list -> . type_qualifier
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    struct_declaration             shift and go to state 110
    type_qualifier                 shift and go to state 111
    struct_declaration_list        shift and go to state 108
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 112
    struct_or_union_specifier      shift and go to state 10
    struct_or_union                shift and go to state 26

state 56

    (41) struct_or_union_specifier -> struct_or_union identifier . LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> struct_or_union identifier .

    LBRACE          shift and go to state 113
    AUTO            reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    REGISTER        reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    STATIC          reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    EXTERN          reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    TYPEDEF         reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    VOID            reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    CHAR            reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    SHORT           reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    INT             reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    LONG            reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    FLOAT           reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    DOUBLE          reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    SIGNED          reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    UNSIGNED        reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    TYPEID          reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    CONST           reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    VOLATILE        reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    ENUM            reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    STRUCT          reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    UNION           reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    TIMES           reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    LPAREN          reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    ID              reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    LBRACKET        reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    COMMA           reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    RPAREN          reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    SEMI            reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)
    COLON           reduce using rule 43 (struct_or_union_specifier -> struct_or_union identifier .)


state 57

    (69) declarator -> pointer direct_declarator .
    (73) direct_declarator -> direct_declarator . LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (76) direct_declarator -> direct_declarator . LPAREN RPAREN

    LBRACE          reduce using rule 69 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 69 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 69 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 69 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 69 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 69 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 69 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 69 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 69 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 69 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 69 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 69 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 69 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 69 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 69 (declarator -> pointer direct_declarator .)
    TYPEID          reduce using rule 69 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 69 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 69 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 69 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 69 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 69 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 69 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 69 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 69 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 69 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 69 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 42
    LPAREN          shift and go to state 43


state 58

    (48) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 48 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 48 (init_declarator_list -> init_declarator .)


state 59

    (13) declaration -> declaration_specifiers SEMI .

    AUTO            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    REGISTER        reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    STATIC          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    EXTERN          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    TYPEDEF         reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    VOID            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    CHAR            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    SHORT           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    INT             reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    LONG            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    FLOAT           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    DOUBLE          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    SIGNED          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    UNSIGNED        reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    TYPEID          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    CONST           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    VOLATILE        reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    TIMES           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    LPAREN          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    ENUM            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    ID              reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    STRUCT          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    UNION           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    $end            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    LBRACE          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    CASE            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    DEFAULT         reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    IF              reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    SWITCH          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    WHILE           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    FOR             reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    DO              reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    GOTO            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    CONTINUE        reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    BREAK           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    RETURN          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    PLUSPLUS        reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    MINUSMINUS      reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    SIZEOF          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    AND             reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    PLUS            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    MINUS           reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    NOT             reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    LNOT            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    ICONST          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    FCONST          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    CCONST          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    SCONST          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    RBRACE          reduce using rule 13 (declaration -> declaration_specifiers SEMI .)
    SEMI            reduce using rule 13 (declaration -> declaration_specifiers SEMI .)


state 60

    (8) function_definition -> declaration_specifiers declarator . enter_function_scope declaration_list compound_statement
    (11) function_definition -> declaration_specifiers declarator . compound_statement
    (50) init_declarator -> declarator .
    (51) init_declarator -> declarator . EQUALS initializer
    (211) enter_function_scope -> . empty
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (210) empty -> .

    SEMI            reduce using rule 50 (init_declarator -> declarator .)
    COMMA           reduce using rule 50 (init_declarator -> declarator .)
    EQUALS          shift and go to state 115
    LBRACE          shift and go to state 46
    AUTO            reduce using rule 210 (empty -> .)
    REGISTER        reduce using rule 210 (empty -> .)
    STATIC          reduce using rule 210 (empty -> .)
    EXTERN          reduce using rule 210 (empty -> .)
    TYPEDEF         reduce using rule 210 (empty -> .)
    VOID            reduce using rule 210 (empty -> .)
    CHAR            reduce using rule 210 (empty -> .)
    SHORT           reduce using rule 210 (empty -> .)
    INT             reduce using rule 210 (empty -> .)
    LONG            reduce using rule 210 (empty -> .)
    FLOAT           reduce using rule 210 (empty -> .)
    DOUBLE          reduce using rule 210 (empty -> .)
    SIGNED          reduce using rule 210 (empty -> .)
    UNSIGNED        reduce using rule 210 (empty -> .)
    TYPEID          reduce using rule 210 (empty -> .)
    CONST           reduce using rule 210 (empty -> .)
    VOLATILE        reduce using rule 210 (empty -> .)
    ENUM            reduce using rule 210 (empty -> .)
    STRUCT          reduce using rule 210 (empty -> .)
    UNION           reduce using rule 210 (empty -> .)

    compound_statement             shift and go to state 114
    enter_function_scope           shift and go to state 116
    empty                          shift and go to state 47

state 61

    (12) declaration -> declaration_specifiers init_declarator_list . SEMI
    (49) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 117
    COMMA           shift and go to state 118


state 62

    (80) pointer -> TIMES pointer .

    LPAREN          reduce using rule 80 (pointer -> TIMES pointer .)
    ID              reduce using rule 80 (pointer -> TIMES pointer .)
    LBRACKET        reduce using rule 80 (pointer -> TIMES pointer .)
    COMMA           reduce using rule 80 (pointer -> TIMES pointer .)
    RPAREN          reduce using rule 80 (pointer -> TIMES pointer .)


state 63

    (77) pointer -> TIMES type_qualifier_list .
    (79) pointer -> TIMES type_qualifier_list . pointer
    (82) type_qualifier_list -> type_qualifier_list . type_qualifier
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE

    LPAREN          reduce using rule 77 (pointer -> TIMES type_qualifier_list .)
    ID              reduce using rule 77 (pointer -> TIMES type_qualifier_list .)
    LBRACKET        reduce using rule 77 (pointer -> TIMES type_qualifier_list .)
    COMMA           reduce using rule 77 (pointer -> TIMES type_qualifier_list .)
    RPAREN          reduce using rule 77 (pointer -> TIMES type_qualifier_list .)
    TIMES           shift and go to state 36
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6

    pointer                        shift and go to state 119
    type_qualifier                 shift and go to state 120

state 64

    (81) type_qualifier_list -> type_qualifier .

    TIMES           reduce using rule 81 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 81 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 81 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 81 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 81 (type_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 81 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 81 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 81 (type_qualifier_list -> type_qualifier .)


state 65

    (63) enum_specifier -> ENUM LBRACE . enumerator_list RBRACE
    (65) enumerator_list -> . enumerator
    (66) enumerator_list -> . enumerator_list COMMA enumerator
    (67) enumerator -> . identifier
    (68) enumerator -> . identifier EQUALS constant_expression
    (209) identifier -> . ID

    ID              shift and go to state 31

    enumerator                     shift and go to state 121
    enumerator_list                shift and go to state 122
    identifier                     shift and go to state 123

state 66

    (62) enum_specifier -> ENUM identifier . LBRACE enumerator_list RBRACE
    (64) enum_specifier -> ENUM identifier .

    LBRACE          shift and go to state 124
    AUTO            reduce using rule 64 (enum_specifier -> ENUM identifier .)
    REGISTER        reduce using rule 64 (enum_specifier -> ENUM identifier .)
    STATIC          reduce using rule 64 (enum_specifier -> ENUM identifier .)
    EXTERN          reduce using rule 64 (enum_specifier -> ENUM identifier .)
    TYPEDEF         reduce using rule 64 (enum_specifier -> ENUM identifier .)
    VOID            reduce using rule 64 (enum_specifier -> ENUM identifier .)
    CHAR            reduce using rule 64 (enum_specifier -> ENUM identifier .)
    SHORT           reduce using rule 64 (enum_specifier -> ENUM identifier .)
    INT             reduce using rule 64 (enum_specifier -> ENUM identifier .)
    LONG            reduce using rule 64 (enum_specifier -> ENUM identifier .)
    FLOAT           reduce using rule 64 (enum_specifier -> ENUM identifier .)
    DOUBLE          reduce using rule 64 (enum_specifier -> ENUM identifier .)
    SIGNED          reduce using rule 64 (enum_specifier -> ENUM identifier .)
    UNSIGNED        reduce using rule 64 (enum_specifier -> ENUM identifier .)
    TYPEID          reduce using rule 64 (enum_specifier -> ENUM identifier .)
    CONST           reduce using rule 64 (enum_specifier -> ENUM identifier .)
    VOLATILE        reduce using rule 64 (enum_specifier -> ENUM identifier .)
    ENUM            reduce using rule 64 (enum_specifier -> ENUM identifier .)
    STRUCT          reduce using rule 64 (enum_specifier -> ENUM identifier .)
    UNION           reduce using rule 64 (enum_specifier -> ENUM identifier .)
    TIMES           reduce using rule 64 (enum_specifier -> ENUM identifier .)
    LPAREN          reduce using rule 64 (enum_specifier -> ENUM identifier .)
    ID              reduce using rule 64 (enum_specifier -> ENUM identifier .)
    LBRACKET        reduce using rule 64 (enum_specifier -> ENUM identifier .)
    COMMA           reduce using rule 64 (enum_specifier -> ENUM identifier .)
    RPAREN          reduce using rule 64 (enum_specifier -> ENUM identifier .)
    SEMI            reduce using rule 64 (enum_specifier -> ENUM identifier .)
    COLON           reduce using rule 64 (enum_specifier -> ENUM identifier .)


state 67

    (184) unary_operator -> AND .

    LPAREN          reduce using rule 184 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 184 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 184 (unary_operator -> AND .)
    SIZEOF          reduce using rule 184 (unary_operator -> AND .)
    AND             reduce using rule 184 (unary_operator -> AND .)
    TIMES           reduce using rule 184 (unary_operator -> AND .)
    PLUS            reduce using rule 184 (unary_operator -> AND .)
    MINUS           reduce using rule 184 (unary_operator -> AND .)
    NOT             reduce using rule 184 (unary_operator -> AND .)
    LNOT            reduce using rule 184 (unary_operator -> AND .)
    ID              reduce using rule 184 (unary_operator -> AND .)
    ICONST          reduce using rule 184 (unary_operator -> AND .)
    FCONST          reduce using rule 184 (unary_operator -> AND .)
    CCONST          reduce using rule 184 (unary_operator -> AND .)
    SCONST          reduce using rule 184 (unary_operator -> AND .)


state 68

    (179) unary_expression -> PLUSPLUS . unary_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 126
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    unary_expression               shift and go to state 125
    string_literal                 shift and go to state 76
    primary_expression             shift and go to state 74
    identifier                     shift and go to state 93

state 69

    (178) unary_expression -> postfix_expression .
    (191) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (192) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> postfix_expression . LPAREN RPAREN
    (194) postfix_expression -> postfix_expression . PERIOD identifier
    (195) postfix_expression -> postfix_expression . ARROW identifier
    (196) postfix_expression -> postfix_expression . PLUSPLUS
    (197) postfix_expression -> postfix_expression . MINUSMINUS

    EQUALS          reduce using rule 178 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 178 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 178 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 178 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 178 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 178 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 178 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 178 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 178 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 178 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 178 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 178 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 178 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 178 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 178 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 178 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 178 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 178 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 178 (unary_expression -> postfix_expression .)
    LT              reduce using rule 178 (unary_expression -> postfix_expression .)
    LE              reduce using rule 178 (unary_expression -> postfix_expression .)
    GE              reduce using rule 178 (unary_expression -> postfix_expression .)
    GT              reduce using rule 178 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 178 (unary_expression -> postfix_expression .)
    NE              reduce using rule 178 (unary_expression -> postfix_expression .)
    AND             reduce using rule 178 (unary_expression -> postfix_expression .)
    OR              reduce using rule 178 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 178 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 178 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 178 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 178 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 178 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 178 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 178 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 178 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 178 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 128
    LPAREN          shift and go to state 129
    PERIOD          shift and go to state 132
    ARROW           shift and go to state 130
    PLUSPLUS        shift and go to state 131
    MINUSMINUS      shift and go to state 127


state 70

    (154) constant_expression -> conditional_expression .

    RBRACKET        reduce using rule 154 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 154 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 154 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 154 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 154 (constant_expression -> conditional_expression .)


state 71

    (207) constant -> FCONST .

    LBRACKET        reduce using rule 207 (constant -> FCONST .)
    LPAREN          reduce using rule 207 (constant -> FCONST .)
    PERIOD          reduce using rule 207 (constant -> FCONST .)
    ARROW           reduce using rule 207 (constant -> FCONST .)
    PLUSPLUS        reduce using rule 207 (constant -> FCONST .)
    MINUSMINUS      reduce using rule 207 (constant -> FCONST .)
    CONDOP          reduce using rule 207 (constant -> FCONST .)
    TIMES           reduce using rule 207 (constant -> FCONST .)
    DIVIDE          reduce using rule 207 (constant -> FCONST .)
    MOD             reduce using rule 207 (constant -> FCONST .)
    PLUS            reduce using rule 207 (constant -> FCONST .)
    MINUS           reduce using rule 207 (constant -> FCONST .)
    RSHIFT          reduce using rule 207 (constant -> FCONST .)
    LSHIFT          reduce using rule 207 (constant -> FCONST .)
    LT              reduce using rule 207 (constant -> FCONST .)
    LE              reduce using rule 207 (constant -> FCONST .)
    GE              reduce using rule 207 (constant -> FCONST .)
    GT              reduce using rule 207 (constant -> FCONST .)
    EQ              reduce using rule 207 (constant -> FCONST .)
    NE              reduce using rule 207 (constant -> FCONST .)
    AND             reduce using rule 207 (constant -> FCONST .)
    OR              reduce using rule 207 (constant -> FCONST .)
    XOR             reduce using rule 207 (constant -> FCONST .)
    LAND            reduce using rule 207 (constant -> FCONST .)
    LOR             reduce using rule 207 (constant -> FCONST .)
    RBRACE          reduce using rule 207 (constant -> FCONST .)
    COMMA           reduce using rule 207 (constant -> FCONST .)
    RBRACKET        reduce using rule 207 (constant -> FCONST .)
    RPAREN          reduce using rule 207 (constant -> FCONST .)
    SEMI            reduce using rule 207 (constant -> FCONST .)
    COLON           reduce using rule 207 (constant -> FCONST .)
    EQUALS          reduce using rule 207 (constant -> FCONST .)
    XOREQUAL        reduce using rule 207 (constant -> FCONST .)
    TIMESEQUAL      reduce using rule 207 (constant -> FCONST .)
    DIVEQUAL        reduce using rule 207 (constant -> FCONST .)
    MODEQUAL        reduce using rule 207 (constant -> FCONST .)
    PLUSEQUAL       reduce using rule 207 (constant -> FCONST .)
    MINUSEQUAL      reduce using rule 207 (constant -> FCONST .)
    LSHIFTEQUAL     reduce using rule 207 (constant -> FCONST .)
    RSHIFTEQUAL     reduce using rule 207 (constant -> FCONST .)
    ANDEQUAL        reduce using rule 207 (constant -> FCONST .)
    OREQUAL         reduce using rule 207 (constant -> FCONST .)


state 72

    (189) unary_operator -> LNOT .

    LPAREN          reduce using rule 189 (unary_operator -> LNOT .)
    PLUSPLUS        reduce using rule 189 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 189 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 189 (unary_operator -> LNOT .)
    AND             reduce using rule 189 (unary_operator -> LNOT .)
    TIMES           reduce using rule 189 (unary_operator -> LNOT .)
    PLUS            reduce using rule 189 (unary_operator -> LNOT .)
    MINUS           reduce using rule 189 (unary_operator -> LNOT .)
    NOT             reduce using rule 189 (unary_operator -> LNOT .)
    LNOT            reduce using rule 189 (unary_operator -> LNOT .)
    ID              reduce using rule 189 (unary_operator -> LNOT .)
    ICONST          reduce using rule 189 (unary_operator -> LNOT .)
    FCONST          reduce using rule 189 (unary_operator -> LNOT .)
    CCONST          reduce using rule 189 (unary_operator -> LNOT .)
    SCONST          reduce using rule 189 (unary_operator -> LNOT .)


state 73

    (176) cast_expression -> unary_expression .

    TIMES           reduce using rule 176 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 176 (cast_expression -> unary_expression .)
    MOD             reduce using rule 176 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 176 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 176 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 176 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 176 (cast_expression -> unary_expression .)
    LT              reduce using rule 176 (cast_expression -> unary_expression .)
    LE              reduce using rule 176 (cast_expression -> unary_expression .)
    GE              reduce using rule 176 (cast_expression -> unary_expression .)
    GT              reduce using rule 176 (cast_expression -> unary_expression .)
    EQ              reduce using rule 176 (cast_expression -> unary_expression .)
    NE              reduce using rule 176 (cast_expression -> unary_expression .)
    AND             reduce using rule 176 (cast_expression -> unary_expression .)
    OR              reduce using rule 176 (cast_expression -> unary_expression .)
    XOR             reduce using rule 176 (cast_expression -> unary_expression .)
    LAND            reduce using rule 176 (cast_expression -> unary_expression .)
    LOR             reduce using rule 176 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 176 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 176 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 176 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 176 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 176 (cast_expression -> unary_expression .)
    COLON           reduce using rule 176 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 176 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 176 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 176 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 176 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 176 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 176 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 176 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 176 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 176 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 176 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 176 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 176 (cast_expression -> unary_expression .)


state 74

    (190) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 190 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 190 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 190 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 190 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 190 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 190 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 190 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 190 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 190 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 190 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 190 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 190 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 190 (postfix_expression -> primary_expression .)
    LT              reduce using rule 190 (postfix_expression -> primary_expression .)
    LE              reduce using rule 190 (postfix_expression -> primary_expression .)
    GE              reduce using rule 190 (postfix_expression -> primary_expression .)
    GT              reduce using rule 190 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 190 (postfix_expression -> primary_expression .)
    NE              reduce using rule 190 (postfix_expression -> primary_expression .)
    AND             reduce using rule 190 (postfix_expression -> primary_expression .)
    OR              reduce using rule 190 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 190 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 190 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 190 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 190 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 190 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 190 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 190 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 190 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 190 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 190 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 190 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 190 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 190 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 190 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 190 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 190 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 190 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 190 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 190 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 190 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 190 (postfix_expression -> primary_expression .)


state 75

    (188) unary_operator -> NOT .

    LPAREN          reduce using rule 188 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 188 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 188 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 188 (unary_operator -> NOT .)
    AND             reduce using rule 188 (unary_operator -> NOT .)
    TIMES           reduce using rule 188 (unary_operator -> NOT .)
    PLUS            reduce using rule 188 (unary_operator -> NOT .)
    MINUS           reduce using rule 188 (unary_operator -> NOT .)
    NOT             reduce using rule 188 (unary_operator -> NOT .)
    LNOT            reduce using rule 188 (unary_operator -> NOT .)
    ID              reduce using rule 188 (unary_operator -> NOT .)
    ICONST          reduce using rule 188 (unary_operator -> NOT .)
    FCONST          reduce using rule 188 (unary_operator -> NOT .)
    CCONST          reduce using rule 188 (unary_operator -> NOT .)
    SCONST          reduce using rule 188 (unary_operator -> NOT .)


state 76

    (200) primary_expression -> string_literal .
    (202) string_literal -> string_literal . SCONST

    LBRACKET        reduce using rule 200 (primary_expression -> string_literal .)
    LPAREN          reduce using rule 200 (primary_expression -> string_literal .)
    PERIOD          reduce using rule 200 (primary_expression -> string_literal .)
    ARROW           reduce using rule 200 (primary_expression -> string_literal .)
    PLUSPLUS        reduce using rule 200 (primary_expression -> string_literal .)
    MINUSMINUS      reduce using rule 200 (primary_expression -> string_literal .)
    CONDOP          reduce using rule 200 (primary_expression -> string_literal .)
    TIMES           reduce using rule 200 (primary_expression -> string_literal .)
    DIVIDE          reduce using rule 200 (primary_expression -> string_literal .)
    MOD             reduce using rule 200 (primary_expression -> string_literal .)
    PLUS            reduce using rule 200 (primary_expression -> string_literal .)
    MINUS           reduce using rule 200 (primary_expression -> string_literal .)
    RSHIFT          reduce using rule 200 (primary_expression -> string_literal .)
    LSHIFT          reduce using rule 200 (primary_expression -> string_literal .)
    LT              reduce using rule 200 (primary_expression -> string_literal .)
    LE              reduce using rule 200 (primary_expression -> string_literal .)
    GE              reduce using rule 200 (primary_expression -> string_literal .)
    GT              reduce using rule 200 (primary_expression -> string_literal .)
    EQ              reduce using rule 200 (primary_expression -> string_literal .)
    NE              reduce using rule 200 (primary_expression -> string_literal .)
    AND             reduce using rule 200 (primary_expression -> string_literal .)
    OR              reduce using rule 200 (primary_expression -> string_literal .)
    XOR             reduce using rule 200 (primary_expression -> string_literal .)
    LAND            reduce using rule 200 (primary_expression -> string_literal .)
    LOR             reduce using rule 200 (primary_expression -> string_literal .)
    SEMI            reduce using rule 200 (primary_expression -> string_literal .)
    COMMA           reduce using rule 200 (primary_expression -> string_literal .)
    EQUALS          reduce using rule 200 (primary_expression -> string_literal .)
    XOREQUAL        reduce using rule 200 (primary_expression -> string_literal .)
    TIMESEQUAL      reduce using rule 200 (primary_expression -> string_literal .)
    DIVEQUAL        reduce using rule 200 (primary_expression -> string_literal .)
    MODEQUAL        reduce using rule 200 (primary_expression -> string_literal .)
    PLUSEQUAL       reduce using rule 200 (primary_expression -> string_literal .)
    MINUSEQUAL      reduce using rule 200 (primary_expression -> string_literal .)
    LSHIFTEQUAL     reduce using rule 200 (primary_expression -> string_literal .)
    RSHIFTEQUAL     reduce using rule 200 (primary_expression -> string_literal .)
    ANDEQUAL        reduce using rule 200 (primary_expression -> string_literal .)
    OREQUAL         reduce using rule 200 (primary_expression -> string_literal .)
    RPAREN          reduce using rule 200 (primary_expression -> string_literal .)
    RBRACE          reduce using rule 200 (primary_expression -> string_literal .)
    RBRACKET        reduce using rule 200 (primary_expression -> string_literal .)
    COLON           reduce using rule 200 (primary_expression -> string_literal .)
    SCONST          shift and go to state 133


state 77

    (177) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (203) primary_expression -> LPAREN . expression RPAREN
    (96) type_name -> . specifier_qualifier_list abstract_declarator_option
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (53) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_specifier
    (55) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (56) specifier_qualifier_list -> . type_qualifier
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    ENUM            shift and go to state 38
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    struct_or_union_specifier      shift and go to state 10
    specifier_qualifier_list       shift and go to state 136
    expression                     shift and go to state 137
    struct_or_union                shift and go to state 26
    postfix_expression             shift and go to state 69
    conditional_expression         shift and go to state 134
    type_name                      shift and go to state 138
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    binary_expression              shift and go to state 84
    primary_expression             shift and go to state 74
    enum_specifier                 shift and go to state 14
    unary_operator                 shift and go to state 91
    assignment_expression          shift and go to state 139
    type_qualifier                 shift and go to state 111
    identifier                     shift and go to state 93
    type_specifier                 shift and go to state 112

state 78

    (201) string_literal -> SCONST .

    SCONST          reduce using rule 201 (string_literal -> SCONST .)
    LBRACKET        reduce using rule 201 (string_literal -> SCONST .)
    LPAREN          reduce using rule 201 (string_literal -> SCONST .)
    PERIOD          reduce using rule 201 (string_literal -> SCONST .)
    ARROW           reduce using rule 201 (string_literal -> SCONST .)
    PLUSPLUS        reduce using rule 201 (string_literal -> SCONST .)
    MINUSMINUS      reduce using rule 201 (string_literal -> SCONST .)
    CONDOP          reduce using rule 201 (string_literal -> SCONST .)
    TIMES           reduce using rule 201 (string_literal -> SCONST .)
    DIVIDE          reduce using rule 201 (string_literal -> SCONST .)
    MOD             reduce using rule 201 (string_literal -> SCONST .)
    PLUS            reduce using rule 201 (string_literal -> SCONST .)
    MINUS           reduce using rule 201 (string_literal -> SCONST .)
    RSHIFT          reduce using rule 201 (string_literal -> SCONST .)
    LSHIFT          reduce using rule 201 (string_literal -> SCONST .)
    LT              reduce using rule 201 (string_literal -> SCONST .)
    LE              reduce using rule 201 (string_literal -> SCONST .)
    GE              reduce using rule 201 (string_literal -> SCONST .)
    GT              reduce using rule 201 (string_literal -> SCONST .)
    EQ              reduce using rule 201 (string_literal -> SCONST .)
    NE              reduce using rule 201 (string_literal -> SCONST .)
    AND             reduce using rule 201 (string_literal -> SCONST .)
    OR              reduce using rule 201 (string_literal -> SCONST .)
    XOR             reduce using rule 201 (string_literal -> SCONST .)
    LAND            reduce using rule 201 (string_literal -> SCONST .)
    LOR             reduce using rule 201 (string_literal -> SCONST .)
    RBRACKET        reduce using rule 201 (string_literal -> SCONST .)
    EQUALS          reduce using rule 201 (string_literal -> SCONST .)
    XOREQUAL        reduce using rule 201 (string_literal -> SCONST .)
    TIMESEQUAL      reduce using rule 201 (string_literal -> SCONST .)
    DIVEQUAL        reduce using rule 201 (string_literal -> SCONST .)
    MODEQUAL        reduce using rule 201 (string_literal -> SCONST .)
    PLUSEQUAL       reduce using rule 201 (string_literal -> SCONST .)
    MINUSEQUAL      reduce using rule 201 (string_literal -> SCONST .)
    LSHIFTEQUAL     reduce using rule 201 (string_literal -> SCONST .)
    RSHIFTEQUAL     reduce using rule 201 (string_literal -> SCONST .)
    ANDEQUAL        reduce using rule 201 (string_literal -> SCONST .)
    OREQUAL         reduce using rule 201 (string_literal -> SCONST .)
    RPAREN          reduce using rule 201 (string_literal -> SCONST .)
    COMMA           reduce using rule 201 (string_literal -> SCONST .)
    SEMI            reduce using rule 201 (string_literal -> SCONST .)
    COLON           reduce using rule 201 (string_literal -> SCONST .)
    RBRACE          reduce using rule 201 (string_literal -> SCONST .)


state 79

    (73) direct_declarator -> direct_declarator LBRACKET constant_expression_option . RBRACKET

    RBRACKET        shift and go to state 140


state 80

    (199) primary_expression -> constant .

    LBRACKET        reduce using rule 199 (primary_expression -> constant .)
    LPAREN          reduce using rule 199 (primary_expression -> constant .)
    PERIOD          reduce using rule 199 (primary_expression -> constant .)
    ARROW           reduce using rule 199 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 199 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 199 (primary_expression -> constant .)
    CONDOP          reduce using rule 199 (primary_expression -> constant .)
    TIMES           reduce using rule 199 (primary_expression -> constant .)
    DIVIDE          reduce using rule 199 (primary_expression -> constant .)
    MOD             reduce using rule 199 (primary_expression -> constant .)
    PLUS            reduce using rule 199 (primary_expression -> constant .)
    MINUS           reduce using rule 199 (primary_expression -> constant .)
    RSHIFT          reduce using rule 199 (primary_expression -> constant .)
    LSHIFT          reduce using rule 199 (primary_expression -> constant .)
    LT              reduce using rule 199 (primary_expression -> constant .)
    LE              reduce using rule 199 (primary_expression -> constant .)
    GE              reduce using rule 199 (primary_expression -> constant .)
    GT              reduce using rule 199 (primary_expression -> constant .)
    EQ              reduce using rule 199 (primary_expression -> constant .)
    NE              reduce using rule 199 (primary_expression -> constant .)
    AND             reduce using rule 199 (primary_expression -> constant .)
    OR              reduce using rule 199 (primary_expression -> constant .)
    XOR             reduce using rule 199 (primary_expression -> constant .)
    LAND            reduce using rule 199 (primary_expression -> constant .)
    LOR             reduce using rule 199 (primary_expression -> constant .)
    SEMI            reduce using rule 199 (primary_expression -> constant .)
    COMMA           reduce using rule 199 (primary_expression -> constant .)
    EQUALS          reduce using rule 199 (primary_expression -> constant .)
    XOREQUAL        reduce using rule 199 (primary_expression -> constant .)
    TIMESEQUAL      reduce using rule 199 (primary_expression -> constant .)
    DIVEQUAL        reduce using rule 199 (primary_expression -> constant .)
    MODEQUAL        reduce using rule 199 (primary_expression -> constant .)
    PLUSEQUAL       reduce using rule 199 (primary_expression -> constant .)
    MINUSEQUAL      reduce using rule 199 (primary_expression -> constant .)
    LSHIFTEQUAL     reduce using rule 199 (primary_expression -> constant .)
    RSHIFTEQUAL     reduce using rule 199 (primary_expression -> constant .)
    ANDEQUAL        reduce using rule 199 (primary_expression -> constant .)
    OREQUAL         reduce using rule 199 (primary_expression -> constant .)
    RPAREN          reduce using rule 199 (primary_expression -> constant .)
    RBRACE          reduce using rule 199 (primary_expression -> constant .)
    RBRACKET        reduce using rule 199 (primary_expression -> constant .)
    COLON           reduce using rule 199 (primary_expression -> constant .)


state 81

    (175) binary_expression -> cast_expression .

    CONDOP          reduce using rule 175 (binary_expression -> cast_expression .)
    TIMES           reduce using rule 175 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 175 (binary_expression -> cast_expression .)
    MOD             reduce using rule 175 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 175 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 175 (binary_expression -> cast_expression .)
    RSHIFT          reduce using rule 175 (binary_expression -> cast_expression .)
    LSHIFT          reduce using rule 175 (binary_expression -> cast_expression .)
    LT              reduce using rule 175 (binary_expression -> cast_expression .)
    LE              reduce using rule 175 (binary_expression -> cast_expression .)
    GE              reduce using rule 175 (binary_expression -> cast_expression .)
    GT              reduce using rule 175 (binary_expression -> cast_expression .)
    EQ              reduce using rule 175 (binary_expression -> cast_expression .)
    NE              reduce using rule 175 (binary_expression -> cast_expression .)
    AND             reduce using rule 175 (binary_expression -> cast_expression .)
    OR              reduce using rule 175 (binary_expression -> cast_expression .)
    XOR             reduce using rule 175 (binary_expression -> cast_expression .)
    LAND            reduce using rule 175 (binary_expression -> cast_expression .)
    LOR             reduce using rule 175 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 175 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 175 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 175 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 175 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 175 (binary_expression -> cast_expression .)
    COLON           reduce using rule 175 (binary_expression -> cast_expression .)


state 82

    (206) constant -> ICONST .

    LBRACKET        reduce using rule 206 (constant -> ICONST .)
    LPAREN          reduce using rule 206 (constant -> ICONST .)
    PERIOD          reduce using rule 206 (constant -> ICONST .)
    ARROW           reduce using rule 206 (constant -> ICONST .)
    PLUSPLUS        reduce using rule 206 (constant -> ICONST .)
    MINUSMINUS      reduce using rule 206 (constant -> ICONST .)
    CONDOP          reduce using rule 206 (constant -> ICONST .)
    TIMES           reduce using rule 206 (constant -> ICONST .)
    DIVIDE          reduce using rule 206 (constant -> ICONST .)
    MOD             reduce using rule 206 (constant -> ICONST .)
    PLUS            reduce using rule 206 (constant -> ICONST .)
    MINUS           reduce using rule 206 (constant -> ICONST .)
    RSHIFT          reduce using rule 206 (constant -> ICONST .)
    LSHIFT          reduce using rule 206 (constant -> ICONST .)
    LT              reduce using rule 206 (constant -> ICONST .)
    LE              reduce using rule 206 (constant -> ICONST .)
    GE              reduce using rule 206 (constant -> ICONST .)
    GT              reduce using rule 206 (constant -> ICONST .)
    EQ              reduce using rule 206 (constant -> ICONST .)
    NE              reduce using rule 206 (constant -> ICONST .)
    AND             reduce using rule 206 (constant -> ICONST .)
    OR              reduce using rule 206 (constant -> ICONST .)
    XOR             reduce using rule 206 (constant -> ICONST .)
    LAND            reduce using rule 206 (constant -> ICONST .)
    LOR             reduce using rule 206 (constant -> ICONST .)
    RBRACE          reduce using rule 206 (constant -> ICONST .)
    COMMA           reduce using rule 206 (constant -> ICONST .)
    RBRACKET        reduce using rule 206 (constant -> ICONST .)
    RPAREN          reduce using rule 206 (constant -> ICONST .)
    SEMI            reduce using rule 206 (constant -> ICONST .)
    COLON           reduce using rule 206 (constant -> ICONST .)
    EQUALS          reduce using rule 206 (constant -> ICONST .)
    XOREQUAL        reduce using rule 206 (constant -> ICONST .)
    TIMESEQUAL      reduce using rule 206 (constant -> ICONST .)
    DIVEQUAL        reduce using rule 206 (constant -> ICONST .)
    MODEQUAL        reduce using rule 206 (constant -> ICONST .)
    PLUSEQUAL       reduce using rule 206 (constant -> ICONST .)
    MINUSEQUAL      reduce using rule 206 (constant -> ICONST .)
    LSHIFTEQUAL     reduce using rule 206 (constant -> ICONST .)
    RSHIFTEQUAL     reduce using rule 206 (constant -> ICONST .)
    ANDEQUAL        reduce using rule 206 (constant -> ICONST .)
    OREQUAL         reduce using rule 206 (constant -> ICONST .)


state 83

    (186) unary_operator -> PLUS .

    LPAREN          reduce using rule 186 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 186 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 186 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 186 (unary_operator -> PLUS .)
    AND             reduce using rule 186 (unary_operator -> PLUS .)
    TIMES           reduce using rule 186 (unary_operator -> PLUS .)
    PLUS            reduce using rule 186 (unary_operator -> PLUS .)
    MINUS           reduce using rule 186 (unary_operator -> PLUS .)
    NOT             reduce using rule 186 (unary_operator -> PLUS .)
    LNOT            reduce using rule 186 (unary_operator -> PLUS .)
    ID              reduce using rule 186 (unary_operator -> PLUS .)
    ICONST          reduce using rule 186 (unary_operator -> PLUS .)
    FCONST          reduce using rule 186 (unary_operator -> PLUS .)
    CCONST          reduce using rule 186 (unary_operator -> PLUS .)
    SCONST          reduce using rule 186 (unary_operator -> PLUS .)


state 84

    (155) conditional_expression -> binary_expression .
    (156) conditional_expression -> binary_expression . CONDOP expression COLON conditional_expression
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    RPAREN          reduce using rule 155 (conditional_expression -> binary_expression .)
    COMMA           reduce using rule 155 (conditional_expression -> binary_expression .)
    SEMI            reduce using rule 155 (conditional_expression -> binary_expression .)
    RBRACE          reduce using rule 155 (conditional_expression -> binary_expression .)
    COLON           reduce using rule 155 (conditional_expression -> binary_expression .)
    RBRACKET        reduce using rule 155 (conditional_expression -> binary_expression .)
    CONDOP          shift and go to state 157
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155
    LT              shift and go to state 149
    LE              shift and go to state 142
    GE              shift and go to state 154
    GT              shift and go to state 150
    EQ              shift and go to state 151
    NE              shift and go to state 146
    AND             shift and go to state 144
    OR              shift and go to state 156
    XOR             shift and go to state 145
    LAND            shift and go to state 158
    LOR             shift and go to state 147


state 85

    (108) constant_expression_option -> constant_expression .

    RBRACKET        reduce using rule 108 (constant_expression_option -> constant_expression .)


state 86

    (107) constant_expression_option -> empty .

    RBRACKET        reduce using rule 107 (constant_expression_option -> empty .)


state 87

    (182) unary_expression -> SIZEOF . unary_expression
    (183) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 161
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    postfix_expression             shift and go to state 69
    unary_expression               shift and go to state 160
    string_literal                 shift and go to state 76
    primary_expression             shift and go to state 74
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93

state 88

    (180) unary_expression -> MINUSMINUS . unary_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 126
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    unary_expression               shift and go to state 162
    string_literal                 shift and go to state 76
    primary_expression             shift and go to state 74
    identifier                     shift and go to state 93

state 89

    (208) constant -> CCONST .

    LBRACKET        reduce using rule 208 (constant -> CCONST .)
    LPAREN          reduce using rule 208 (constant -> CCONST .)
    PERIOD          reduce using rule 208 (constant -> CCONST .)
    ARROW           reduce using rule 208 (constant -> CCONST .)
    PLUSPLUS        reduce using rule 208 (constant -> CCONST .)
    MINUSMINUS      reduce using rule 208 (constant -> CCONST .)
    CONDOP          reduce using rule 208 (constant -> CCONST .)
    TIMES           reduce using rule 208 (constant -> CCONST .)
    DIVIDE          reduce using rule 208 (constant -> CCONST .)
    MOD             reduce using rule 208 (constant -> CCONST .)
    PLUS            reduce using rule 208 (constant -> CCONST .)
    MINUS           reduce using rule 208 (constant -> CCONST .)
    RSHIFT          reduce using rule 208 (constant -> CCONST .)
    LSHIFT          reduce using rule 208 (constant -> CCONST .)
    LT              reduce using rule 208 (constant -> CCONST .)
    LE              reduce using rule 208 (constant -> CCONST .)
    GE              reduce using rule 208 (constant -> CCONST .)
    GT              reduce using rule 208 (constant -> CCONST .)
    EQ              reduce using rule 208 (constant -> CCONST .)
    NE              reduce using rule 208 (constant -> CCONST .)
    AND             reduce using rule 208 (constant -> CCONST .)
    OR              reduce using rule 208 (constant -> CCONST .)
    XOR             reduce using rule 208 (constant -> CCONST .)
    LAND            reduce using rule 208 (constant -> CCONST .)
    LOR             reduce using rule 208 (constant -> CCONST .)
    RBRACE          reduce using rule 208 (constant -> CCONST .)
    COMMA           reduce using rule 208 (constant -> CCONST .)
    RBRACKET        reduce using rule 208 (constant -> CCONST .)
    RPAREN          reduce using rule 208 (constant -> CCONST .)
    SEMI            reduce using rule 208 (constant -> CCONST .)
    COLON           reduce using rule 208 (constant -> CCONST .)
    EQUALS          reduce using rule 208 (constant -> CCONST .)
    XOREQUAL        reduce using rule 208 (constant -> CCONST .)
    TIMESEQUAL      reduce using rule 208 (constant -> CCONST .)
    DIVEQUAL        reduce using rule 208 (constant -> CCONST .)
    MODEQUAL        reduce using rule 208 (constant -> CCONST .)
    PLUSEQUAL       reduce using rule 208 (constant -> CCONST .)
    MINUSEQUAL      reduce using rule 208 (constant -> CCONST .)
    LSHIFTEQUAL     reduce using rule 208 (constant -> CCONST .)
    RSHIFTEQUAL     reduce using rule 208 (constant -> CCONST .)
    ANDEQUAL        reduce using rule 208 (constant -> CCONST .)
    OREQUAL         reduce using rule 208 (constant -> CCONST .)


state 90

    (185) unary_operator -> TIMES .

    LPAREN          reduce using rule 185 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 185 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 185 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 185 (unary_operator -> TIMES .)
    AND             reduce using rule 185 (unary_operator -> TIMES .)
    TIMES           reduce using rule 185 (unary_operator -> TIMES .)
    PLUS            reduce using rule 185 (unary_operator -> TIMES .)
    MINUS           reduce using rule 185 (unary_operator -> TIMES .)
    NOT             reduce using rule 185 (unary_operator -> TIMES .)
    LNOT            reduce using rule 185 (unary_operator -> TIMES .)
    ID              reduce using rule 185 (unary_operator -> TIMES .)
    ICONST          reduce using rule 185 (unary_operator -> TIMES .)
    FCONST          reduce using rule 185 (unary_operator -> TIMES .)
    CCONST          reduce using rule 185 (unary_operator -> TIMES .)
    SCONST          reduce using rule 185 (unary_operator -> TIMES .)


state 91

    (181) unary_expression -> unary_operator . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 163
    unary_operator                 shift and go to state 91
    unary_expression               shift and go to state 73
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    identifier                     shift and go to state 93

state 92

    (187) unary_operator -> MINUS .

    LPAREN          reduce using rule 187 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 187 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 187 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 187 (unary_operator -> MINUS .)
    AND             reduce using rule 187 (unary_operator -> MINUS .)
    TIMES           reduce using rule 187 (unary_operator -> MINUS .)
    PLUS            reduce using rule 187 (unary_operator -> MINUS .)
    MINUS           reduce using rule 187 (unary_operator -> MINUS .)
    NOT             reduce using rule 187 (unary_operator -> MINUS .)
    LNOT            reduce using rule 187 (unary_operator -> MINUS .)
    ID              reduce using rule 187 (unary_operator -> MINUS .)
    ICONST          reduce using rule 187 (unary_operator -> MINUS .)
    FCONST          reduce using rule 187 (unary_operator -> MINUS .)
    CCONST          reduce using rule 187 (unary_operator -> MINUS .)
    SCONST          reduce using rule 187 (unary_operator -> MINUS .)


state 93

    (198) primary_expression -> identifier .

    LBRACKET        reduce using rule 198 (primary_expression -> identifier .)
    LPAREN          reduce using rule 198 (primary_expression -> identifier .)
    PERIOD          reduce using rule 198 (primary_expression -> identifier .)
    ARROW           reduce using rule 198 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 198 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 198 (primary_expression -> identifier .)
    CONDOP          reduce using rule 198 (primary_expression -> identifier .)
    TIMES           reduce using rule 198 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 198 (primary_expression -> identifier .)
    MOD             reduce using rule 198 (primary_expression -> identifier .)
    PLUS            reduce using rule 198 (primary_expression -> identifier .)
    MINUS           reduce using rule 198 (primary_expression -> identifier .)
    RSHIFT          reduce using rule 198 (primary_expression -> identifier .)
    LSHIFT          reduce using rule 198 (primary_expression -> identifier .)
    LT              reduce using rule 198 (primary_expression -> identifier .)
    LE              reduce using rule 198 (primary_expression -> identifier .)
    GE              reduce using rule 198 (primary_expression -> identifier .)
    GT              reduce using rule 198 (primary_expression -> identifier .)
    EQ              reduce using rule 198 (primary_expression -> identifier .)
    NE              reduce using rule 198 (primary_expression -> identifier .)
    AND             reduce using rule 198 (primary_expression -> identifier .)
    OR              reduce using rule 198 (primary_expression -> identifier .)
    XOR             reduce using rule 198 (primary_expression -> identifier .)
    LAND            reduce using rule 198 (primary_expression -> identifier .)
    LOR             reduce using rule 198 (primary_expression -> identifier .)
    SEMI            reduce using rule 198 (primary_expression -> identifier .)
    COMMA           reduce using rule 198 (primary_expression -> identifier .)
    EQUALS          reduce using rule 198 (primary_expression -> identifier .)
    XOREQUAL        reduce using rule 198 (primary_expression -> identifier .)
    TIMESEQUAL      reduce using rule 198 (primary_expression -> identifier .)
    DIVEQUAL        reduce using rule 198 (primary_expression -> identifier .)
    MODEQUAL        reduce using rule 198 (primary_expression -> identifier .)
    PLUSEQUAL       reduce using rule 198 (primary_expression -> identifier .)
    MINUSEQUAL      reduce using rule 198 (primary_expression -> identifier .)
    LSHIFTEQUAL     reduce using rule 198 (primary_expression -> identifier .)
    RSHIFTEQUAL     reduce using rule 198 (primary_expression -> identifier .)
    ANDEQUAL        reduce using rule 198 (primary_expression -> identifier .)
    OREQUAL         reduce using rule 198 (primary_expression -> identifier .)
    RPAREN          reduce using rule 198 (primary_expression -> identifier .)
    RBRACE          reduce using rule 198 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 198 (primary_expression -> identifier .)
    COLON           reduce using rule 198 (primary_expression -> identifier .)


state 94

    (85) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 85 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 85 (parameter_list -> parameter_declaration .)


state 95

    (83) parameter_type_list -> parameter_list .
    (84) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (86) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 83 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 164


state 96

    (74) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 165


state 97

    (75) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (90) identifier_list -> identifier_list . COMMA identifier

    RPAREN          shift and go to state 167
    COMMA           shift and go to state 166


state 98

    (87) parameter_declaration -> declaration_specifiers . declarator
    (88) parameter_declaration -> declaration_specifiers . abstract_declarator_option
    (69) declarator -> . pointer direct_declarator
    (70) declarator -> . direct_declarator
    (97) abstract_declarator_option -> . empty
    (98) abstract_declarator_option -> . abstract_declarator
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (210) empty -> .
    (99) abstract_declarator -> . pointer
    (100) abstract_declarator -> . pointer direct_abstract_declarator
    (101) abstract_declarator -> . direct_abstract_declarator
    (209) identifier -> . ID
    (102) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (103) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (104) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (105) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (106) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN

    TIMES           shift and go to state 36
    LPAREN          shift and go to state 171
    COMMA           reduce using rule 210 (empty -> .)
    RPAREN          reduce using rule 210 (empty -> .)
    ID              shift and go to state 31
    LBRACKET        shift and go to state 169

    pointer                        shift and go to state 168
    abstract_declarator_option     shift and go to state 170
    direct_abstract_declarator     shift and go to state 172
    direct_declarator              shift and go to state 4
    abstract_declarator            shift and go to state 173
    declarator                     shift and go to state 174
    empty                          shift and go to state 175
    identifier                     shift and go to state 41

state 99

    (76) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    AUTO            reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    REGISTER        reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC          reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EXTERN          reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEDEF         reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SHORT           reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LONG            reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEID          reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CONST           reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOLATILE        reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ENUM            reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STRUCT          reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNION           reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMI            reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COLON           reduce using rule 76 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 100

    (89) identifier_list -> identifier .

    RPAREN          reduce using rule 89 (identifier_list -> identifier .)
    COMMA           reduce using rule 89 (identifier_list -> identifier .)


state 101

    (9) function_definition -> declarator enter_function_scope declaration_list . compound_statement
    (15) declaration_list -> declaration_list . declaration
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    LBRACE          shift and go to state 46
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    type_qualifier                 shift and go to state 15
    compound_statement             shift and go to state 177
    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 102
    declaration                    shift and go to state 176
    storage_class_specifier        shift and go to state 24
    struct_or_union                shift and go to state 26
    type_specifier                 shift and go to state 20

state 102

    (12) declaration -> declaration_specifiers . init_declarator_list SEMI
    (13) declaration -> declaration_specifiers . SEMI
    (48) init_declarator_list -> . init_declarator
    (49) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (50) init_declarator -> . declarator
    (51) init_declarator -> . declarator EQUALS initializer
    (69) declarator -> . pointer direct_declarator
    (70) declarator -> . direct_declarator
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (209) identifier -> . ID

    SEMI            shift and go to state 59
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 12
    ID              shift and go to state 31

    pointer                        shift and go to state 33
    init_declarator                shift and go to state 58
    direct_declarator              shift and go to state 4
    declarator                     shift and go to state 178
    init_declarator_list           shift and go to state 61
    identifier                     shift and go to state 41

state 103

    (14) declaration_list -> declaration .

    AUTO            reduce using rule 14 (declaration_list -> declaration .)
    REGISTER        reduce using rule 14 (declaration_list -> declaration .)
    STATIC          reduce using rule 14 (declaration_list -> declaration .)
    EXTERN          reduce using rule 14 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 14 (declaration_list -> declaration .)
    VOID            reduce using rule 14 (declaration_list -> declaration .)
    CHAR            reduce using rule 14 (declaration_list -> declaration .)
    SHORT           reduce using rule 14 (declaration_list -> declaration .)
    INT             reduce using rule 14 (declaration_list -> declaration .)
    LONG            reduce using rule 14 (declaration_list -> declaration .)
    FLOAT           reduce using rule 14 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 14 (declaration_list -> declaration .)
    SIGNED          reduce using rule 14 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 14 (declaration_list -> declaration .)
    TYPEID          reduce using rule 14 (declaration_list -> declaration .)
    CONST           reduce using rule 14 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 14 (declaration_list -> declaration .)
    ENUM            reduce using rule 14 (declaration_list -> declaration .)
    STRUCT          reduce using rule 14 (declaration_list -> declaration .)
    UNION           reduce using rule 14 (declaration_list -> declaration .)
    CASE            reduce using rule 14 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 14 (declaration_list -> declaration .)
    LBRACE          reduce using rule 14 (declaration_list -> declaration .)
    IF              reduce using rule 14 (declaration_list -> declaration .)
    SWITCH          reduce using rule 14 (declaration_list -> declaration .)
    WHILE           reduce using rule 14 (declaration_list -> declaration .)
    FOR             reduce using rule 14 (declaration_list -> declaration .)
    DO              reduce using rule 14 (declaration_list -> declaration .)
    GOTO            reduce using rule 14 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 14 (declaration_list -> declaration .)
    BREAK           reduce using rule 14 (declaration_list -> declaration .)
    RETURN          reduce using rule 14 (declaration_list -> declaration .)
    ID              reduce using rule 14 (declaration_list -> declaration .)
    PLUSPLUS        reduce using rule 14 (declaration_list -> declaration .)
    MINUSMINUS      reduce using rule 14 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 14 (declaration_list -> declaration .)
    AND             reduce using rule 14 (declaration_list -> declaration .)
    TIMES           reduce using rule 14 (declaration_list -> declaration .)
    PLUS            reduce using rule 14 (declaration_list -> declaration .)
    MINUS           reduce using rule 14 (declaration_list -> declaration .)
    NOT             reduce using rule 14 (declaration_list -> declaration .)
    LNOT            reduce using rule 14 (declaration_list -> declaration .)
    LPAREN          reduce using rule 14 (declaration_list -> declaration .)
    ICONST          reduce using rule 14 (declaration_list -> declaration .)
    FCONST          reduce using rule 14 (declaration_list -> declaration .)
    CCONST          reduce using rule 14 (declaration_list -> declaration .)
    SCONST          reduce using rule 14 (declaration_list -> declaration .)
    RBRACE          reduce using rule 14 (declaration_list -> declaration .)
    SEMI            reduce using rule 14 (declaration_list -> declaration .)


state 104

    (121) compound_statement -> LBRACE enter_scope . insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> LBRACE enter_scope . lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> LBRACE enter_scope . insert_mode declaration_list lookup_mode leave_scope RBRACE
    (213) insert_mode -> . empty
    (215) lookup_mode -> . empty
    (210) empty -> .

    AUTO            reduce using rule 210 (empty -> .)
    REGISTER        reduce using rule 210 (empty -> .)
    STATIC          reduce using rule 210 (empty -> .)
    EXTERN          reduce using rule 210 (empty -> .)
    TYPEDEF         reduce using rule 210 (empty -> .)
    VOID            reduce using rule 210 (empty -> .)
    CHAR            reduce using rule 210 (empty -> .)
    SHORT           reduce using rule 210 (empty -> .)
    INT             reduce using rule 210 (empty -> .)
    LONG            reduce using rule 210 (empty -> .)
    FLOAT           reduce using rule 210 (empty -> .)
    DOUBLE          reduce using rule 210 (empty -> .)
    SIGNED          reduce using rule 210 (empty -> .)
    UNSIGNED        reduce using rule 210 (empty -> .)
    TYPEID          reduce using rule 210 (empty -> .)
    CONST           reduce using rule 210 (empty -> .)
    VOLATILE        reduce using rule 210 (empty -> .)
    ENUM            reduce using rule 210 (empty -> .)
    STRUCT          reduce using rule 210 (empty -> .)
    UNION           reduce using rule 210 (empty -> .)
    CASE            reduce using rule 210 (empty -> .)
    DEFAULT         reduce using rule 210 (empty -> .)
    LBRACE          reduce using rule 210 (empty -> .)
    IF              reduce using rule 210 (empty -> .)
    SWITCH          reduce using rule 210 (empty -> .)
    WHILE           reduce using rule 210 (empty -> .)
    FOR             reduce using rule 210 (empty -> .)
    DO              reduce using rule 210 (empty -> .)
    GOTO            reduce using rule 210 (empty -> .)
    CONTINUE        reduce using rule 210 (empty -> .)
    BREAK           reduce using rule 210 (empty -> .)
    RETURN          reduce using rule 210 (empty -> .)
    ID              reduce using rule 210 (empty -> .)
    PLUSPLUS        reduce using rule 210 (empty -> .)
    MINUSMINUS      reduce using rule 210 (empty -> .)
    SIZEOF          reduce using rule 210 (empty -> .)
    AND             reduce using rule 210 (empty -> .)
    TIMES           reduce using rule 210 (empty -> .)
    PLUS            reduce using rule 210 (empty -> .)
    MINUS           reduce using rule 210 (empty -> .)
    NOT             reduce using rule 210 (empty -> .)
    LNOT            reduce using rule 210 (empty -> .)
    LPAREN          reduce using rule 210 (empty -> .)
    ICONST          reduce using rule 210 (empty -> .)
    FCONST          reduce using rule 210 (empty -> .)
    CCONST          reduce using rule 210 (empty -> .)
    SCONST          reduce using rule 210 (empty -> .)
    SEMI            reduce using rule 210 (empty -> .)

    lookup_mode                    shift and go to state 179
    insert_mode                    shift and go to state 180
    empty                          shift and go to state 181

state 105

    (124) compound_statement -> LBRACE RBRACE .

    CASE            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    GOTO            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    PLUSPLUS        reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    MINUSMINUS      reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    SIZEOF          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    AND             reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    NOT             reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    ICONST          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    FCONST          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    CCONST          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    SCONST          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    AUTO            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    REGISTER        reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    STATIC          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    EXTERN          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    TYPEDEF         reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    SHORT           reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    LONG            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    SIGNED          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    UNSIGNED        reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    TYPEID          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    CONST           reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    VOLATILE        reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    ENUM            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    STRUCT          reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    UNION           reduce using rule 124 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 124 (compound_statement -> LBRACE RBRACE .)


state 106

    (212) enter_scope -> empty .

    AUTO            reduce using rule 212 (enter_scope -> empty .)
    REGISTER        reduce using rule 212 (enter_scope -> empty .)
    STATIC          reduce using rule 212 (enter_scope -> empty .)
    EXTERN          reduce using rule 212 (enter_scope -> empty .)
    TYPEDEF         reduce using rule 212 (enter_scope -> empty .)
    VOID            reduce using rule 212 (enter_scope -> empty .)
    CHAR            reduce using rule 212 (enter_scope -> empty .)
    SHORT           reduce using rule 212 (enter_scope -> empty .)
    INT             reduce using rule 212 (enter_scope -> empty .)
    LONG            reduce using rule 212 (enter_scope -> empty .)
    FLOAT           reduce using rule 212 (enter_scope -> empty .)
    DOUBLE          reduce using rule 212 (enter_scope -> empty .)
    SIGNED          reduce using rule 212 (enter_scope -> empty .)
    UNSIGNED        reduce using rule 212 (enter_scope -> empty .)
    TYPEID          reduce using rule 212 (enter_scope -> empty .)
    CONST           reduce using rule 212 (enter_scope -> empty .)
    VOLATILE        reduce using rule 212 (enter_scope -> empty .)
    ENUM            reduce using rule 212 (enter_scope -> empty .)
    STRUCT          reduce using rule 212 (enter_scope -> empty .)
    UNION           reduce using rule 212 (enter_scope -> empty .)
    CASE            reduce using rule 212 (enter_scope -> empty .)
    DEFAULT         reduce using rule 212 (enter_scope -> empty .)
    LBRACE          reduce using rule 212 (enter_scope -> empty .)
    IF              reduce using rule 212 (enter_scope -> empty .)
    SWITCH          reduce using rule 212 (enter_scope -> empty .)
    WHILE           reduce using rule 212 (enter_scope -> empty .)
    FOR             reduce using rule 212 (enter_scope -> empty .)
    DO              reduce using rule 212 (enter_scope -> empty .)
    GOTO            reduce using rule 212 (enter_scope -> empty .)
    CONTINUE        reduce using rule 212 (enter_scope -> empty .)
    BREAK           reduce using rule 212 (enter_scope -> empty .)
    RETURN          reduce using rule 212 (enter_scope -> empty .)
    ID              reduce using rule 212 (enter_scope -> empty .)
    PLUSPLUS        reduce using rule 212 (enter_scope -> empty .)
    MINUSMINUS      reduce using rule 212 (enter_scope -> empty .)
    SIZEOF          reduce using rule 212 (enter_scope -> empty .)
    AND             reduce using rule 212 (enter_scope -> empty .)
    TIMES           reduce using rule 212 (enter_scope -> empty .)
    PLUS            reduce using rule 212 (enter_scope -> empty .)
    MINUS           reduce using rule 212 (enter_scope -> empty .)
    NOT             reduce using rule 212 (enter_scope -> empty .)
    LNOT            reduce using rule 212 (enter_scope -> empty .)
    LPAREN          reduce using rule 212 (enter_scope -> empty .)
    ICONST          reduce using rule 212 (enter_scope -> empty .)
    FCONST          reduce using rule 212 (enter_scope -> empty .)
    CCONST          reduce using rule 212 (enter_scope -> empty .)
    SCONST          reduce using rule 212 (enter_scope -> empty .)
    SEMI            reduce using rule 212 (enter_scope -> empty .)


state 107

    (72) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEID          reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 72 (direct_declarator -> LPAREN declarator RPAREN .)


state 108

    (42) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list . RBRACE
    (47) struct_declaration_list -> struct_declaration_list . struct_declaration
    (52) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (53) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_specifier
    (55) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (56) specifier_qualifier_list -> . type_qualifier
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    RBRACE          shift and go to state 183
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    struct_declaration             shift and go to state 182
    type_qualifier                 shift and go to state 111
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 112
    struct_or_union_specifier      shift and go to state 10
    struct_or_union                shift and go to state 26

state 109

    (52) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMI
    (57) struct_declarator_list -> . struct_declarator
    (58) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (59) struct_declarator -> . declarator
    (60) struct_declarator -> . declarator COLON constant_expression
    (61) struct_declarator -> . COLON constant_expression
    (69) declarator -> . pointer direct_declarator
    (70) declarator -> . direct_declarator
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (209) identifier -> . ID

    COLON           shift and go to state 187
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 12
    ID              shift and go to state 31

    pointer                        shift and go to state 33
    struct_declarator_list         shift and go to state 184
    struct_declarator              shift and go to state 185
    direct_declarator              shift and go to state 4
    declarator                     shift and go to state 186
    identifier                     shift and go to state 41

state 110

    (46) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    TYPEID          reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 46 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 46 (struct_declaration_list -> struct_declaration .)


state 111

    (55) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (56) specifier_qualifier_list -> type_qualifier .
    (53) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_specifier
    (55) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (56) specifier_qualifier_list -> . type_qualifier
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    TIMES           reduce using rule 56 (specifier_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 56 (specifier_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 56 (specifier_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 56 (specifier_qualifier_list -> type_qualifier .)
    COLON           reduce using rule 56 (specifier_qualifier_list -> type_qualifier .)
    ID              reduce using rule 56 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    type_qualifier                 shift and go to state 111
    struct_or_union_specifier      shift and go to state 10
    specifier_qualifier_list       shift and go to state 188
    struct_or_union                shift and go to state 26
    type_specifier                 shift and go to state 112

state 112

    (53) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (54) specifier_qualifier_list -> type_specifier .
    (53) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_specifier
    (55) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (56) specifier_qualifier_list -> . type_qualifier
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    TIMES           reduce using rule 54 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 54 (specifier_qualifier_list -> type_specifier .)
    LBRACKET        reduce using rule 54 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 54 (specifier_qualifier_list -> type_specifier .)
    COLON           reduce using rule 54 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 54 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    type_qualifier                 shift and go to state 111
    struct_or_union_specifier      shift and go to state 10
    specifier_qualifier_list       shift and go to state 189
    struct_or_union                shift and go to state 26
    type_specifier                 shift and go to state 112

state 113

    (41) struct_or_union_specifier -> struct_or_union identifier LBRACE . struct_declaration_list RBRACE
    (46) struct_declaration_list -> . struct_declaration
    (47) struct_declaration_list -> . struct_declaration_list struct_declaration
    (52) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (53) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_specifier
    (55) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (56) specifier_qualifier_list -> . type_qualifier
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    struct_or_union_specifier      shift and go to state 10
    struct_declaration             shift and go to state 110
    type_qualifier                 shift and go to state 111
    struct_declaration_list        shift and go to state 190
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 112
    struct_or_union                shift and go to state 26

state 114

    (11) function_definition -> declaration_specifiers declarator compound_statement .

    AUTO            reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEDEF         reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEID          reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    TIMES           reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    LPAREN          reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    ID              reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 11 (function_definition -> declaration_specifiers declarator compound_statement .)


state 115

    (51) init_declarator -> declarator EQUALS . initializer
    (91) initializer -> . assignment_expression
    (92) initializer -> . LBRACE initializer_list RBRACE
    (93) initializer -> . LBRACE initializer_list COMMA RBRACE
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LBRACE          shift and go to state 191
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    initializer                    shift and go to state 192
    assignment_expression          shift and go to state 193

state 116

    (8) function_definition -> declaration_specifiers declarator enter_function_scope . declaration_list compound_statement
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration_list declaration
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 102
    declaration                    shift and go to state 103
    storage_class_specifier        shift and go to state 24
    struct_or_union                shift and go to state 26
    enum_specifier                 shift and go to state 14
    declaration_list               shift and go to state 194
    type_qualifier                 shift and go to state 15
    type_specifier                 shift and go to state 20

state 117

    (12) declaration -> declaration_specifiers init_declarator_list SEMI .

    AUTO            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    REGISTER        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STATIC          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    EXTERN          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEDEF         reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOID            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHAR            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SHORT           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LONG            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FLOAT           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DOUBLE          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIGNED          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNSIGNED        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEID          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONST           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOLATILE        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TIMES           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LPAREN          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ENUM            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ID              reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRUCT          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNION           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LBRACE          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CASE            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEFAULT         reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SWITCH          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    WHILE           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DO              reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    GOTO            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONTINUE        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUSPLUS        reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUSMINUS      reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIZEOF          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AND             reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUS            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUS           reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    NOT             reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LNOT            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ICONST          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FCONST          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CCONST          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SCONST          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RBRACE          reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 12 (declaration -> declaration_specifiers init_declarator_list SEMI .)


state 118

    (49) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (50) init_declarator -> . declarator
    (51) init_declarator -> . declarator EQUALS initializer
    (69) declarator -> . pointer direct_declarator
    (70) declarator -> . direct_declarator
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (209) identifier -> . ID

    TIMES           shift and go to state 36
    LPAREN          shift and go to state 12
    ID              shift and go to state 31

    pointer                        shift and go to state 33
    init_declarator                shift and go to state 195
    declarator                     shift and go to state 178
    identifier                     shift and go to state 41
    direct_declarator              shift and go to state 4

state 119

    (79) pointer -> TIMES type_qualifier_list pointer .

    LPAREN          reduce using rule 79 (pointer -> TIMES type_qualifier_list pointer .)
    ID              reduce using rule 79 (pointer -> TIMES type_qualifier_list pointer .)
    LBRACKET        reduce using rule 79 (pointer -> TIMES type_qualifier_list pointer .)
    COMMA           reduce using rule 79 (pointer -> TIMES type_qualifier_list pointer .)
    RPAREN          reduce using rule 79 (pointer -> TIMES type_qualifier_list pointer .)


state 120

    (82) type_qualifier_list -> type_qualifier_list type_qualifier .

    TIMES           reduce using rule 82 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 82 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 82 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 82 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 82 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 82 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 82 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 82 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 121

    (65) enumerator_list -> enumerator .

    RBRACE          reduce using rule 65 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 65 (enumerator_list -> enumerator .)


state 122

    (63) enum_specifier -> ENUM LBRACE enumerator_list . RBRACE
    (66) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 197
    COMMA           shift and go to state 196


state 123

    (67) enumerator -> identifier .
    (68) enumerator -> identifier . EQUALS constant_expression

    RBRACE          reduce using rule 67 (enumerator -> identifier .)
    COMMA           reduce using rule 67 (enumerator -> identifier .)
    EQUALS          shift and go to state 198


state 124

    (62) enum_specifier -> ENUM identifier LBRACE . enumerator_list RBRACE
    (65) enumerator_list -> . enumerator
    (66) enumerator_list -> . enumerator_list COMMA enumerator
    (67) enumerator -> . identifier
    (68) enumerator -> . identifier EQUALS constant_expression
    (209) identifier -> . ID

    ID              shift and go to state 31

    enumerator                     shift and go to state 121
    enumerator_list                shift and go to state 199
    identifier                     shift and go to state 123

state 125

    (179) unary_expression -> PLUSPLUS unary_expression .

    EQUALS          reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    XOREQUAL        reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUAL      reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQUAL        reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUAL        reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUAL       reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUAL      reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    ANDEQUAL        reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    OREQUAL         reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    CONDOP          reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 179 (unary_expression -> PLUSPLUS unary_expression .)


state 126

    (203) primary_expression -> LPAREN . expression RPAREN
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    expression                     shift and go to state 137
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    assignment_expression          shift and go to state 139

state 127

    (197) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    PERIOD          reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    ARROW           reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    COLON           reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 197 (postfix_expression -> postfix_expression MINUSMINUS .)


state 128

    (191) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    binary_expression              shift and go to state 84
    primary_expression             shift and go to state 74
    expression                     shift and go to state 200
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    assignment_expression          shift and go to state 139

state 129

    (192) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (193) postfix_expression -> postfix_expression LPAREN . RPAREN
    (204) argument_expression_list -> . assignment_expression
    (205) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    RPAREN          shift and go to state 202
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    binary_expression              shift and go to state 84
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    argument_expression_list       shift and go to state 201
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    assignment_expression          shift and go to state 203

state 130

    (195) postfix_expression -> postfix_expression ARROW . identifier
    (209) identifier -> . ID

    ID              shift and go to state 31

    identifier                     shift and go to state 204

state 131

    (196) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    PERIOD          reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    ARROW           reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    COLON           reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 196 (postfix_expression -> postfix_expression PLUSPLUS .)


state 132

    (194) postfix_expression -> postfix_expression PERIOD . identifier
    (209) identifier -> . ID

    ID              shift and go to state 31

    identifier                     shift and go to state 205

state 133

    (202) string_literal -> string_literal SCONST .

    SCONST          reduce using rule 202 (string_literal -> string_literal SCONST .)
    LBRACKET        reduce using rule 202 (string_literal -> string_literal SCONST .)
    LPAREN          reduce using rule 202 (string_literal -> string_literal SCONST .)
    PERIOD          reduce using rule 202 (string_literal -> string_literal SCONST .)
    ARROW           reduce using rule 202 (string_literal -> string_literal SCONST .)
    PLUSPLUS        reduce using rule 202 (string_literal -> string_literal SCONST .)
    MINUSMINUS      reduce using rule 202 (string_literal -> string_literal SCONST .)
    CONDOP          reduce using rule 202 (string_literal -> string_literal SCONST .)
    TIMES           reduce using rule 202 (string_literal -> string_literal SCONST .)
    DIVIDE          reduce using rule 202 (string_literal -> string_literal SCONST .)
    MOD             reduce using rule 202 (string_literal -> string_literal SCONST .)
    PLUS            reduce using rule 202 (string_literal -> string_literal SCONST .)
    MINUS           reduce using rule 202 (string_literal -> string_literal SCONST .)
    RSHIFT          reduce using rule 202 (string_literal -> string_literal SCONST .)
    LSHIFT          reduce using rule 202 (string_literal -> string_literal SCONST .)
    LT              reduce using rule 202 (string_literal -> string_literal SCONST .)
    LE              reduce using rule 202 (string_literal -> string_literal SCONST .)
    GE              reduce using rule 202 (string_literal -> string_literal SCONST .)
    GT              reduce using rule 202 (string_literal -> string_literal SCONST .)
    EQ              reduce using rule 202 (string_literal -> string_literal SCONST .)
    NE              reduce using rule 202 (string_literal -> string_literal SCONST .)
    AND             reduce using rule 202 (string_literal -> string_literal SCONST .)
    OR              reduce using rule 202 (string_literal -> string_literal SCONST .)
    XOR             reduce using rule 202 (string_literal -> string_literal SCONST .)
    LAND            reduce using rule 202 (string_literal -> string_literal SCONST .)
    LOR             reduce using rule 202 (string_literal -> string_literal SCONST .)
    RBRACKET        reduce using rule 202 (string_literal -> string_literal SCONST .)
    EQUALS          reduce using rule 202 (string_literal -> string_literal SCONST .)
    XOREQUAL        reduce using rule 202 (string_literal -> string_literal SCONST .)
    TIMESEQUAL      reduce using rule 202 (string_literal -> string_literal SCONST .)
    DIVEQUAL        reduce using rule 202 (string_literal -> string_literal SCONST .)
    MODEQUAL        reduce using rule 202 (string_literal -> string_literal SCONST .)
    PLUSEQUAL       reduce using rule 202 (string_literal -> string_literal SCONST .)
    MINUSEQUAL      reduce using rule 202 (string_literal -> string_literal SCONST .)
    LSHIFTEQUAL     reduce using rule 202 (string_literal -> string_literal SCONST .)
    RSHIFTEQUAL     reduce using rule 202 (string_literal -> string_literal SCONST .)
    ANDEQUAL        reduce using rule 202 (string_literal -> string_literal SCONST .)
    OREQUAL         reduce using rule 202 (string_literal -> string_literal SCONST .)
    RPAREN          reduce using rule 202 (string_literal -> string_literal SCONST .)
    COMMA           reduce using rule 202 (string_literal -> string_literal SCONST .)
    SEMI            reduce using rule 202 (string_literal -> string_literal SCONST .)
    COLON           reduce using rule 202 (string_literal -> string_literal SCONST .)
    RBRACE          reduce using rule 202 (string_literal -> string_literal SCONST .)


state 134

    (141) assignment_expression -> conditional_expression .

    COMMA           reduce using rule 141 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 141 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 141 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 141 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 141 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 141 (assignment_expression -> conditional_expression .)


state 135

    (142) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (176) cast_expression -> unary_expression .
    (143) assignment_operator -> . EQUALS
    (144) assignment_operator -> . XOREQUAL
    (145) assignment_operator -> . TIMESEQUAL
    (146) assignment_operator -> . DIVEQUAL
    (147) assignment_operator -> . MODEQUAL
    (148) assignment_operator -> . PLUSEQUAL
    (149) assignment_operator -> . MINUSEQUAL
    (150) assignment_operator -> . LSHIFTEQUAL
    (151) assignment_operator -> . RSHIFTEQUAL
    (152) assignment_operator -> . ANDEQUAL
    (153) assignment_operator -> . OREQUAL

    CONDOP          reduce using rule 176 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 176 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 176 (cast_expression -> unary_expression .)
    MOD             reduce using rule 176 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 176 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 176 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 176 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 176 (cast_expression -> unary_expression .)
    LT              reduce using rule 176 (cast_expression -> unary_expression .)
    LE              reduce using rule 176 (cast_expression -> unary_expression .)
    GE              reduce using rule 176 (cast_expression -> unary_expression .)
    GT              reduce using rule 176 (cast_expression -> unary_expression .)
    EQ              reduce using rule 176 (cast_expression -> unary_expression .)
    NE              reduce using rule 176 (cast_expression -> unary_expression .)
    AND             reduce using rule 176 (cast_expression -> unary_expression .)
    OR              reduce using rule 176 (cast_expression -> unary_expression .)
    XOR             reduce using rule 176 (cast_expression -> unary_expression .)
    LAND            reduce using rule 176 (cast_expression -> unary_expression .)
    LOR             reduce using rule 176 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 176 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 176 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 176 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 176 (cast_expression -> unary_expression .)
    COLON           reduce using rule 176 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 176 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 210
    XOREQUAL        shift and go to state 206
    TIMESEQUAL      shift and go to state 211
    DIVEQUAL        shift and go to state 212
    MODEQUAL        shift and go to state 209
    PLUSEQUAL       shift and go to state 213
    MINUSEQUAL      shift and go to state 207
    LSHIFTEQUAL     shift and go to state 216
    RSHIFTEQUAL     shift and go to state 214
    ANDEQUAL        shift and go to state 208
    OREQUAL         shift and go to state 217

    assignment_operator            shift and go to state 215

state 136

    (96) type_name -> specifier_qualifier_list . abstract_declarator_option
    (97) abstract_declarator_option -> . empty
    (98) abstract_declarator_option -> . abstract_declarator
    (210) empty -> .
    (99) abstract_declarator -> . pointer
    (100) abstract_declarator -> . pointer direct_abstract_declarator
    (101) abstract_declarator -> . direct_abstract_declarator
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (102) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (103) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (104) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (105) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (106) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN

    RPAREN          reduce using rule 210 (empty -> .)
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 220
    LBRACKET        shift and go to state 169

    abstract_declarator            shift and go to state 173
    direct_abstract_declarator     shift and go to state 172
    pointer                        shift and go to state 218
    abstract_declarator_option     shift and go to state 219
    empty                          shift and go to state 175

state 137

    (203) primary_expression -> LPAREN expression . RPAREN
    (140) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 222
    COMMA           shift and go to state 221


state 138

    (177) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 223


state 139

    (139) expression -> assignment_expression .

    COMMA           reduce using rule 139 (expression -> assignment_expression .)
    RPAREN          reduce using rule 139 (expression -> assignment_expression .)
    SEMI            reduce using rule 139 (expression -> assignment_expression .)
    COLON           reduce using rule 139 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 139 (expression -> assignment_expression .)


state 140

    (73) direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .

    LBRACKET        reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    LPAREN          reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    LBRACE          reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    AUTO            reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    REGISTER        reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    STATIC          reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    EXTERN          reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    TYPEDEF         reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    VOID            reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    CHAR            reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    SHORT           reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    INT             reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    LONG            reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    FLOAT           reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    DOUBLE          reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    SIGNED          reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    UNSIGNED        reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    TYPEID          reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    CONST           reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    VOLATILE        reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    ENUM            reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    STRUCT          reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    UNION           reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    RPAREN          reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    EQUALS          reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    SEMI            reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    COMMA           reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    COLON           reduce using rule 73 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)


state 141

    (162) binary_expression -> binary_expression RSHIFT . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 224
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 142

    (165) binary_expression -> binary_expression LE . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 225
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 143

    (160) binary_expression -> binary_expression PLUS . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 226
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 144

    (170) binary_expression -> binary_expression AND . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 227
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 145

    (172) binary_expression -> binary_expression XOR . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 228
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 146

    (169) binary_expression -> binary_expression NE . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 229
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 147

    (174) binary_expression -> binary_expression LOR . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 230
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 148

    (159) binary_expression -> binary_expression MOD . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 231
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 149

    (164) binary_expression -> binary_expression LT . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 232
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 150

    (167) binary_expression -> binary_expression GT . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 233
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 151

    (168) binary_expression -> binary_expression EQ . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 234
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 152

    (158) binary_expression -> binary_expression DIVIDE . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 235
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 153

    (157) binary_expression -> binary_expression TIMES . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 236
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 154

    (166) binary_expression -> binary_expression GE . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 237
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 155

    (163) binary_expression -> binary_expression LSHIFT . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 238
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 156

    (171) binary_expression -> binary_expression OR . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 239
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 157

    (156) conditional_expression -> binary_expression CONDOP . expression COLON conditional_expression
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    expression                     shift and go to state 240
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    assignment_expression          shift and go to state 139

state 158

    (173) binary_expression -> binary_expression LAND . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 241
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 159

    (161) binary_expression -> binary_expression MINUS . binary_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    binary_expression              shift and go to state 242
    primary_expression             shift and go to state 74
    postfix_expression             shift and go to state 69
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    identifier                     shift and go to state 93

state 160

    (182) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    TIMESEQUAL      reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    DIVEQUAL        reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    TIMES           reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 182 (unary_expression -> SIZEOF unary_expression .)


state 161

    (183) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (203) primary_expression -> LPAREN . expression RPAREN
    (96) type_name -> . specifier_qualifier_list abstract_declarator_option
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (53) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_specifier
    (55) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (56) specifier_qualifier_list -> . type_qualifier
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    ENUM            shift and go to state 38
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    struct_or_union_specifier      shift and go to state 10
    specifier_qualifier_list       shift and go to state 136
    expression                     shift and go to state 137
    struct_or_union                shift and go to state 26
    postfix_expression             shift and go to state 69
    conditional_expression         shift and go to state 134
    type_name                      shift and go to state 243
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    binary_expression              shift and go to state 84
    primary_expression             shift and go to state 74
    enum_specifier                 shift and go to state 14
    unary_operator                 shift and go to state 91
    assignment_expression          shift and go to state 139
    type_qualifier                 shift and go to state 111
    identifier                     shift and go to state 93
    type_specifier                 shift and go to state 112

state 162

    (180) unary_expression -> MINUSMINUS unary_expression .

    EQUALS          reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    XOREQUAL        reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUAL      reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQUAL        reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUAL        reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUAL       reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUAL      reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    ANDEQUAL        reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    OREQUAL         reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    CONDOP          reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 180 (unary_expression -> MINUSMINUS unary_expression .)


state 163

    (181) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 181 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 181 (unary_expression -> unary_operator cast_expression .)


state 164

    (84) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (86) parameter_list -> parameter_list COMMA . parameter_declaration
    (87) parameter_declaration -> . declaration_specifiers declarator
    (88) parameter_declaration -> . declaration_specifiers abstract_declarator_option
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 244
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    parameter_declaration          shift and go to state 245
    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 98
    storage_class_specifier        shift and go to state 24
    struct_or_union                shift and go to state 26
    enum_specifier                 shift and go to state 14
    type_qualifier                 shift and go to state 15
    type_specifier                 shift and go to state 20

state 165

    (74) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 166

    (90) identifier_list -> identifier_list COMMA . identifier
    (209) identifier -> . ID

    ID              shift and go to state 31

    identifier                     shift and go to state 246

state 167

    (75) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LBRACKET        reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACE          reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    AUTO            reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    REGISTER        reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC          reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EXTERN          reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEDEF         reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CHAR            reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SHORT           reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LONG            reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    FLOAT           reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    DOUBLE          reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SIGNED          reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNSIGNED        reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEID          reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CONST           reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOLATILE        reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ENUM            reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STRUCT          reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNION           reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMI            reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COLON           reduce using rule 75 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 168

    (69) declarator -> pointer . direct_declarator
    (99) abstract_declarator -> pointer .
    (100) abstract_declarator -> pointer . direct_abstract_declarator
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (102) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (103) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (104) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (105) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (106) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN
    (209) identifier -> . ID

    RPAREN          reduce using rule 99 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 99 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 171
    LBRACKET        shift and go to state 169
    ID              shift and go to state 31

    direct_abstract_declarator     shift and go to state 247
    direct_declarator              shift and go to state 57
    identifier                     shift and go to state 41

state 169

    (104) direct_abstract_declarator -> LBRACKET . constant_expression_option RBRACKET
    (107) constant_expression_option -> . empty
    (108) constant_expression_option -> . constant_expression
    (210) empty -> .
    (154) constant_expression -> . conditional_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    RBRACKET        reduce using rule 210 (empty -> .)
    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    constant_expression_option     shift and go to state 248
    string_literal                 shift and go to state 76
    constant_expression            shift and go to state 85
    conditional_expression         shift and go to state 70
    empty                          shift and go to state 86
    identifier                     shift and go to state 93

state 170

    (88) parameter_declaration -> declaration_specifiers abstract_declarator_option .

    COMMA           reduce using rule 88 (parameter_declaration -> declaration_specifiers abstract_declarator_option .)
    RPAREN          reduce using rule 88 (parameter_declaration -> declaration_specifiers abstract_declarator_option .)


state 171

    (72) direct_declarator -> LPAREN . declarator RPAREN
    (102) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (106) direct_abstract_declarator -> LPAREN . parameter_type_list_option RPAREN
    (69) declarator -> . pointer direct_declarator
    (70) declarator -> . direct_declarator
    (99) abstract_declarator -> . pointer
    (100) abstract_declarator -> . pointer direct_abstract_declarator
    (101) abstract_declarator -> . direct_abstract_declarator
    (109) parameter_type_list_option -> . empty
    (110) parameter_type_list_option -> . parameter_type_list
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (102) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (103) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (104) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (105) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (106) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN
    (210) empty -> .
    (83) parameter_type_list -> . parameter_list
    (84) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (209) identifier -> . ID
    (85) parameter_list -> . parameter_declaration
    (86) parameter_list -> . parameter_list COMMA parameter_declaration
    (87) parameter_declaration -> . declaration_specifiers declarator
    (88) parameter_declaration -> . declaration_specifiers abstract_declarator_option
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    TIMES           shift and go to state 36
    LPAREN          shift and go to state 171
    LBRACKET        shift and go to state 169
    RPAREN          reduce using rule 210 (empty -> .)
    ID              shift and go to state 31
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    struct_or_union_specifier      shift and go to state 10
    parameter_list                 shift and go to state 95
    storage_class_specifier        shift and go to state 24
    direct_declarator              shift and go to state 4
    struct_or_union                shift and go to state 26
    abstract_declarator            shift and go to state 249
    parameter_type_list            shift and go to state 250
    declarator                     shift and go to state 51
    parameter_declaration          shift and go to state 94
    empty                          shift and go to state 251
    parameter_type_list_option     shift and go to state 252
    pointer                        shift and go to state 168
    declaration_specifiers         shift and go to state 98
    enum_specifier                 shift and go to state 14
    direct_abstract_declarator     shift and go to state 172
    type_qualifier                 shift and go to state 15
    identifier                     shift and go to state 41
    type_specifier                 shift and go to state 20

state 172

    (101) abstract_declarator -> direct_abstract_declarator .
    (103) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET constant_expression_option RBRACKET
    (105) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_option RPAREN

    RPAREN          reduce using rule 101 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 101 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 253
    LPAREN          shift and go to state 254


state 173

    (98) abstract_declarator_option -> abstract_declarator .

    COMMA           reduce using rule 98 (abstract_declarator_option -> abstract_declarator .)
    RPAREN          reduce using rule 98 (abstract_declarator_option -> abstract_declarator .)


state 174

    (87) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 87 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 87 (parameter_declaration -> declaration_specifiers declarator .)


state 175

    (97) abstract_declarator_option -> empty .

    COMMA           reduce using rule 97 (abstract_declarator_option -> empty .)
    RPAREN          reduce using rule 97 (abstract_declarator_option -> empty .)


state 176

    (15) declaration_list -> declaration_list declaration .

    AUTO            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 15 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 15 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 15 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 15 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 15 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 15 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 15 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 15 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 15 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 15 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 15 (declaration_list -> declaration_list declaration .)
    PLUSPLUS        reduce using rule 15 (declaration_list -> declaration_list declaration .)
    MINUSMINUS      reduce using rule 15 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 15 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 15 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 15 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 15 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    ICONST          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    FCONST          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    CCONST          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    SCONST          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 15 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 15 (declaration_list -> declaration_list declaration .)


state 177

    (9) function_definition -> declarator enter_function_scope declaration_list compound_statement .

    AUTO            reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    REGISTER        reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    STATIC          reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    EXTERN          reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    TYPEDEF         reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    VOID            reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    CHAR            reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    SHORT           reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    INT             reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    LONG            reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    FLOAT           reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    DOUBLE          reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    SIGNED          reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    UNSIGNED        reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    TYPEID          reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    CONST           reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    VOLATILE        reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    TIMES           reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    LPAREN          reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    ENUM            reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    ID              reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    STRUCT          reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    UNION           reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)
    $end            reduce using rule 9 (function_definition -> declarator enter_function_scope declaration_list compound_statement .)


state 178

    (50) init_declarator -> declarator .
    (51) init_declarator -> declarator . EQUALS initializer

    SEMI            reduce using rule 50 (init_declarator -> declarator .)
    COMMA           reduce using rule 50 (init_declarator -> declarator .)
    EQUALS          shift and go to state 115


state 179

    (122) compound_statement -> LBRACE enter_scope lookup_mode . statement_list leave_scope RBRACE
    (125) statement_list -> . statement
    (126) statement_list -> . statement_list statement
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    jump_statement                 shift and go to state 276
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    statement                      shift and go to state 273
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    statement_list                 shift and go to state 260
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 180

    (121) compound_statement -> LBRACE enter_scope insert_mode . declaration_list lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> LBRACE enter_scope insert_mode . declaration_list lookup_mode leave_scope RBRACE
    (14) declaration_list -> . declaration
    (15) declaration_list -> . declaration_list declaration
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    type_qualifier                 shift and go to state 15
    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 102
    declaration                    shift and go to state 103
    storage_class_specifier        shift and go to state 24
    declaration_list               shift and go to state 278
    struct_or_union                shift and go to state 26
    type_specifier                 shift and go to state 20

state 181

    (213) insert_mode -> empty .
    (215) lookup_mode -> empty .

    AUTO            reduce using rule 213 (insert_mode -> empty .)
    REGISTER        reduce using rule 213 (insert_mode -> empty .)
    STATIC          reduce using rule 213 (insert_mode -> empty .)
    EXTERN          reduce using rule 213 (insert_mode -> empty .)
    TYPEDEF         reduce using rule 213 (insert_mode -> empty .)
    VOID            reduce using rule 213 (insert_mode -> empty .)
    CHAR            reduce using rule 213 (insert_mode -> empty .)
    SHORT           reduce using rule 213 (insert_mode -> empty .)
    INT             reduce using rule 213 (insert_mode -> empty .)
    LONG            reduce using rule 213 (insert_mode -> empty .)
    FLOAT           reduce using rule 213 (insert_mode -> empty .)
    DOUBLE          reduce using rule 213 (insert_mode -> empty .)
    SIGNED          reduce using rule 213 (insert_mode -> empty .)
    UNSIGNED        reduce using rule 213 (insert_mode -> empty .)
    TYPEID          reduce using rule 213 (insert_mode -> empty .)
    CONST           reduce using rule 213 (insert_mode -> empty .)
    VOLATILE        reduce using rule 213 (insert_mode -> empty .)
    ENUM            reduce using rule 213 (insert_mode -> empty .)
    STRUCT          reduce using rule 213 (insert_mode -> empty .)
    UNION           reduce using rule 213 (insert_mode -> empty .)
    CASE            reduce using rule 215 (lookup_mode -> empty .)
    DEFAULT         reduce using rule 215 (lookup_mode -> empty .)
    LBRACE          reduce using rule 215 (lookup_mode -> empty .)
    IF              reduce using rule 215 (lookup_mode -> empty .)
    SWITCH          reduce using rule 215 (lookup_mode -> empty .)
    WHILE           reduce using rule 215 (lookup_mode -> empty .)
    FOR             reduce using rule 215 (lookup_mode -> empty .)
    DO              reduce using rule 215 (lookup_mode -> empty .)
    GOTO            reduce using rule 215 (lookup_mode -> empty .)
    CONTINUE        reduce using rule 215 (lookup_mode -> empty .)
    BREAK           reduce using rule 215 (lookup_mode -> empty .)
    RETURN          reduce using rule 215 (lookup_mode -> empty .)
    ID              reduce using rule 215 (lookup_mode -> empty .)
    PLUSPLUS        reduce using rule 215 (lookup_mode -> empty .)
    MINUSMINUS      reduce using rule 215 (lookup_mode -> empty .)
    SIZEOF          reduce using rule 215 (lookup_mode -> empty .)
    AND             reduce using rule 215 (lookup_mode -> empty .)
    TIMES           reduce using rule 215 (lookup_mode -> empty .)
    PLUS            reduce using rule 215 (lookup_mode -> empty .)
    MINUS           reduce using rule 215 (lookup_mode -> empty .)
    NOT             reduce using rule 215 (lookup_mode -> empty .)
    LNOT            reduce using rule 215 (lookup_mode -> empty .)
    LPAREN          reduce using rule 215 (lookup_mode -> empty .)
    ICONST          reduce using rule 215 (lookup_mode -> empty .)
    FCONST          reduce using rule 215 (lookup_mode -> empty .)
    CCONST          reduce using rule 215 (lookup_mode -> empty .)
    SCONST          reduce using rule 215 (lookup_mode -> empty .)
    SEMI            reduce using rule 215 (lookup_mode -> empty .)


state 182

    (47) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPEID          reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 47 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 183

    (42) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .

    AUTO            reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TYPEID          reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ID              reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 42 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)


state 184

    (52) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMI
    (58) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            shift and go to state 279
    COMMA           shift and go to state 280


state 185

    (57) struct_declarator_list -> struct_declarator .

    SEMI            reduce using rule 57 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 57 (struct_declarator_list -> struct_declarator .)


state 186

    (59) struct_declarator -> declarator .
    (60) struct_declarator -> declarator . COLON constant_expression

    SEMI            reduce using rule 59 (struct_declarator -> declarator .)
    COMMA           reduce using rule 59 (struct_declarator -> declarator .)
    COLON           shift and go to state 281


state 187

    (61) struct_declarator -> COLON . constant_expression
    (154) constant_expression -> . conditional_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    constant_expression            shift and go to state 282
    conditional_expression         shift and go to state 70
    identifier                     shift and go to state 93

state 188

    (55) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    TIMES           reduce using rule 55 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LPAREN          reduce using rule 55 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 55 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RPAREN          reduce using rule 55 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    COLON           reduce using rule 55 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    ID              reduce using rule 55 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 189

    (53) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    TIMES           reduce using rule 53 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LPAREN          reduce using rule 53 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 53 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 53 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    COLON           reduce using rule 53 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    ID              reduce using rule 53 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 190

    (41) struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list . RBRACE
    (47) struct_declaration_list -> struct_declaration_list . struct_declaration
    (52) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (53) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_specifier
    (55) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (56) specifier_qualifier_list -> . type_qualifier
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    RBRACE          shift and go to state 283
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    struct_or_union_specifier      shift and go to state 10
    struct_declaration             shift and go to state 182
    type_qualifier                 shift and go to state 111
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 112
    struct_or_union                shift and go to state 26

state 191

    (92) initializer -> LBRACE . initializer_list RBRACE
    (93) initializer -> LBRACE . initializer_list COMMA RBRACE
    (94) initializer_list -> . initializer
    (95) initializer_list -> . initializer_list COMMA initializer
    (91) initializer -> . assignment_expression
    (92) initializer -> . LBRACE initializer_list RBRACE
    (93) initializer -> . LBRACE initializer_list COMMA RBRACE
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LBRACE          shift and go to state 191
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    initializer_list               shift and go to state 284
    conditional_expression         shift and go to state 134
    initializer                    shift and go to state 285
    assignment_expression          shift and go to state 193

state 192

    (51) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 51 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 51 (init_declarator -> declarator EQUALS initializer .)


state 193

    (91) initializer -> assignment_expression .

    SEMI            reduce using rule 91 (initializer -> assignment_expression .)
    COMMA           reduce using rule 91 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 91 (initializer -> assignment_expression .)


state 194

    (8) function_definition -> declaration_specifiers declarator enter_function_scope declaration_list . compound_statement
    (15) declaration_list -> declaration_list . declaration
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    LBRACE          shift and go to state 46
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    type_qualifier                 shift and go to state 15
    compound_statement             shift and go to state 286
    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 102
    declaration                    shift and go to state 176
    storage_class_specifier        shift and go to state 24
    struct_or_union                shift and go to state 26
    type_specifier                 shift and go to state 20

state 195

    (49) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 49 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 49 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 196

    (66) enumerator_list -> enumerator_list COMMA . enumerator
    (67) enumerator -> . identifier
    (68) enumerator -> . identifier EQUALS constant_expression
    (209) identifier -> . ID

    ID              shift and go to state 31

    enumerator                     shift and go to state 287
    identifier                     shift and go to state 123

state 197

    (63) enum_specifier -> ENUM LBRACE enumerator_list RBRACE .

    AUTO            reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TYPEDEF         reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TYPEID          reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ID              reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 63 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)


state 198

    (68) enumerator -> identifier EQUALS . constant_expression
    (154) constant_expression -> . conditional_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    constant_expression            shift and go to state 288
    conditional_expression         shift and go to state 70
    identifier                     shift and go to state 93

state 199

    (62) enum_specifier -> ENUM identifier LBRACE enumerator_list . RBRACE
    (66) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 289
    COMMA           shift and go to state 196


state 200

    (191) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (140) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 290
    COMMA           shift and go to state 221


state 201

    (192) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (205) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 292
    COMMA           shift and go to state 291


state 202

    (193) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQUAL      reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQUAL        reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 193 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 203

    (204) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 204 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 204 (argument_expression_list -> assignment_expression .)


state 204

    (195) postfix_expression -> postfix_expression ARROW identifier .

    LBRACKET        reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    LPAREN          reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    PERIOD          reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    ARROW           reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUSPLUS        reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUSMINUS      reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    TIMES           reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    DIVIDE          reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    MOD             reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUS            reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUS           reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    RSHIFT          reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    LSHIFT          reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    LT              reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    LE              reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    GE              reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    GT              reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    EQ              reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    NE              reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    AND             reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    OR              reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    XOR             reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    LAND            reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    LOR             reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    CONDOP          reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    RBRACKET        reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    RPAREN          reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    COMMA           reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    SEMI            reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    COLON           reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    RBRACE          reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    EQUALS          reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    XOREQUAL        reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    TIMESEQUAL      reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    DIVEQUAL        reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    MODEQUAL        reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUSEQUAL       reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUSEQUAL      reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    LSHIFTEQUAL     reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    RSHIFTEQUAL     reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    ANDEQUAL        reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)
    OREQUAL         reduce using rule 195 (postfix_expression -> postfix_expression ARROW identifier .)


state 205

    (194) postfix_expression -> postfix_expression PERIOD identifier .

    LBRACKET        reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    LPAREN          reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    PERIOD          reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    ARROW           reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUSPLUS        reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUSMINUS      reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    TIMES           reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    DIVIDE          reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    MOD             reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUS            reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUS           reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    RSHIFT          reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    LSHIFT          reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    LT              reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    LE              reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    GE              reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    GT              reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    EQ              reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    NE              reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    AND             reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    OR              reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    XOR             reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    LAND            reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    LOR             reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    CONDOP          reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    RBRACKET        reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    RPAREN          reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    COMMA           reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    SEMI            reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    COLON           reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    RBRACE          reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    EQUALS          reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    XOREQUAL        reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    TIMESEQUAL      reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    DIVEQUAL        reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    MODEQUAL        reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUSEQUAL       reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUSEQUAL      reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    LSHIFTEQUAL     reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    RSHIFTEQUAL     reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    ANDEQUAL        reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)
    OREQUAL         reduce using rule 194 (postfix_expression -> postfix_expression PERIOD identifier .)


state 206

    (144) assignment_operator -> XOREQUAL .

    PLUSPLUS        reduce using rule 144 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 144 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 144 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 144 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 144 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 144 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 144 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 144 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 144 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 144 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 144 (assignment_operator -> XOREQUAL .)
    ICONST          reduce using rule 144 (assignment_operator -> XOREQUAL .)
    FCONST          reduce using rule 144 (assignment_operator -> XOREQUAL .)
    CCONST          reduce using rule 144 (assignment_operator -> XOREQUAL .)
    SCONST          reduce using rule 144 (assignment_operator -> XOREQUAL .)


state 207

    (149) assignment_operator -> MINUSEQUAL .

    PLUSPLUS        reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    ICONST          reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    FCONST          reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    CCONST          reduce using rule 149 (assignment_operator -> MINUSEQUAL .)
    SCONST          reduce using rule 149 (assignment_operator -> MINUSEQUAL .)


state 208

    (152) assignment_operator -> ANDEQUAL .

    PLUSPLUS        reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    ICONST          reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    FCONST          reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    CCONST          reduce using rule 152 (assignment_operator -> ANDEQUAL .)
    SCONST          reduce using rule 152 (assignment_operator -> ANDEQUAL .)


state 209

    (147) assignment_operator -> MODEQUAL .

    PLUSPLUS        reduce using rule 147 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 147 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 147 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 147 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 147 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 147 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 147 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 147 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 147 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 147 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 147 (assignment_operator -> MODEQUAL .)
    ICONST          reduce using rule 147 (assignment_operator -> MODEQUAL .)
    FCONST          reduce using rule 147 (assignment_operator -> MODEQUAL .)
    CCONST          reduce using rule 147 (assignment_operator -> MODEQUAL .)
    SCONST          reduce using rule 147 (assignment_operator -> MODEQUAL .)


state 210

    (143) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 143 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 143 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 143 (assignment_operator -> EQUALS .)
    AND             reduce using rule 143 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 143 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 143 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 143 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 143 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 143 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 143 (assignment_operator -> EQUALS .)
    ID              reduce using rule 143 (assignment_operator -> EQUALS .)
    ICONST          reduce using rule 143 (assignment_operator -> EQUALS .)
    FCONST          reduce using rule 143 (assignment_operator -> EQUALS .)
    CCONST          reduce using rule 143 (assignment_operator -> EQUALS .)
    SCONST          reduce using rule 143 (assignment_operator -> EQUALS .)


state 211

    (145) assignment_operator -> TIMESEQUAL .

    PLUSPLUS        reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    SIZEOF          reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    AND             reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    ICONST          reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    FCONST          reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    CCONST          reduce using rule 145 (assignment_operator -> TIMESEQUAL .)
    SCONST          reduce using rule 145 (assignment_operator -> TIMESEQUAL .)


state 212

    (146) assignment_operator -> DIVEQUAL .

    PLUSPLUS        reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    SIZEOF          reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    AND             reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    ICONST          reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    FCONST          reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    CCONST          reduce using rule 146 (assignment_operator -> DIVEQUAL .)
    SCONST          reduce using rule 146 (assignment_operator -> DIVEQUAL .)


state 213

    (148) assignment_operator -> PLUSEQUAL .

    PLUSPLUS        reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    ICONST          reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    FCONST          reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    CCONST          reduce using rule 148 (assignment_operator -> PLUSEQUAL .)
    SCONST          reduce using rule 148 (assignment_operator -> PLUSEQUAL .)


state 214

    (151) assignment_operator -> RSHIFTEQUAL .

    PLUSPLUS        reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    FCONST          reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    CCONST          reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)
    SCONST          reduce using rule 151 (assignment_operator -> RSHIFTEQUAL .)


state 215

    (142) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    assignment_expression          shift and go to state 293

state 216

    (150) assignment_operator -> LSHIFTEQUAL .

    PLUSPLUS        reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    FCONST          reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    CCONST          reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)
    SCONST          reduce using rule 150 (assignment_operator -> LSHIFTEQUAL .)


state 217

    (153) assignment_operator -> OREQUAL .

    PLUSPLUS        reduce using rule 153 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 153 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 153 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 153 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 153 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 153 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 153 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 153 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 153 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 153 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 153 (assignment_operator -> OREQUAL .)
    ICONST          reduce using rule 153 (assignment_operator -> OREQUAL .)
    FCONST          reduce using rule 153 (assignment_operator -> OREQUAL .)
    CCONST          reduce using rule 153 (assignment_operator -> OREQUAL .)
    SCONST          reduce using rule 153 (assignment_operator -> OREQUAL .)


state 218

    (99) abstract_declarator -> pointer .
    (100) abstract_declarator -> pointer . direct_abstract_declarator
    (102) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (103) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (104) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (105) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (106) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN

    RPAREN          reduce using rule 99 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 220
    LBRACKET        shift and go to state 169

    direct_abstract_declarator     shift and go to state 247

state 219

    (96) type_name -> specifier_qualifier_list abstract_declarator_option .

    RPAREN          reduce using rule 96 (type_name -> specifier_qualifier_list abstract_declarator_option .)


state 220

    (102) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (106) direct_abstract_declarator -> LPAREN . parameter_type_list_option RPAREN
    (99) abstract_declarator -> . pointer
    (100) abstract_declarator -> . pointer direct_abstract_declarator
    (101) abstract_declarator -> . direct_abstract_declarator
    (109) parameter_type_list_option -> . empty
    (110) parameter_type_list_option -> . parameter_type_list
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (102) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (103) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (104) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (105) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (106) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN
    (210) empty -> .
    (83) parameter_type_list -> . parameter_list
    (84) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (85) parameter_list -> . parameter_declaration
    (86) parameter_list -> . parameter_list COMMA parameter_declaration
    (87) parameter_declaration -> . declaration_specifiers declarator
    (88) parameter_declaration -> . declaration_specifiers abstract_declarator_option
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    TIMES           shift and go to state 36
    LPAREN          shift and go to state 220
    LBRACKET        shift and go to state 169
    RPAREN          reduce using rule 210 (empty -> .)
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    struct_or_union_specifier      shift and go to state 10
    parameter_list                 shift and go to state 95
    storage_class_specifier        shift and go to state 24
    struct_or_union                shift and go to state 26
    abstract_declarator            shift and go to state 249
    parameter_type_list            shift and go to state 250
    empty                          shift and go to state 251
    parameter_type_list_option     shift and go to state 252
    pointer                        shift and go to state 218
    parameter_declaration          shift and go to state 94
    declaration_specifiers         shift and go to state 98
    enum_specifier                 shift and go to state 14
    direct_abstract_declarator     shift and go to state 172
    type_qualifier                 shift and go to state 15
    type_specifier                 shift and go to state 20

state 221

    (140) expression -> expression COMMA . assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    assignment_expression          shift and go to state 294

state 222

    (203) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 203 (primary_expression -> LPAREN expression RPAREN .)


state 223

    (177) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 295
    unary_expression               shift and go to state 73
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93

state 224

    (162) binary_expression -> binary_expression RSHIFT binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RSHIFT          reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LSHIFT          reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LT              reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LE              reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GE              reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GT              reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    EQ              reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    NE              reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    AND             reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    OR              reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    XOR             reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LAND            reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LOR             reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COMMA           reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    SEMI            reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACE          reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACKET        reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RPAREN          reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COLON           reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159

  ! TIMES           [ reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 162 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 141 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LT              [ shift and go to state 149 ]
  ! LE              [ shift and go to state 142 ]
  ! GE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 150 ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 225

    (165) binary_expression -> binary_expression LE binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    LT              reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    XOR             reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    LAND            reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    LOR             reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    COLON           reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155

  ! TIMES           [ reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 165 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 149 ]
  ! LE              [ shift and go to state 142 ]
  ! GE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 150 ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 226

    (160) binary_expression -> binary_expression PLUS binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    PLUS            reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    RSHIFT          reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    LSHIFT          reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    XOR             reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    LAND            reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    LOR             reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    COLON           reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148

  ! TIMES           [ reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 160 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 143 ]
  ! MINUS           [ shift and go to state 159 ]
  ! RSHIFT          [ shift and go to state 141 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LT              [ shift and go to state 149 ]
  ! LE              [ shift and go to state 142 ]
  ! GE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 150 ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 227

    (170) binary_expression -> binary_expression AND binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    XOR             reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    LAND            reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    LOR             reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    COLON           reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155
    LT              shift and go to state 149
    LE              shift and go to state 142
    GE              shift and go to state 154
    GT              shift and go to state 150
    EQ              shift and go to state 151
    NE              shift and go to state 146

  ! TIMES           [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GE              [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NE              [ reduce using rule 170 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 228

    (172) binary_expression -> binary_expression XOR binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .)
    OR              reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .)
    XOR             reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .)
    LAND            reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .)
    LOR             reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .)
    COMMA           reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .)
    SEMI            reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACE          reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACKET        reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .)
    RPAREN          reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .)
    COLON           reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155
    LT              shift and go to state 149
    LE              shift and go to state 142
    GE              shift and go to state 154
    GT              shift and go to state 150
    EQ              shift and go to state 151
    NE              shift and go to state 146
    AND             shift and go to state 144

  ! TIMES           [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MOD             [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! PLUS            [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MINUS           [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LT              [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LE              [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GE              [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GT              [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! EQ              [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! NE              [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! AND             [ reduce using rule 172 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 229

    (169) binary_expression -> binary_expression NE binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    EQ              reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    OR              reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    XOR             reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    LAND            reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    LOR             reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    COLON           reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155
    LT              shift and go to state 149
    LE              shift and go to state 142
    GE              shift and go to state 154
    GT              shift and go to state 150

  ! TIMES           [ reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MOD             [ reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .) ]
  ! PLUS            [ reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LE              [ reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GE              [ reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 169 (binary_expression -> binary_expression NE binary_expression .) ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 230

    (174) binary_expression -> binary_expression LOR binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .)
    LOR             reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .)
    COMMA           reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .)
    SEMI            reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACE          reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACKET        reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .)
    RPAREN          reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .)
    COLON           reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155
    LT              shift and go to state 149
    LE              shift and go to state 142
    GE              shift and go to state 154
    GT              shift and go to state 150
    EQ              shift and go to state 151
    NE              shift and go to state 146
    AND             shift and go to state 144
    OR              shift and go to state 156
    XOR             shift and go to state 145
    LAND            shift and go to state 158

  ! TIMES           [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MOD             [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! PLUS            [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MINUS           [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LT              [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LE              [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GE              [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GT              [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! EQ              [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! NE              [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! AND             [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! OR              [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! XOR             [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LAND            [ reduce using rule 174 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LOR             [ shift and go to state 147 ]


state 231

    (159) binary_expression -> binary_expression MOD binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    TIMES           reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    RSHIFT          reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    LSHIFT          reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    XOR             reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    LAND            reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    LOR             reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)
    COLON           reduce using rule 159 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 153 ]
  ! DIVIDE          [ shift and go to state 152 ]
  ! MOD             [ shift and go to state 148 ]
  ! PLUS            [ shift and go to state 143 ]
  ! MINUS           [ shift and go to state 159 ]
  ! RSHIFT          [ shift and go to state 141 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LT              [ shift and go to state 149 ]
  ! LE              [ shift and go to state 142 ]
  ! GE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 150 ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 232

    (164) binary_expression -> binary_expression LT binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    LT              reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    XOR             reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    LAND            reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    LOR             reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    COLON           reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155

  ! TIMES           [ reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 164 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 149 ]
  ! LE              [ shift and go to state 142 ]
  ! GE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 150 ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 233

    (167) binary_expression -> binary_expression GT binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    LT              reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    XOR             reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    LAND            reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    LOR             reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    COLON           reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155

  ! TIMES           [ reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 167 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 149 ]
  ! LE              [ shift and go to state 142 ]
  ! GE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 150 ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 234

    (168) binary_expression -> binary_expression EQ binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    XOR             reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    LAND            reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    LOR             reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    COLON           reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155
    LT              shift and go to state 149
    LE              shift and go to state 142
    GE              shift and go to state 154
    GT              shift and go to state 150

  ! TIMES           [ reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! RSHIFT          [ reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LSHIFT          [ reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GE              [ reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 168 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 235

    (158) binary_expression -> binary_expression DIVIDE binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    TIMES           reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RSHIFT          reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LSHIFT          reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    XOR             reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LAND            reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LOR             reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COLON           reduce using rule 158 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 153 ]
  ! DIVIDE          [ shift and go to state 152 ]
  ! MOD             [ shift and go to state 148 ]
  ! PLUS            [ shift and go to state 143 ]
  ! MINUS           [ shift and go to state 159 ]
  ! RSHIFT          [ shift and go to state 141 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LT              [ shift and go to state 149 ]
  ! LE              [ shift and go to state 142 ]
  ! GE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 150 ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 236

    (157) binary_expression -> binary_expression TIMES binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    TIMES           reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    RSHIFT          reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    LSHIFT          reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    XOR             reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    LAND            reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    LOR             reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)
    COLON           reduce using rule 157 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 153 ]
  ! DIVIDE          [ shift and go to state 152 ]
  ! MOD             [ shift and go to state 148 ]
  ! PLUS            [ shift and go to state 143 ]
  ! MINUS           [ shift and go to state 159 ]
  ! RSHIFT          [ shift and go to state 141 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LT              [ shift and go to state 149 ]
  ! LE              [ shift and go to state 142 ]
  ! GE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 150 ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 237

    (166) binary_expression -> binary_expression GE binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    LT              reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    NE              reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    OR              reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    XOR             reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    LAND            reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    LOR             reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    COLON           reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155

  ! TIMES           [ reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .) ]
  ! PLUS            [ reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 166 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LT              [ shift and go to state 149 ]
  ! LE              [ shift and go to state 142 ]
  ! GE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 150 ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 238

    (163) binary_expression -> binary_expression LSHIFT binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RSHIFT          reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LSHIFT          reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LT              reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LE              reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GE              reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GT              reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    EQ              reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    NE              reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    AND             reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    OR              reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    XOR             reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LAND            reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LOR             reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COMMA           reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    SEMI            reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACE          reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACKET        reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RPAREN          reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COLON           reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159

  ! TIMES           [ reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 163 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 141 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LT              [ shift and go to state 149 ]
  ! LE              [ shift and go to state 142 ]
  ! GE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 150 ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 239

    (171) binary_expression -> binary_expression OR binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .)
    LAND            reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .)
    LOR             reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .)
    COLON           reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155
    LT              shift and go to state 149
    LE              shift and go to state 142
    GE              shift and go to state 154
    GT              shift and go to state 150
    EQ              shift and go to state 151
    NE              shift and go to state 146
    AND             shift and go to state 144
    XOR             shift and go to state 145

  ! TIMES           [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GE              [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NE              [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! XOR             [ reduce using rule 171 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 156 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 240

    (156) conditional_expression -> binary_expression CONDOP expression . COLON conditional_expression
    (140) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 296
    COMMA           shift and go to state 221


state 241

    (173) binary_expression -> binary_expression LAND binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .)
    LAND            reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .)
    LOR             reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .)
    COMMA           reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .)
    SEMI            reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACE          reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACKET        reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .)
    RPAREN          reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .)
    COLON           reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148
    PLUS            shift and go to state 143
    MINUS           shift and go to state 159
    RSHIFT          shift and go to state 141
    LSHIFT          shift and go to state 155
    LT              shift and go to state 149
    LE              shift and go to state 142
    GE              shift and go to state 154
    GT              shift and go to state 150
    EQ              shift and go to state 151
    NE              shift and go to state 146
    AND             shift and go to state 144
    OR              shift and go to state 156
    XOR             shift and go to state 145

  ! TIMES           [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MOD             [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! PLUS            [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MINUS           [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LT              [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LE              [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GE              [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GT              [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! EQ              [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! NE              [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! AND             [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! OR              [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! XOR             [ reduce using rule 173 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 242

    (161) binary_expression -> binary_expression MINUS binary_expression .
    (157) binary_expression -> binary_expression . TIMES binary_expression
    (158) binary_expression -> binary_expression . DIVIDE binary_expression
    (159) binary_expression -> binary_expression . MOD binary_expression
    (160) binary_expression -> binary_expression . PLUS binary_expression
    (161) binary_expression -> binary_expression . MINUS binary_expression
    (162) binary_expression -> binary_expression . RSHIFT binary_expression
    (163) binary_expression -> binary_expression . LSHIFT binary_expression
    (164) binary_expression -> binary_expression . LT binary_expression
    (165) binary_expression -> binary_expression . LE binary_expression
    (166) binary_expression -> binary_expression . GE binary_expression
    (167) binary_expression -> binary_expression . GT binary_expression
    (168) binary_expression -> binary_expression . EQ binary_expression
    (169) binary_expression -> binary_expression . NE binary_expression
    (170) binary_expression -> binary_expression . AND binary_expression
    (171) binary_expression -> binary_expression . OR binary_expression
    (172) binary_expression -> binary_expression . XOR binary_expression
    (173) binary_expression -> binary_expression . LAND binary_expression
    (174) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    PLUS            reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    RSHIFT          reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    LSHIFT          reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    XOR             reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    LAND            reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    LOR             reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    COLON           reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 148

  ! TIMES           [ reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 161 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 143 ]
  ! MINUS           [ shift and go to state 159 ]
  ! RSHIFT          [ shift and go to state 141 ]
  ! LSHIFT          [ shift and go to state 155 ]
  ! LT              [ shift and go to state 149 ]
  ! LE              [ shift and go to state 142 ]
  ! GE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 150 ]
  ! EQ              [ shift and go to state 151 ]
  ! NE              [ shift and go to state 146 ]
  ! AND             [ shift and go to state 144 ]
  ! OR              [ shift and go to state 156 ]
  ! XOR             [ shift and go to state 145 ]
  ! LAND            [ shift and go to state 158 ]
  ! LOR             [ shift and go to state 147 ]


state 243

    (183) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 297


state 244

    (84) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 84 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 245

    (86) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 86 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 86 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 246

    (90) identifier_list -> identifier_list COMMA identifier .

    RPAREN          reduce using rule 90 (identifier_list -> identifier_list COMMA identifier .)
    COMMA           reduce using rule 90 (identifier_list -> identifier_list COMMA identifier .)


state 247

    (100) abstract_declarator -> pointer direct_abstract_declarator .
    (103) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET constant_expression_option RBRACKET
    (105) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_option RPAREN

    RPAREN          reduce using rule 100 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 100 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 253
    LPAREN          shift and go to state 254


state 248

    (104) direct_abstract_declarator -> LBRACKET constant_expression_option . RBRACKET

    RBRACKET        shift and go to state 298


state 249

    (102) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 299


state 250

    (110) parameter_type_list_option -> parameter_type_list .

    RPAREN          reduce using rule 110 (parameter_type_list_option -> parameter_type_list .)


state 251

    (109) parameter_type_list_option -> empty .

    RPAREN          reduce using rule 109 (parameter_type_list_option -> empty .)


state 252

    (106) direct_abstract_declarator -> LPAREN parameter_type_list_option . RPAREN

    RPAREN          shift and go to state 300


state 253

    (103) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . constant_expression_option RBRACKET
    (107) constant_expression_option -> . empty
    (108) constant_expression_option -> . constant_expression
    (210) empty -> .
    (154) constant_expression -> . conditional_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    RBRACKET        reduce using rule 210 (empty -> .)
    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    unary_operator                 shift and go to state 91
    binary_expression              shift and go to state 84
    constant_expression_option     shift and go to state 301
    string_literal                 shift and go to state 76
    constant_expression            shift and go to state 85
    conditional_expression         shift and go to state 70
    empty                          shift and go to state 86
    identifier                     shift and go to state 93

state 254

    (105) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list_option RPAREN
    (109) parameter_type_list_option -> . empty
    (110) parameter_type_list_option -> . parameter_type_list
    (210) empty -> .
    (83) parameter_type_list -> . parameter_list
    (84) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (85) parameter_list -> . parameter_declaration
    (86) parameter_list -> . parameter_list COMMA parameter_declaration
    (87) parameter_declaration -> . declaration_specifiers declarator
    (88) parameter_declaration -> . declaration_specifiers abstract_declarator_option
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    RPAREN          reduce using rule 210 (empty -> .)
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    parameter_declaration          shift and go to state 94
    type_qualifier                 shift and go to state 15
    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 98
    parameter_list                 shift and go to state 95
    storage_class_specifier        shift and go to state 24
    enum_specifier                 shift and go to state 14
    parameter_type_list            shift and go to state 250
    empty                          shift and go to state 251
    struct_or_union                shift and go to state 26
    parameter_type_list_option     shift and go to state 302
    type_specifier                 shift and go to state 20

state 255

    (120) expression_statement -> expression_option . SEMI

    SEMI            shift and go to state 303


state 256

    (127) selection_statement -> IF . LPAREN expression RPAREN statement
    (128) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 304


state 257

    (112) statement -> expression_statement .

    CASE            reduce using rule 112 (statement -> expression_statement .)
    DEFAULT         reduce using rule 112 (statement -> expression_statement .)
    LBRACE          reduce using rule 112 (statement -> expression_statement .)
    IF              reduce using rule 112 (statement -> expression_statement .)
    SWITCH          reduce using rule 112 (statement -> expression_statement .)
    WHILE           reduce using rule 112 (statement -> expression_statement .)
    FOR             reduce using rule 112 (statement -> expression_statement .)
    DO              reduce using rule 112 (statement -> expression_statement .)
    GOTO            reduce using rule 112 (statement -> expression_statement .)
    CONTINUE        reduce using rule 112 (statement -> expression_statement .)
    BREAK           reduce using rule 112 (statement -> expression_statement .)
    RETURN          reduce using rule 112 (statement -> expression_statement .)
    ID              reduce using rule 112 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 112 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 112 (statement -> expression_statement .)
    SIZEOF          reduce using rule 112 (statement -> expression_statement .)
    AND             reduce using rule 112 (statement -> expression_statement .)
    TIMES           reduce using rule 112 (statement -> expression_statement .)
    PLUS            reduce using rule 112 (statement -> expression_statement .)
    MINUS           reduce using rule 112 (statement -> expression_statement .)
    NOT             reduce using rule 112 (statement -> expression_statement .)
    LNOT            reduce using rule 112 (statement -> expression_statement .)
    LPAREN          reduce using rule 112 (statement -> expression_statement .)
    ICONST          reduce using rule 112 (statement -> expression_statement .)
    FCONST          reduce using rule 112 (statement -> expression_statement .)
    CCONST          reduce using rule 112 (statement -> expression_statement .)
    SCONST          reduce using rule 112 (statement -> expression_statement .)
    RBRACE          reduce using rule 112 (statement -> expression_statement .)
    SEMI            reduce using rule 112 (statement -> expression_statement .)
    ELSE            reduce using rule 112 (statement -> expression_statement .)


state 258

    (132) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    statement                      shift and go to state 305
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    jump_statement                 shift and go to state 276
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 259

    (136) jump_statement -> RETURN . expression_option SEMI
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    expression                     shift and go to state 262
    expression_option              shift and go to state 306
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    assignment_expression          shift and go to state 139

state 260

    (122) compound_statement -> LBRACE enter_scope lookup_mode statement_list . leave_scope RBRACE
    (126) statement_list -> statement_list . statement
    (214) leave_scope -> . empty
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (210) empty -> .
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    RBRACE          reduce using rule 210 (empty -> .)
    SEMI            reduce using rule 210 (empty -> .)
    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    leave_scope                    shift and go to state 307
    jump_statement                 shift and go to state 276
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 308
    statement                      shift and go to state 309
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 261

    (129) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 310


state 262

    (138) expression_option -> expression .
    (140) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 138 (expression_option -> expression .)
    RPAREN          reduce using rule 138 (expression_option -> expression .)
    COMMA           shift and go to state 221


state 263

    (111) statement -> labeled_statement .

    CASE            reduce using rule 111 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 111 (statement -> labeled_statement .)
    LBRACE          reduce using rule 111 (statement -> labeled_statement .)
    IF              reduce using rule 111 (statement -> labeled_statement .)
    SWITCH          reduce using rule 111 (statement -> labeled_statement .)
    WHILE           reduce using rule 111 (statement -> labeled_statement .)
    FOR             reduce using rule 111 (statement -> labeled_statement .)
    DO              reduce using rule 111 (statement -> labeled_statement .)
    GOTO            reduce using rule 111 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 111 (statement -> labeled_statement .)
    BREAK           reduce using rule 111 (statement -> labeled_statement .)
    RETURN          reduce using rule 111 (statement -> labeled_statement .)
    ID              reduce using rule 111 (statement -> labeled_statement .)
    PLUSPLUS        reduce using rule 111 (statement -> labeled_statement .)
    MINUSMINUS      reduce using rule 111 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 111 (statement -> labeled_statement .)
    AND             reduce using rule 111 (statement -> labeled_statement .)
    TIMES           reduce using rule 111 (statement -> labeled_statement .)
    PLUS            reduce using rule 111 (statement -> labeled_statement .)
    MINUS           reduce using rule 111 (statement -> labeled_statement .)
    NOT             reduce using rule 111 (statement -> labeled_statement .)
    LNOT            reduce using rule 111 (statement -> labeled_statement .)
    LPAREN          reduce using rule 111 (statement -> labeled_statement .)
    ICONST          reduce using rule 111 (statement -> labeled_statement .)
    FCONST          reduce using rule 111 (statement -> labeled_statement .)
    CCONST          reduce using rule 111 (statement -> labeled_statement .)
    SCONST          reduce using rule 111 (statement -> labeled_statement .)
    RBRACE          reduce using rule 111 (statement -> labeled_statement .)
    SEMI            reduce using rule 111 (statement -> labeled_statement .)
    ELSE            reduce using rule 111 (statement -> labeled_statement .)


state 264

    (113) statement -> compound_statement .

    CASE            reduce using rule 113 (statement -> compound_statement .)
    DEFAULT         reduce using rule 113 (statement -> compound_statement .)
    LBRACE          reduce using rule 113 (statement -> compound_statement .)
    IF              reduce using rule 113 (statement -> compound_statement .)
    SWITCH          reduce using rule 113 (statement -> compound_statement .)
    WHILE           reduce using rule 113 (statement -> compound_statement .)
    FOR             reduce using rule 113 (statement -> compound_statement .)
    DO              reduce using rule 113 (statement -> compound_statement .)
    GOTO            reduce using rule 113 (statement -> compound_statement .)
    CONTINUE        reduce using rule 113 (statement -> compound_statement .)
    BREAK           reduce using rule 113 (statement -> compound_statement .)
    RETURN          reduce using rule 113 (statement -> compound_statement .)
    ID              reduce using rule 113 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 113 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 113 (statement -> compound_statement .)
    SIZEOF          reduce using rule 113 (statement -> compound_statement .)
    AND             reduce using rule 113 (statement -> compound_statement .)
    TIMES           reduce using rule 113 (statement -> compound_statement .)
    PLUS            reduce using rule 113 (statement -> compound_statement .)
    MINUS           reduce using rule 113 (statement -> compound_statement .)
    NOT             reduce using rule 113 (statement -> compound_statement .)
    LNOT            reduce using rule 113 (statement -> compound_statement .)
    LPAREN          reduce using rule 113 (statement -> compound_statement .)
    ICONST          reduce using rule 113 (statement -> compound_statement .)
    FCONST          reduce using rule 113 (statement -> compound_statement .)
    CCONST          reduce using rule 113 (statement -> compound_statement .)
    SCONST          reduce using rule 113 (statement -> compound_statement .)
    RBRACE          reduce using rule 113 (statement -> compound_statement .)
    SEMI            reduce using rule 113 (statement -> compound_statement .)
    ELSE            reduce using rule 113 (statement -> compound_statement .)


state 265

    (131) iteration_statement -> FOR . LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement

    LPAREN          shift and go to state 311


state 266

    (135) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 312


state 267

    (130) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 313


state 268

    (115) statement -> iteration_statement .

    CASE            reduce using rule 115 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 115 (statement -> iteration_statement .)
    LBRACE          reduce using rule 115 (statement -> iteration_statement .)
    IF              reduce using rule 115 (statement -> iteration_statement .)
    SWITCH          reduce using rule 115 (statement -> iteration_statement .)
    WHILE           reduce using rule 115 (statement -> iteration_statement .)
    FOR             reduce using rule 115 (statement -> iteration_statement .)
    DO              reduce using rule 115 (statement -> iteration_statement .)
    GOTO            reduce using rule 115 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 115 (statement -> iteration_statement .)
    BREAK           reduce using rule 115 (statement -> iteration_statement .)
    RETURN          reduce using rule 115 (statement -> iteration_statement .)
    ID              reduce using rule 115 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 115 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 115 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 115 (statement -> iteration_statement .)
    AND             reduce using rule 115 (statement -> iteration_statement .)
    TIMES           reduce using rule 115 (statement -> iteration_statement .)
    PLUS            reduce using rule 115 (statement -> iteration_statement .)
    MINUS           reduce using rule 115 (statement -> iteration_statement .)
    NOT             reduce using rule 115 (statement -> iteration_statement .)
    LNOT            reduce using rule 115 (statement -> iteration_statement .)
    LPAREN          reduce using rule 115 (statement -> iteration_statement .)
    ICONST          reduce using rule 115 (statement -> iteration_statement .)
    FCONST          reduce using rule 115 (statement -> iteration_statement .)
    CCONST          reduce using rule 115 (statement -> iteration_statement .)
    SCONST          reduce using rule 115 (statement -> iteration_statement .)
    RBRACE          reduce using rule 115 (statement -> iteration_statement .)
    SEMI            reduce using rule 115 (statement -> iteration_statement .)
    ELSE            reduce using rule 115 (statement -> iteration_statement .)


state 269

    (119) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 314


state 270

    (118) labeled_statement -> CASE . constant_expression COLON statement
    (154) constant_expression -> . conditional_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    unary_expression               shift and go to state 73
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 70
    constant_expression            shift and go to state 315
    cast_expression                shift and go to state 81

state 271

    (137) expression_option -> empty .

    SEMI            reduce using rule 137 (expression_option -> empty .)
    RPAREN          reduce using rule 137 (expression_option -> empty .)


state 272

    (133) jump_statement -> GOTO . identifier SEMI
    (209) identifier -> . ID

    ID              shift and go to state 31

    identifier                     shift and go to state 316

state 273

    (125) statement_list -> statement .

    CASE            reduce using rule 125 (statement_list -> statement .)
    DEFAULT         reduce using rule 125 (statement_list -> statement .)
    LBRACE          reduce using rule 125 (statement_list -> statement .)
    IF              reduce using rule 125 (statement_list -> statement .)
    SWITCH          reduce using rule 125 (statement_list -> statement .)
    WHILE           reduce using rule 125 (statement_list -> statement .)
    FOR             reduce using rule 125 (statement_list -> statement .)
    DO              reduce using rule 125 (statement_list -> statement .)
    GOTO            reduce using rule 125 (statement_list -> statement .)
    CONTINUE        reduce using rule 125 (statement_list -> statement .)
    BREAK           reduce using rule 125 (statement_list -> statement .)
    RETURN          reduce using rule 125 (statement_list -> statement .)
    ID              reduce using rule 125 (statement_list -> statement .)
    PLUSPLUS        reduce using rule 125 (statement_list -> statement .)
    MINUSMINUS      reduce using rule 125 (statement_list -> statement .)
    SIZEOF          reduce using rule 125 (statement_list -> statement .)
    AND             reduce using rule 125 (statement_list -> statement .)
    TIMES           reduce using rule 125 (statement_list -> statement .)
    PLUS            reduce using rule 125 (statement_list -> statement .)
    MINUS           reduce using rule 125 (statement_list -> statement .)
    NOT             reduce using rule 125 (statement_list -> statement .)
    LNOT            reduce using rule 125 (statement_list -> statement .)
    LPAREN          reduce using rule 125 (statement_list -> statement .)
    ICONST          reduce using rule 125 (statement_list -> statement .)
    FCONST          reduce using rule 125 (statement_list -> statement .)
    CCONST          reduce using rule 125 (statement_list -> statement .)
    SCONST          reduce using rule 125 (statement_list -> statement .)
    RBRACE          reduce using rule 125 (statement_list -> statement .)
    SEMI            reduce using rule 125 (statement_list -> statement .)


state 274

    (134) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 317


state 275

    (117) labeled_statement -> identifier . COLON statement
    (198) primary_expression -> identifier .

    COLON           shift and go to state 318
    LBRACKET        reduce using rule 198 (primary_expression -> identifier .)
    LPAREN          reduce using rule 198 (primary_expression -> identifier .)
    PERIOD          reduce using rule 198 (primary_expression -> identifier .)
    ARROW           reduce using rule 198 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 198 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 198 (primary_expression -> identifier .)
    EQUALS          reduce using rule 198 (primary_expression -> identifier .)
    XOREQUAL        reduce using rule 198 (primary_expression -> identifier .)
    TIMESEQUAL      reduce using rule 198 (primary_expression -> identifier .)
    DIVEQUAL        reduce using rule 198 (primary_expression -> identifier .)
    MODEQUAL        reduce using rule 198 (primary_expression -> identifier .)
    PLUSEQUAL       reduce using rule 198 (primary_expression -> identifier .)
    MINUSEQUAL      reduce using rule 198 (primary_expression -> identifier .)
    LSHIFTEQUAL     reduce using rule 198 (primary_expression -> identifier .)
    RSHIFTEQUAL     reduce using rule 198 (primary_expression -> identifier .)
    ANDEQUAL        reduce using rule 198 (primary_expression -> identifier .)
    OREQUAL         reduce using rule 198 (primary_expression -> identifier .)
    CONDOP          reduce using rule 198 (primary_expression -> identifier .)
    TIMES           reduce using rule 198 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 198 (primary_expression -> identifier .)
    MOD             reduce using rule 198 (primary_expression -> identifier .)
    PLUS            reduce using rule 198 (primary_expression -> identifier .)
    MINUS           reduce using rule 198 (primary_expression -> identifier .)
    RSHIFT          reduce using rule 198 (primary_expression -> identifier .)
    LSHIFT          reduce using rule 198 (primary_expression -> identifier .)
    LT              reduce using rule 198 (primary_expression -> identifier .)
    LE              reduce using rule 198 (primary_expression -> identifier .)
    GE              reduce using rule 198 (primary_expression -> identifier .)
    GT              reduce using rule 198 (primary_expression -> identifier .)
    EQ              reduce using rule 198 (primary_expression -> identifier .)
    NE              reduce using rule 198 (primary_expression -> identifier .)
    AND             reduce using rule 198 (primary_expression -> identifier .)
    OR              reduce using rule 198 (primary_expression -> identifier .)
    XOR             reduce using rule 198 (primary_expression -> identifier .)
    LAND            reduce using rule 198 (primary_expression -> identifier .)
    LOR             reduce using rule 198 (primary_expression -> identifier .)
    COMMA           reduce using rule 198 (primary_expression -> identifier .)
    SEMI            reduce using rule 198 (primary_expression -> identifier .)


state 276

    (116) statement -> jump_statement .

    CASE            reduce using rule 116 (statement -> jump_statement .)
    DEFAULT         reduce using rule 116 (statement -> jump_statement .)
    LBRACE          reduce using rule 116 (statement -> jump_statement .)
    IF              reduce using rule 116 (statement -> jump_statement .)
    SWITCH          reduce using rule 116 (statement -> jump_statement .)
    WHILE           reduce using rule 116 (statement -> jump_statement .)
    FOR             reduce using rule 116 (statement -> jump_statement .)
    DO              reduce using rule 116 (statement -> jump_statement .)
    GOTO            reduce using rule 116 (statement -> jump_statement .)
    CONTINUE        reduce using rule 116 (statement -> jump_statement .)
    BREAK           reduce using rule 116 (statement -> jump_statement .)
    RETURN          reduce using rule 116 (statement -> jump_statement .)
    ID              reduce using rule 116 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 116 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 116 (statement -> jump_statement .)
    SIZEOF          reduce using rule 116 (statement -> jump_statement .)
    AND             reduce using rule 116 (statement -> jump_statement .)
    TIMES           reduce using rule 116 (statement -> jump_statement .)
    PLUS            reduce using rule 116 (statement -> jump_statement .)
    MINUS           reduce using rule 116 (statement -> jump_statement .)
    NOT             reduce using rule 116 (statement -> jump_statement .)
    LNOT            reduce using rule 116 (statement -> jump_statement .)
    LPAREN          reduce using rule 116 (statement -> jump_statement .)
    ICONST          reduce using rule 116 (statement -> jump_statement .)
    FCONST          reduce using rule 116 (statement -> jump_statement .)
    CCONST          reduce using rule 116 (statement -> jump_statement .)
    SCONST          reduce using rule 116 (statement -> jump_statement .)
    RBRACE          reduce using rule 116 (statement -> jump_statement .)
    SEMI            reduce using rule 116 (statement -> jump_statement .)
    ELSE            reduce using rule 116 (statement -> jump_statement .)


state 277

    (114) statement -> selection_statement .

    CASE            reduce using rule 114 (statement -> selection_statement .)
    DEFAULT         reduce using rule 114 (statement -> selection_statement .)
    LBRACE          reduce using rule 114 (statement -> selection_statement .)
    IF              reduce using rule 114 (statement -> selection_statement .)
    SWITCH          reduce using rule 114 (statement -> selection_statement .)
    WHILE           reduce using rule 114 (statement -> selection_statement .)
    FOR             reduce using rule 114 (statement -> selection_statement .)
    DO              reduce using rule 114 (statement -> selection_statement .)
    GOTO            reduce using rule 114 (statement -> selection_statement .)
    CONTINUE        reduce using rule 114 (statement -> selection_statement .)
    BREAK           reduce using rule 114 (statement -> selection_statement .)
    RETURN          reduce using rule 114 (statement -> selection_statement .)
    ID              reduce using rule 114 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 114 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 114 (statement -> selection_statement .)
    SIZEOF          reduce using rule 114 (statement -> selection_statement .)
    AND             reduce using rule 114 (statement -> selection_statement .)
    TIMES           reduce using rule 114 (statement -> selection_statement .)
    PLUS            reduce using rule 114 (statement -> selection_statement .)
    MINUS           reduce using rule 114 (statement -> selection_statement .)
    NOT             reduce using rule 114 (statement -> selection_statement .)
    LNOT            reduce using rule 114 (statement -> selection_statement .)
    LPAREN          reduce using rule 114 (statement -> selection_statement .)
    ICONST          reduce using rule 114 (statement -> selection_statement .)
    FCONST          reduce using rule 114 (statement -> selection_statement .)
    CCONST          reduce using rule 114 (statement -> selection_statement .)
    SCONST          reduce using rule 114 (statement -> selection_statement .)
    RBRACE          reduce using rule 114 (statement -> selection_statement .)
    SEMI            reduce using rule 114 (statement -> selection_statement .)
    ELSE            reduce using rule 114 (statement -> selection_statement .)


state 278

    (121) compound_statement -> LBRACE enter_scope insert_mode declaration_list . lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> LBRACE enter_scope insert_mode declaration_list . lookup_mode leave_scope RBRACE
    (15) declaration_list -> declaration_list . declaration
    (215) lookup_mode -> . empty
    (12) declaration -> . declaration_specifiers init_declarator_list SEMI
    (13) declaration -> . declaration_specifiers SEMI
    (210) empty -> .
    (16) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (17) declaration_specifiers -> . type_specifier declaration_specifiers
    (18) declaration_specifiers -> . type_qualifier declaration_specifiers
    (19) declaration_specifiers -> . storage_class_specifier
    (20) declaration_specifiers -> . type_specifier
    (21) declaration_specifiers -> . type_qualifier
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (24) storage_class_specifier -> . STATIC
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . TYPEDEF
    (27) type_specifier -> . VOID
    (28) type_specifier -> . CHAR
    (29) type_specifier -> . SHORT
    (30) type_specifier -> . INT
    (31) type_specifier -> . LONG
    (32) type_specifier -> . FLOAT
    (33) type_specifier -> . DOUBLE
    (34) type_specifier -> . SIGNED
    (35) type_specifier -> . UNSIGNED
    (36) type_specifier -> . struct_or_union_specifier
    (37) type_specifier -> . enum_specifier
    (38) type_specifier -> . TYPEID
    (39) type_qualifier -> . CONST
    (40) type_qualifier -> . VOLATILE
    (41) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (42) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (43) struct_or_union_specifier -> . struct_or_union identifier
    (62) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (63) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (64) enum_specifier -> . ENUM identifier
    (44) struct_or_union -> . STRUCT
    (45) struct_or_union -> . UNION

    CASE            reduce using rule 210 (empty -> .)
    DEFAULT         reduce using rule 210 (empty -> .)
    LBRACE          reduce using rule 210 (empty -> .)
    IF              reduce using rule 210 (empty -> .)
    SWITCH          reduce using rule 210 (empty -> .)
    WHILE           reduce using rule 210 (empty -> .)
    FOR             reduce using rule 210 (empty -> .)
    DO              reduce using rule 210 (empty -> .)
    GOTO            reduce using rule 210 (empty -> .)
    CONTINUE        reduce using rule 210 (empty -> .)
    BREAK           reduce using rule 210 (empty -> .)
    RETURN          reduce using rule 210 (empty -> .)
    ID              reduce using rule 210 (empty -> .)
    PLUSPLUS        reduce using rule 210 (empty -> .)
    MINUSMINUS      reduce using rule 210 (empty -> .)
    SIZEOF          reduce using rule 210 (empty -> .)
    AND             reduce using rule 210 (empty -> .)
    TIMES           reduce using rule 210 (empty -> .)
    PLUS            reduce using rule 210 (empty -> .)
    MINUS           reduce using rule 210 (empty -> .)
    NOT             reduce using rule 210 (empty -> .)
    LNOT            reduce using rule 210 (empty -> .)
    LPAREN          reduce using rule 210 (empty -> .)
    ICONST          reduce using rule 210 (empty -> .)
    FCONST          reduce using rule 210 (empty -> .)
    CCONST          reduce using rule 210 (empty -> .)
    SCONST          reduce using rule 210 (empty -> .)
    RBRACE          reduce using rule 210 (empty -> .)
    SEMI            reduce using rule 210 (empty -> .)
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 40
    STATIC          shift and go to state 5
    EXTERN          shift and go to state 2
    TYPEDEF         shift and go to state 21
    VOID            shift and go to state 16
    CHAR            shift and go to state 32
    SHORT           shift and go to state 3
    INT             shift and go to state 27
    LONG            shift and go to state 1
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    SIGNED          shift and go to state 8
    UNSIGNED        shift and go to state 39
    TYPEID          shift and go to state 18
    CONST           shift and go to state 17
    VOLATILE        shift and go to state 6
    ENUM            shift and go to state 38
    STRUCT          shift and go to state 37
    UNION           shift and go to state 34

    enum_specifier                 shift and go to state 14
    type_qualifier                 shift and go to state 15
    struct_or_union_specifier      shift and go to state 10
    declaration_specifiers         shift and go to state 102
    declaration                    shift and go to state 176
    storage_class_specifier        shift and go to state 24
    lookup_mode                    shift and go to state 320
    empty                          shift and go to state 319
    struct_or_union                shift and go to state 26
    type_specifier                 shift and go to state 20

state 279

    (52) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .

    RBRACE          reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOID            reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CHAR            reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SHORT           reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    INT             reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    LONG            reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    FLOAT           reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    DOUBLE          reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SIGNED          reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNSIGNED        reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    TYPEID          reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CONST           reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOLATILE        reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    ENUM            reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    STRUCT          reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNION           reduce using rule 52 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)


state 280

    (58) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (59) struct_declarator -> . declarator
    (60) struct_declarator -> . declarator COLON constant_expression
    (61) struct_declarator -> . COLON constant_expression
    (69) declarator -> . pointer direct_declarator
    (70) declarator -> . direct_declarator
    (77) pointer -> . TIMES type_qualifier_list
    (78) pointer -> . TIMES
    (79) pointer -> . TIMES type_qualifier_list pointer
    (80) pointer -> . TIMES pointer
    (71) direct_declarator -> . identifier
    (72) direct_declarator -> . LPAREN declarator RPAREN
    (73) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (74) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (75) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (76) direct_declarator -> . direct_declarator LPAREN RPAREN
    (209) identifier -> . ID

    COLON           shift and go to state 187
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 12
    ID              shift and go to state 31

    pointer                        shift and go to state 33
    declarator                     shift and go to state 186
    identifier                     shift and go to state 41
    direct_declarator              shift and go to state 4
    struct_declarator              shift and go to state 321

state 281

    (60) struct_declarator -> declarator COLON . constant_expression
    (154) constant_expression -> . conditional_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    constant_expression            shift and go to state 322
    conditional_expression         shift and go to state 70
    identifier                     shift and go to state 93

state 282

    (61) struct_declarator -> COLON constant_expression .

    SEMI            reduce using rule 61 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 61 (struct_declarator -> COLON constant_expression .)


state 283

    (41) struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .

    AUTO            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    TYPEID          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    ID              reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)


state 284

    (92) initializer -> LBRACE initializer_list . RBRACE
    (93) initializer -> LBRACE initializer_list . COMMA RBRACE
    (95) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 324
    COMMA           shift and go to state 323


state 285

    (94) initializer_list -> initializer .

    RBRACE          reduce using rule 94 (initializer_list -> initializer .)
    COMMA           reduce using rule 94 (initializer_list -> initializer .)


state 286

    (8) function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .

    AUTO            reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    REGISTER        reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    STATIC          reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    EXTERN          reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    TYPEDEF         reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    VOID            reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    CHAR            reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    SHORT           reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    INT             reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    LONG            reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    FLOAT           reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    DOUBLE          reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    SIGNED          reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    UNSIGNED        reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    TYPEID          reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    CONST           reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    VOLATILE        reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    TIMES           reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    LPAREN          reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    ENUM            reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    ID              reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    STRUCT          reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    UNION           reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)
    $end            reduce using rule 8 (function_definition -> declaration_specifiers declarator enter_function_scope declaration_list compound_statement .)


state 287

    (66) enumerator_list -> enumerator_list COMMA enumerator .

    RBRACE          reduce using rule 66 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 66 (enumerator_list -> enumerator_list COMMA enumerator .)


state 288

    (68) enumerator -> identifier EQUALS constant_expression .

    RBRACE          reduce using rule 68 (enumerator -> identifier EQUALS constant_expression .)
    COMMA           reduce using rule 68 (enumerator -> identifier EQUALS constant_expression .)


state 289

    (62) enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .

    AUTO            reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    TYPEDEF         reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    TYPEID          reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    ID              reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 62 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)


state 290

    (191) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 191 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 291

    (205) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    assignment_expression          shift and go to state 325

state 292

    (192) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMESEQUAL      reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVEQUAL        reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 192 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 293

    (142) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 142 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 142 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 142 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 142 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 142 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 142 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 294

    (140) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 140 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 140 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 140 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 140 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 140 (expression -> expression COMMA assignment_expression .)


state 295

    (177) cast_expression -> LPAREN type_name RPAREN cast_expression .

    CONDOP          reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMES           reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE              reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMESEQUAL      reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQUAL        reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 177 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 296

    (156) conditional_expression -> binary_expression CONDOP expression COLON . conditional_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    LPAREN          shift and go to state 77
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 73
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    string_literal                 shift and go to state 76
    conditional_expression         shift and go to state 326
    identifier                     shift and go to state 93

state 297

    (183) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUALS          reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE              reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE              reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE              reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 183 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 298

    (104) direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET .

    LBRACKET        reduce using rule 104 (direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET .)
    LPAREN          reduce using rule 104 (direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET .)
    RPAREN          reduce using rule 104 (direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET .)
    COMMA           reduce using rule 104 (direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET .)


state 299

    (102) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 102 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 102 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 102 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 102 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 300

    (106) direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN .

    LBRACKET        reduce using rule 106 (direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN .)
    LPAREN          reduce using rule 106 (direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN .)
    RPAREN          reduce using rule 106 (direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN .)
    COMMA           reduce using rule 106 (direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN .)


state 301

    (103) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option . RBRACKET

    RBRACKET        shift and go to state 327


state 302

    (105) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option . RPAREN

    RPAREN          shift and go to state 328


state 303

    (120) expression_statement -> expression_option SEMI .

    CASE            reduce using rule 120 (expression_statement -> expression_option SEMI .)
    DEFAULT         reduce using rule 120 (expression_statement -> expression_option SEMI .)
    LBRACE          reduce using rule 120 (expression_statement -> expression_option SEMI .)
    IF              reduce using rule 120 (expression_statement -> expression_option SEMI .)
    SWITCH          reduce using rule 120 (expression_statement -> expression_option SEMI .)
    WHILE           reduce using rule 120 (expression_statement -> expression_option SEMI .)
    FOR             reduce using rule 120 (expression_statement -> expression_option SEMI .)
    DO              reduce using rule 120 (expression_statement -> expression_option SEMI .)
    GOTO            reduce using rule 120 (expression_statement -> expression_option SEMI .)
    CONTINUE        reduce using rule 120 (expression_statement -> expression_option SEMI .)
    BREAK           reduce using rule 120 (expression_statement -> expression_option SEMI .)
    RETURN          reduce using rule 120 (expression_statement -> expression_option SEMI .)
    ID              reduce using rule 120 (expression_statement -> expression_option SEMI .)
    PLUSPLUS        reduce using rule 120 (expression_statement -> expression_option SEMI .)
    MINUSMINUS      reduce using rule 120 (expression_statement -> expression_option SEMI .)
    SIZEOF          reduce using rule 120 (expression_statement -> expression_option SEMI .)
    AND             reduce using rule 120 (expression_statement -> expression_option SEMI .)
    TIMES           reduce using rule 120 (expression_statement -> expression_option SEMI .)
    PLUS            reduce using rule 120 (expression_statement -> expression_option SEMI .)
    MINUS           reduce using rule 120 (expression_statement -> expression_option SEMI .)
    NOT             reduce using rule 120 (expression_statement -> expression_option SEMI .)
    LNOT            reduce using rule 120 (expression_statement -> expression_option SEMI .)
    LPAREN          reduce using rule 120 (expression_statement -> expression_option SEMI .)
    ICONST          reduce using rule 120 (expression_statement -> expression_option SEMI .)
    FCONST          reduce using rule 120 (expression_statement -> expression_option SEMI .)
    CCONST          reduce using rule 120 (expression_statement -> expression_option SEMI .)
    SCONST          reduce using rule 120 (expression_statement -> expression_option SEMI .)
    RBRACE          reduce using rule 120 (expression_statement -> expression_option SEMI .)
    SEMI            reduce using rule 120 (expression_statement -> expression_option SEMI .)
    ELSE            reduce using rule 120 (expression_statement -> expression_option SEMI .)


state 304

    (127) selection_statement -> IF LPAREN . expression RPAREN statement
    (128) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    expression                     shift and go to state 329
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    assignment_expression          shift and go to state 139
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    cast_expression                shift and go to state 81

state 305

    (132) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 330


state 306

    (136) jump_statement -> RETURN expression_option . SEMI

    SEMI            shift and go to state 331


state 307

    (122) compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope . RBRACE

    RBRACE          shift and go to state 332


state 308

    (214) leave_scope -> empty .
    (137) expression_option -> empty .

    RBRACE          reduce using rule 214 (leave_scope -> empty .)
    SEMI            reduce using rule 137 (expression_option -> empty .)


state 309

    (126) statement_list -> statement_list statement .

    CASE            reduce using rule 126 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 126 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 126 (statement_list -> statement_list statement .)
    IF              reduce using rule 126 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 126 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 126 (statement_list -> statement_list statement .)
    FOR             reduce using rule 126 (statement_list -> statement_list statement .)
    DO              reduce using rule 126 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 126 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 126 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 126 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 126 (statement_list -> statement_list statement .)
    ID              reduce using rule 126 (statement_list -> statement_list statement .)
    PLUSPLUS        reduce using rule 126 (statement_list -> statement_list statement .)
    MINUSMINUS      reduce using rule 126 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 126 (statement_list -> statement_list statement .)
    AND             reduce using rule 126 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 126 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 126 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 126 (statement_list -> statement_list statement .)
    NOT             reduce using rule 126 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 126 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 126 (statement_list -> statement_list statement .)
    ICONST          reduce using rule 126 (statement_list -> statement_list statement .)
    FCONST          reduce using rule 126 (statement_list -> statement_list statement .)
    CCONST          reduce using rule 126 (statement_list -> statement_list statement .)
    SCONST          reduce using rule 126 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 126 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 126 (statement_list -> statement_list statement .)


state 310

    (129) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    expression                     shift and go to state 333
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    assignment_expression          shift and go to state 139
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    cast_expression                shift and go to state 81

state 311

    (131) iteration_statement -> FOR LPAREN . expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    expression                     shift and go to state 262
    expression_option              shift and go to state 334
    cast_expression                shift and go to state 81
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    assignment_expression          shift and go to state 139

state 312

    (135) jump_statement -> BREAK SEMI .

    CASE            reduce using rule 135 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 135 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 135 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 135 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 135 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 135 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 135 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 135 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 135 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 135 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 135 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 135 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 135 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 135 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 135 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 135 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 135 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 135 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 135 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 135 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 135 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 135 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 135 (jump_statement -> BREAK SEMI .)
    ICONST          reduce using rule 135 (jump_statement -> BREAK SEMI .)
    FCONST          reduce using rule 135 (jump_statement -> BREAK SEMI .)
    CCONST          reduce using rule 135 (jump_statement -> BREAK SEMI .)
    SCONST          reduce using rule 135 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 135 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 135 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 135 (jump_statement -> BREAK SEMI .)


state 313

    (130) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    expression                     shift and go to state 335
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    assignment_expression          shift and go to state 139
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    cast_expression                shift and go to state 81

state 314

    (119) labeled_statement -> DEFAULT COLON . statement
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    statement                      shift and go to state 336
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    jump_statement                 shift and go to state 276
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 315

    (118) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 337


state 316

    (133) jump_statement -> GOTO identifier . SEMI

    SEMI            shift and go to state 338


state 317

    (134) jump_statement -> CONTINUE SEMI .

    CASE            reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    ID              reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    AND             reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    ICONST          reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    FCONST          reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    CCONST          reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    SCONST          reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 134 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 134 (jump_statement -> CONTINUE SEMI .)


state 318

    (117) labeled_statement -> identifier COLON . statement
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    statement                      shift and go to state 339
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    jump_statement                 shift and go to state 276
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 319

    (215) lookup_mode -> empty .

    CASE            reduce using rule 215 (lookup_mode -> empty .)
    DEFAULT         reduce using rule 215 (lookup_mode -> empty .)
    LBRACE          reduce using rule 215 (lookup_mode -> empty .)
    IF              reduce using rule 215 (lookup_mode -> empty .)
    SWITCH          reduce using rule 215 (lookup_mode -> empty .)
    WHILE           reduce using rule 215 (lookup_mode -> empty .)
    FOR             reduce using rule 215 (lookup_mode -> empty .)
    DO              reduce using rule 215 (lookup_mode -> empty .)
    GOTO            reduce using rule 215 (lookup_mode -> empty .)
    CONTINUE        reduce using rule 215 (lookup_mode -> empty .)
    BREAK           reduce using rule 215 (lookup_mode -> empty .)
    RETURN          reduce using rule 215 (lookup_mode -> empty .)
    ID              reduce using rule 215 (lookup_mode -> empty .)
    PLUSPLUS        reduce using rule 215 (lookup_mode -> empty .)
    MINUSMINUS      reduce using rule 215 (lookup_mode -> empty .)
    SIZEOF          reduce using rule 215 (lookup_mode -> empty .)
    AND             reduce using rule 215 (lookup_mode -> empty .)
    TIMES           reduce using rule 215 (lookup_mode -> empty .)
    PLUS            reduce using rule 215 (lookup_mode -> empty .)
    MINUS           reduce using rule 215 (lookup_mode -> empty .)
    NOT             reduce using rule 215 (lookup_mode -> empty .)
    LNOT            reduce using rule 215 (lookup_mode -> empty .)
    LPAREN          reduce using rule 215 (lookup_mode -> empty .)
    ICONST          reduce using rule 215 (lookup_mode -> empty .)
    FCONST          reduce using rule 215 (lookup_mode -> empty .)
    CCONST          reduce using rule 215 (lookup_mode -> empty .)
    SCONST          reduce using rule 215 (lookup_mode -> empty .)
    RBRACE          reduce using rule 215 (lookup_mode -> empty .)
    SEMI            reduce using rule 215 (lookup_mode -> empty .)


state 320

    (121) compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode . statement_list leave_scope RBRACE
    (123) compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode . leave_scope RBRACE
    (125) statement_list -> . statement
    (126) statement_list -> . statement_list statement
    (214) leave_scope -> . empty
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (210) empty -> .
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    RBRACE          reduce using rule 210 (empty -> .)
    SEMI            reduce using rule 210 (empty -> .)
    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    leave_scope                    shift and go to state 340
    jump_statement                 shift and go to state 276
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 308
    statement                      shift and go to state 273
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    statement_list                 shift and go to state 341
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 321

    (58) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMI            reduce using rule 58 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 58 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 322

    (60) struct_declarator -> declarator COLON constant_expression .

    SEMI            reduce using rule 60 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 60 (struct_declarator -> declarator COLON constant_expression .)


state 323

    (93) initializer -> LBRACE initializer_list COMMA . RBRACE
    (95) initializer_list -> initializer_list COMMA . initializer
    (91) initializer -> . assignment_expression
    (92) initializer -> . LBRACE initializer_list RBRACE
    (93) initializer -> . LBRACE initializer_list COMMA RBRACE
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    RBRACE          shift and go to state 342
    LBRACE          shift and go to state 191
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    initializer                    shift and go to state 343
    assignment_expression          shift and go to state 193

state 324

    (92) initializer -> LBRACE initializer_list RBRACE .

    SEMI            reduce using rule 92 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 92 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 92 (initializer -> LBRACE initializer_list RBRACE .)


state 325

    (205) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 205 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 205 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 326

    (156) conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .

    RPAREN          reduce using rule 156 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 156 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    SEMI            reduce using rule 156 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 156 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 156 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 156 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)


state 327

    (103) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET .

    LBRACKET        reduce using rule 103 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET .)
    LPAREN          reduce using rule 103 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET .)
    RPAREN          reduce using rule 103 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET .)
    COMMA           reduce using rule 103 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET .)


state 328

    (105) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN .

    LBRACKET        reduce using rule 105 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN .)
    LPAREN          reduce using rule 105 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN .)
    RPAREN          reduce using rule 105 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN .)
    COMMA           reduce using rule 105 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN .)


state 329

    (127) selection_statement -> IF LPAREN expression . RPAREN statement
    (128) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (140) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 344
    COMMA           shift and go to state 221


state 330

    (132) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 345


state 331

    (136) jump_statement -> RETURN expression_option SEMI .

    CASE            reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    DEFAULT         reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    LBRACE          reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    IF              reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    SWITCH          reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    WHILE           reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    FOR             reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    DO              reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    GOTO            reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    CONTINUE        reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    BREAK           reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    RETURN          reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    ID              reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    PLUSPLUS        reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    MINUSMINUS      reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    SIZEOF          reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    AND             reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    TIMES           reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    PLUS            reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    MINUS           reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    NOT             reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    LNOT            reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    LPAREN          reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    ICONST          reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    FCONST          reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    CCONST          reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    SCONST          reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    RBRACE          reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    SEMI            reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)
    ELSE            reduce using rule 136 (jump_statement -> RETURN expression_option SEMI .)


state 332

    (122) compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .

    CASE            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    DEFAULT         reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    LBRACE          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    IF              reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    SWITCH          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    WHILE           reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    FOR             reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    DO              reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    GOTO            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    CONTINUE        reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    BREAK           reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    RETURN          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    ID              reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    PLUSPLUS        reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    MINUSMINUS      reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    SIZEOF          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    AND             reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    TIMES           reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    PLUS            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    MINUS           reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    NOT             reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    LNOT            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    LPAREN          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    ICONST          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    FCONST          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    CCONST          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    SCONST          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    RBRACE          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    SEMI            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    ELSE            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    AUTO            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    REGISTER        reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    STATIC          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    EXTERN          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    TYPEDEF         reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    VOID            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    CHAR            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    SHORT           reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    INT             reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    LONG            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    FLOAT           reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    DOUBLE          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    SIGNED          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    UNSIGNED        reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    TYPEID          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    CONST           reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    VOLATILE        reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    ENUM            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    STRUCT          reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    UNION           reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)
    $end            reduce using rule 122 (compound_statement -> LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE .)


state 333

    (129) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (140) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 346
    COMMA           shift and go to state 221


state 334

    (131) iteration_statement -> FOR LPAREN expression_option . SEMI expression_option SEMI expression_option RPAREN statement

    SEMI            shift and go to state 347


state 335

    (130) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (140) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 348
    COMMA           shift and go to state 221


state 336

    (119) labeled_statement -> DEFAULT COLON statement .

    CASE            reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    ID              reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    PLUSPLUS        reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    MINUSMINUS      reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    AND             reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    LNOT            reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    ICONST          reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    FCONST          reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    CCONST          reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    SCONST          reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    RBRACE          reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 119 (labeled_statement -> DEFAULT COLON statement .)


state 337

    (118) labeled_statement -> CASE constant_expression COLON . statement
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    jump_statement                 shift and go to state 276
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    statement                      shift and go to state 349
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 338

    (133) jump_statement -> GOTO identifier SEMI .

    CASE            reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    DEFAULT         reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    LBRACE          reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    IF              reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    SWITCH          reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    WHILE           reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    FOR             reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    DO              reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    GOTO            reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    CONTINUE        reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    BREAK           reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    RETURN          reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    ID              reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    PLUSPLUS        reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    MINUSMINUS      reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    SIZEOF          reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    AND             reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    TIMES           reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    PLUS            reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    MINUS           reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    NOT             reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    LNOT            reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    LPAREN          reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    ICONST          reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    FCONST          reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    CCONST          reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    SCONST          reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    RBRACE          reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    SEMI            reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)
    ELSE            reduce using rule 133 (jump_statement -> GOTO identifier SEMI .)


state 339

    (117) labeled_statement -> identifier COLON statement .

    CASE            reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    DEFAULT         reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    LBRACE          reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    IF              reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    SWITCH          reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    WHILE           reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    FOR             reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    DO              reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    GOTO            reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    CONTINUE        reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    BREAK           reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    RETURN          reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    ID              reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    PLUSPLUS        reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    MINUSMINUS      reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    SIZEOF          reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    AND             reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    TIMES           reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    PLUS            reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    MINUS           reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    NOT             reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    LNOT            reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    LPAREN          reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    ICONST          reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    FCONST          reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    CCONST          reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    SCONST          reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    RBRACE          reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    SEMI            reduce using rule 117 (labeled_statement -> identifier COLON statement .)
    ELSE            reduce using rule 117 (labeled_statement -> identifier COLON statement .)


state 340

    (123) compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope . RBRACE

    RBRACE          shift and go to state 350


state 341

    (121) compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list . leave_scope RBRACE
    (126) statement_list -> statement_list . statement
    (214) leave_scope -> . empty
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (210) empty -> .
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    RBRACE          reduce using rule 210 (empty -> .)
    SEMI            reduce using rule 210 (empty -> .)
    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    leave_scope                    shift and go to state 351
    jump_statement                 shift and go to state 276
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 308
    statement                      shift and go to state 309
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 342

    (93) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMI            reduce using rule 93 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 93 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 93 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 343

    (95) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 95 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 95 (initializer_list -> initializer_list COMMA initializer .)


state 344

    (127) selection_statement -> IF LPAREN expression RPAREN . statement
    (128) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    statement                      shift and go to state 352
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    jump_statement                 shift and go to state 276
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 345

    (132) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    expression                     shift and go to state 353
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    assignment_expression          shift and go to state 139
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    cast_expression                shift and go to state 81

state 346

    (129) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    statement                      shift and go to state 354
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    jump_statement                 shift and go to state 276
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 347

    (131) iteration_statement -> FOR LPAREN expression_option SEMI . expression_option SEMI expression_option RPAREN statement
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    expression                     shift and go to state 262
    expression_option              shift and go to state 355
    cast_expression                shift and go to state 81
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    assignment_expression          shift and go to state 139

state 348

    (130) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    statement                      shift and go to state 356
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    jump_statement                 shift and go to state 276
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 349

    (118) labeled_statement -> CASE constant_expression COLON statement .

    CASE            reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    ID              reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSPLUS        reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSMINUS      reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    AND             reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    LNOT            reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    ICONST          reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    FCONST          reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    CCONST          reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    SCONST          reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    RBRACE          reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 118 (labeled_statement -> CASE constant_expression COLON statement .)


state 350

    (123) compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .

    CASE            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    DEFAULT         reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    LBRACE          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    IF              reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SWITCH          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    WHILE           reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    FOR             reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    DO              reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    GOTO            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    CONTINUE        reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    BREAK           reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    RETURN          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    ID              reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    PLUSPLUS        reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    MINUSMINUS      reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SIZEOF          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    AND             reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    TIMES           reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    PLUS            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    MINUS           reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    NOT             reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    LNOT            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    LPAREN          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    ICONST          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    FCONST          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    CCONST          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SCONST          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    RBRACE          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SEMI            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    ELSE            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    AUTO            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    REGISTER        reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    STATIC          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    EXTERN          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    TYPEDEF         reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    VOID            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    CHAR            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SHORT           reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    INT             reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    LONG            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    FLOAT           reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    DOUBLE          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SIGNED          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    UNSIGNED        reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    TYPEID          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    CONST           reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    VOLATILE        reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    ENUM            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    STRUCT          reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    UNION           reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    $end            reduce using rule 123 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)


state 351

    (121) compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope . RBRACE

    RBRACE          shift and go to state 357


state 352

    (127) selection_statement -> IF LPAREN expression RPAREN statement .
    (128) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    CASE            reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 358

  ! ELSE            [ reduce using rule 127 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 353

    (132) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI
    (140) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 359
    COMMA           shift and go to state 221


state 354

    (129) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    CASE            reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ID              reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AND             reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 129 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 355

    (131) iteration_statement -> FOR LPAREN expression_option SEMI expression_option . SEMI expression_option RPAREN statement

    SEMI            shift and go to state 360


state 356

    (130) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    CASE            reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 130 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 357

    (121) compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .

    CASE            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    DEFAULT         reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    LBRACE          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    IF              reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    SWITCH          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    WHILE           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    FOR             reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    DO              reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    GOTO            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    CONTINUE        reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    BREAK           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    RETURN          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    ID              reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    PLUSPLUS        reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    MINUSMINUS      reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    SIZEOF          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    AND             reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    TIMES           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    PLUS            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    MINUS           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    NOT             reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    LNOT            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    LPAREN          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    ICONST          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    FCONST          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    CCONST          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    SCONST          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    RBRACE          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    SEMI            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    ELSE            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    AUTO            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    REGISTER        reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    STATIC          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    EXTERN          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    TYPEDEF         reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    VOID            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    CHAR            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    SHORT           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    INT             reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    LONG            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    FLOAT           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    DOUBLE          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    SIGNED          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    UNSIGNED        reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    TYPEID          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    CONST           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    VOLATILE        reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    ENUM            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    STRUCT          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    UNION           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)
    $end            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE .)


state 358

    (128) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    statement                      shift and go to state 361
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    jump_statement                 shift and go to state 276
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 359

    (132) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 362


state 360

    (131) iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI . expression_option RPAREN statement
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (209) identifier -> . ID
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    RPAREN          reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ID              shift and go to state 31
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    unary_expression               shift and go to state 135
    string_literal                 shift and go to state 76
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    expression                     shift and go to state 262
    expression_option              shift and go to state 363
    cast_expression                shift and go to state 81
    binary_expression              shift and go to state 84
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 93
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    assignment_expression          shift and go to state 139

state 361

    (128) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    CASE            reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ICONST          reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FCONST          reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CCONST          reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCONST          reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 128 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 362

    (132) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    CASE            reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    GOTO            reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIZEOF          reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AND             reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ICONST          reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FCONST          reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CCONST          reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SCONST          reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 132 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)


state 363

    (131) iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option . RPAREN statement

    RPAREN          shift and go to state 364


state 364

    (131) iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN . statement
    (111) statement -> . labeled_statement
    (112) statement -> . expression_statement
    (113) statement -> . compound_statement
    (114) statement -> . selection_statement
    (115) statement -> . iteration_statement
    (116) statement -> . jump_statement
    (117) labeled_statement -> . identifier COLON statement
    (118) labeled_statement -> . CASE constant_expression COLON statement
    (119) labeled_statement -> . DEFAULT COLON statement
    (120) expression_statement -> . expression_option SEMI
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode statement_list leave_scope RBRACE
    (122) compound_statement -> . LBRACE enter_scope lookup_mode statement_list leave_scope RBRACE
    (123) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (124) compound_statement -> . LBRACE RBRACE
    (127) selection_statement -> . IF LPAREN expression RPAREN statement
    (128) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (129) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (130) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (131) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (132) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (133) jump_statement -> . GOTO identifier SEMI
    (134) jump_statement -> . CONTINUE SEMI
    (135) jump_statement -> . BREAK SEMI
    (136) jump_statement -> . RETURN expression_option SEMI
    (209) identifier -> . ID
    (137) expression_option -> . empty
    (138) expression_option -> . expression
    (210) empty -> .
    (139) expression -> . assignment_expression
    (140) expression -> . expression COMMA assignment_expression
    (141) assignment_expression -> . conditional_expression
    (142) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (155) conditional_expression -> . binary_expression
    (156) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (178) unary_expression -> . postfix_expression
    (179) unary_expression -> . PLUSPLUS unary_expression
    (180) unary_expression -> . MINUSMINUS unary_expression
    (181) unary_expression -> . unary_operator cast_expression
    (182) unary_expression -> . SIZEOF unary_expression
    (183) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (157) binary_expression -> . binary_expression TIMES binary_expression
    (158) binary_expression -> . binary_expression DIVIDE binary_expression
    (159) binary_expression -> . binary_expression MOD binary_expression
    (160) binary_expression -> . binary_expression PLUS binary_expression
    (161) binary_expression -> . binary_expression MINUS binary_expression
    (162) binary_expression -> . binary_expression RSHIFT binary_expression
    (163) binary_expression -> . binary_expression LSHIFT binary_expression
    (164) binary_expression -> . binary_expression LT binary_expression
    (165) binary_expression -> . binary_expression LE binary_expression
    (166) binary_expression -> . binary_expression GE binary_expression
    (167) binary_expression -> . binary_expression GT binary_expression
    (168) binary_expression -> . binary_expression EQ binary_expression
    (169) binary_expression -> . binary_expression NE binary_expression
    (170) binary_expression -> . binary_expression AND binary_expression
    (171) binary_expression -> . binary_expression OR binary_expression
    (172) binary_expression -> . binary_expression XOR binary_expression
    (173) binary_expression -> . binary_expression LAND binary_expression
    (174) binary_expression -> . binary_expression LOR binary_expression
    (175) binary_expression -> . cast_expression
    (190) postfix_expression -> . primary_expression
    (191) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (192) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (193) postfix_expression -> . postfix_expression LPAREN RPAREN
    (194) postfix_expression -> . postfix_expression PERIOD identifier
    (195) postfix_expression -> . postfix_expression ARROW identifier
    (196) postfix_expression -> . postfix_expression PLUSPLUS
    (197) postfix_expression -> . postfix_expression MINUSMINUS
    (184) unary_operator -> . AND
    (185) unary_operator -> . TIMES
    (186) unary_operator -> . PLUS
    (187) unary_operator -> . MINUS
    (188) unary_operator -> . NOT
    (189) unary_operator -> . LNOT
    (176) cast_expression -> . unary_expression
    (177) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (198) primary_expression -> . identifier
    (199) primary_expression -> . constant
    (200) primary_expression -> . string_literal
    (203) primary_expression -> . LPAREN expression RPAREN
    (206) constant -> . ICONST
    (207) constant -> . FCONST
    (208) constant -> . CCONST
    (201) string_literal -> . SCONST
    (202) string_literal -> . string_literal SCONST

    CASE            shift and go to state 270
    DEFAULT         shift and go to state 269
    LBRACE          shift and go to state 46
    IF              shift and go to state 256
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 267
    FOR             shift and go to state 265
    DO              shift and go to state 258
    GOTO            shift and go to state 272
    CONTINUE        shift and go to state 274
    BREAK           shift and go to state 266
    RETURN          shift and go to state 259
    ID              shift and go to state 31
    SEMI            reduce using rule 210 (empty -> .)
    PLUSPLUS        shift and go to state 68
    MINUSMINUS      shift and go to state 88
    SIZEOF          shift and go to state 87
    AND             shift and go to state 67
    TIMES           shift and go to state 90
    PLUS            shift and go to state 83
    MINUS           shift and go to state 92
    NOT             shift and go to state 75
    LNOT            shift and go to state 72
    LPAREN          shift and go to state 77
    ICONST          shift and go to state 82
    FCONST          shift and go to state 71
    CCONST          shift and go to state 89
    SCONST          shift and go to state 78

    constant                       shift and go to state 80
    cast_expression                shift and go to state 81
    labeled_statement              shift and go to state 263
    compound_statement             shift and go to state 264
    expression_statement           shift and go to state 257
    expression                     shift and go to state 262
    iteration_statement            shift and go to state 268
    conditional_expression         shift and go to state 134
    empty                          shift and go to state 271
    statement                      shift and go to state 365
    unary_expression               shift and go to state 135
    binary_expression              shift and go to state 84
    postfix_expression             shift and go to state 69
    primary_expression             shift and go to state 74
    string_literal                 shift and go to state 76
    expression_option              shift and go to state 255
    unary_operator                 shift and go to state 91
    identifier                     shift and go to state 275
    jump_statement                 shift and go to state 276
    selection_statement            shift and go to state 277
    assignment_expression          shift and go to state 139

state 365

    (131) iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .

    CASE            reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    DEFAULT         reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    LBRACE          reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    IF              reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    SWITCH          reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    WHILE           reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    FOR             reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    DO              reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    GOTO            reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    CONTINUE        reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    BREAK           reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    RETURN          reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    ID              reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    PLUSPLUS        reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    MINUSMINUS      reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    SIZEOF          reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    AND             reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    TIMES           reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    PLUS            reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    MINUS           reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    NOT             reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    LNOT            reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    LPAREN          reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    ICONST          reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    FCONST          reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    CCONST          reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    SCONST          reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    RBRACE          reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    SEMI            reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    ELSE            reduce using rule 131 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AUTO in state 0 resolved as shift
WARNING: shift/reduce conflict for REGISTER in state 0 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 0 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 0 resolved as shift
WARNING: shift/reduce conflict for TYPEDEF in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 0 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 0 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for LONG in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 0 resolved as shift
WARNING: shift/reduce conflict for UNSIGNED in state 0 resolved as shift
WARNING: shift/reduce conflict for TYPEID in state 0 resolved as shift
WARNING: shift/reduce conflict for CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for VOLATILE in state 0 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 0 resolved as shift
WARNING: shift/reduce conflict for UNION in state 0 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 352 resolved as shift
