Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> translation_unit_opt
Rule 2     translation_unit_opt -> external_declaration
Rule 3     translation_unit_opt -> translation_unit external_declaration
Rule 4     external_declaration -> function_definition
Rule 5     external_declaration -> declaration
Rule 6     function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 7     function_definition -> declarator declaration_list compound_statement
Rule 8     function_definition -> declarator compound_statement
Rule 9     function_definition -> declaration_specifiers declarator compound_statement
Rule 10    declaration -> declaration_specifiers init_declarator_list SEMI
Rule 11    declaration -> declaration_specifiers SEMI
Rule 12    declaration_list -> declaration
Rule 13    declaration_list -> declaration_list declaration
Rule 14    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 15    declaration_specifiers -> type_specifier declaration_specifiers
Rule 16    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 17    declaration_specifiers -> storage_class_specifier
Rule 18    declaration_specifiers -> type_specifier
Rule 19    declaration_specifiers -> type_qualifier
Rule 20    storage_class_specifier -> AUTO
Rule 21    storage_class_specifier -> REGISTER
Rule 22    storage_class_specifier -> STATIC
Rule 23    storage_class_specifier -> EXTERN
Rule 24    storage_class_specifier -> TYPEDEF
Rule 25    type_specifier -> VOID
Rule 26    type_specifier -> CHAR
Rule 27    type_specifier -> SHORT
Rule 28    type_specifier -> INT
Rule 29    type_specifier -> LONG
Rule 30    type_specifier -> FLOAT
Rule 31    type_specifier -> DOUBLE
Rule 32    type_specifier -> SIGNED
Rule 33    type_specifier -> UNSIGNED
Rule 34    type_specifier -> struct_or_union_specifier
Rule 35    type_specifier -> enum_specifier
Rule 36    type_specifier -> TYPEID
Rule 37    type_qualifier -> CONST
Rule 38    type_qualifier -> VOLATILE
Rule 39    struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE
Rule 40    struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE
Rule 41    struct_or_union_specifier -> struct_or_union identifier
Rule 42    struct_or_union -> STRUCT
Rule 43    struct_or_union -> UNION
Rule 44    struct_declaration_list -> struct_declaration
Rule 45    struct_declaration_list -> struct_declarator_list struct_declaration
Rule 46    init_declarator_list -> init_declarator
Rule 47    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 48    init_declarator -> declarator
Rule 49    init_declarator -> declarator EQUALS initializer
Rule 50    struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI
Rule 51    specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 52    specifier_qualifier_list -> type_specifier
Rule 53    specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 54    specifier_qualifier_list -> type_qualifier
Rule 55    struct_declarator_list -> struct_declarator
Rule 56    struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 57    struct_declarator -> declarator
Rule 58    struct_declarator -> declarator COLON constant_expression
Rule 59    struct_declarator -> COLON constant_expression
Rule 60    enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE
Rule 61    enum_specifier -> ENUM LBRACE enumerator_list RBRACE
Rule 62    enum_specifier -> ENUM identifier
Rule 63    enumerator_list -> enumerator
Rule 64    enumerator_list -> enumerator_list COMMA enumerator
Rule 65    enumerator -> identifier
Rule 66    enumerator -> identifier EQUALS constant_expression
Rule 67    declarator -> pointer direct_declarator
Rule 68    declarator -> direct_declarator
Rule 69    direct_declarator -> identifier
Rule 70    direct_declarator -> LPAREN declarator RPAREN
Rule 71    direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET
Rule 72    direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 73    direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 74    direct_declarator -> direct_declarator LPAREN RPAREN
Rule 75    pointer -> TIMES type_qualifier_list
Rule 76    pointer -> TIMES
Rule 77    pointer -> TIMES type_qualifier_list pointer
Rule 78    pointer -> TIMES pointer
Rule 79    type_qualifier_list -> type_qualifier
Rule 80    type_qualifier_list -> type_qualifier_list type_qualifier
Rule 81    parameter_type_list -> parameter_list
Rule 82    parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 83    parameter_list -> parameter_declaration
Rule 84    parameter_list -> parameter_list COMMA parameter_declaration
Rule 85    parameter_declaration -> declaration_specifiers declarator
Rule 86    parameter_declaration -> declaration_specifiers abstract_declarator_option
Rule 87    identifier_list -> identifier
Rule 88    identifier_list -> identifier_list COMMA identifier
Rule 89    initializer -> assignment_expression
Rule 90    initializer -> LBRACE initializer_list RBRACE
Rule 91    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 92    initializer_list -> initializer
Rule 93    initializer_list -> initializer_list COMMA initializer
Rule 94    type_name -> specifier_qualifier_list abstract_declarator_option
Rule 95    abstract_declarator_option -> empty
Rule 96    abstract_declarator_option -> abstract_declarator
Rule 97    abstract_declarator -> pointer
Rule 98    abstract_declarator -> pointer direct_abstract_declarator
Rule 99    abstract_declarator -> direct_abstract_declarator
Rule 100   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 101   direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
Rule 102   direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET
Rule 103   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
Rule 104   direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN
Rule 105   constant_expression_option -> empty
Rule 106   constant_expression_option -> constant_expression
Rule 107   parameter_type_list_option -> empty
Rule 108   parameter_type_list_option -> parameter_type_list
Rule 109   statement -> labeled_statement
Rule 110   statement -> expression_statement
Rule 111   statement -> compound_statement
Rule 112   statement -> selection_statement
Rule 113   statement -> iteration_statement
Rule 114   statement -> jump_statement
Rule 115   labeled_statement -> identifier COLON statement
Rule 116   labeled_statement -> CASE constant_expression COLON statement
Rule 117   labeled_statement -> DEFAULT COLON statement
Rule 118   expression_statement -> expression_option SEMI
Rule 119   compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
Rule 120   compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
Rule 121   compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
Rule 122   compound_statement -> LBRACE RBRACE
Rule 123   statement_list -> statement
Rule 124   statement_list -> statement_list statement
Rule 125   selection_statement -> IF LPAREN expression RPAREN statement
Rule 126   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 127   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 128   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 129   iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
Rule 130   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 131   jump_statement -> GOTO identifier SEMI
Rule 132   jump_statement -> CONTINUE SEMI
Rule 133   jump_statement -> BREAK SEMI
Rule 134   jump_statement -> RETURN expression_option SEMI
Rule 135   expression_option -> empty
Rule 136   expression_option -> expression
Rule 137   expression -> assignment_expression
Rule 138   expression -> expression COMMA assignment_expression
Rule 139   assignment_expression -> conditional_expression
Rule 140   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 141   assignment_operator -> EQUALS
Rule 142   assignment_operator -> TIMESEQUAL
Rule 143   assignment_operator -> DIVEQUAL
Rule 144   assignment_operator -> MODEQUAL
Rule 145   assignment_operator -> PLUSEQUAL
Rule 146   assignment_operator -> MINUSEQUAL
Rule 147   assignment_operator -> LSHIFTEQUAL
Rule 148   assignment_operator -> RSHIFTEQUAL
Rule 149   assignment_operator -> ANDEQUAL
Rule 150   assignment_operator -> OREQUAL
Rule 151   assignment_operator -> XOREQUAL
Rule 152   conditional_expression -> logical_or_expression
Rule 153   conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression
Rule 154   constant_expression -> conditional_expression
Rule 155   logical_or_expression -> logical_and_expression
Rule 156   logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 157   logical_and_expression -> inclusive_or_expression
Rule 158   logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 159   inclusive_or_expression -> exclusive_or_expression
Rule 160   inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 161   exclusive_or_expression -> and_expression
Rule 162   exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 163   and_expression -> equality_expression
Rule 164   and_expression -> and_expression AND equality_expression
Rule 165   equality_expression -> relational_expression
Rule 166   equality_expression -> equality_expression EQ relational_expression
Rule 167   equality_expression -> equality_expression NE relational_expression
Rule 168   relational_expression -> shift_expression
Rule 169   relational_expression -> relational_expression LT shift_expression
Rule 170   relational_expression -> relational_expression GT shift_expression
Rule 171   relational_expression -> relational_expression LE shift_expression
Rule 172   relational_expression -> relational_expression GE shift_expression
Rule 173   shift_expression -> additive_expression
Rule 174   shift_expression -> shift_expression LSHIFT additive_expression
Rule 175   shift_expression -> shift_expression RSHIFT additive_expression
Rule 176   additive_expression -> multiplicative_expression
Rule 177   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 178   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 179   multiplicative_expression -> cast_expression
Rule 180   multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 181   multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 182   multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 183   cast_expression -> unary_expression
Rule 184   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 185   unary_expression -> postfix_expression
Rule 186   unary_expression -> PLUSPLUS unary_expression
Rule 187   unary_expression -> MINUSMINUS unary_expression
Rule 188   unary_expression -> unary_operator cast_expression
Rule 189   unary_expression -> SIZEOF unary_expression
Rule 190   unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 191   unary_operator -> AND
Rule 192   unary_operator -> TIMES
Rule 193   unary_operator -> PLUS
Rule 194   unary_operator -> MINUS
Rule 195   unary_operator -> NOT
Rule 196   unary_operator -> LNOT
Rule 197   postfix_expression -> primary_expression
Rule 198   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 199   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 200   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 201   postfix_expression -> postfix_expression PERIOD identifier
Rule 202   postfix_expression -> postfix_expression ARROW identifier
Rule 203   postfix_expression -> postfix_expression PLUSPLUS
Rule 204   postfix_expression -> postfix_expression MINUSMINUS
Rule 205   primary_expression -> identifier
Rule 206   primary_expression -> constant
Rule 207   primary_expression -> string_literal_list
Rule 208   string_literal_list -> SCONST
Rule 209   string_literal_list -> string_literal_list SCONST
Rule 210   primary_expression -> LPAREN expression RPAREN
Rule 211   argument_expression_list -> assignment_expression
Rule 212   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 213   constant -> ICONST
Rule 214   constant -> FCONST
Rule 215   constant -> CCONST
Rule 216   identifier -> ID
Rule 217   empty -> <empty>
Rule 218   enter_scope -> empty
Rule 219   insert_mode -> empty
Rule 220   leave_scope -> empty
Rule 221   lookup_mode -> empty

Terminals, with rules where they appear

AND                  : 164 191
ANDEQUAL             : 149
ARROW                : 202
AUTO                 : 20
BREAK                : 133
CASE                 : 116
CCONST               : 215
CHAR                 : 26
COLON                : 58 59 115 116 117 153
COMMA                : 47 56 64 82 84 88 91 93 138 212
CONDOP               : 153
CONST                : 37
CONTINUE             : 132
DEFAULT              : 117
DIVEQUAL             : 143
DIVIDE               : 181
DO                   : 130
DOUBLE               : 31
ELLIPSIS             : 82
ELSE                 : 126
ENUM                 : 60 61 62
EQ                   : 166
EQUALS               : 49 66 141
EXTERN               : 23
FCONST               : 214
FLOAT                : 30
FOR                  : 129
GE                   : 172
GOTO                 : 131
GT                   : 170
ICONST               : 213
ID                   : 216
IF                   : 125 126
INT                  : 28
LAND                 : 158
LBRACE               : 39 40 60 61 90 91 119 120 121 122
LBRACKET             : 71 101 102 198
LE                   : 171
LNOT                 : 196
LONG                 : 29
LOR                  : 156
LPAREN               : 70 72 73 74 100 103 104 125 126 127 128 129 130 184 190 199 200 210
LSHIFT               : 174
LSHIFTEQUAL          : 147
LT                   : 169
MINUS                : 178 194
MINUSEQUAL           : 146
MINUSMINUS           : 187 204
MOD                  : 182
MODEQUAL             : 144
NE                   : 167
NOT                  : 195
OR                   : 160
OREQUAL              : 150
PERIOD               : 201
PLUS                 : 177 193
PLUSEQUAL            : 145
PLUSPLUS             : 186 203
RBRACE               : 39 40 60 61 90 91 119 120 121 122
RBRACKET             : 71 101 102 198
REGISTER             : 21
RETURN               : 134
RPAREN               : 70 72 73 74 100 103 104 125 126 127 128 129 130 184 190 199 200 210
RSHIFT               : 175
RSHIFTEQUAL          : 148
SCONST               : 208 209
SEMI                 : 10 11 50 118 129 129 130 131 132 133 134
SHORT                : 27
SIGNED               : 32
SIZEOF               : 189 190
STATIC               : 22
STRUCT               : 42
SWITCH               : 127
TIMES                : 75 76 77 78 180 192
TIMESEQUAL           : 142
TYPEDEF              : 24
TYPEID               : 36
UNION                : 43
UNSIGNED             : 33
VOID                 : 25
VOLATILE             : 38
WHILE                : 128 130
XOR                  : 162
XOREQUAL             : 151
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 96 100
abstract_declarator_option : 86 94
additive_expression  : 173 174 175 177 178
and_expression       : 161 162 164
argument_expression_list : 199 212
assignment_expression : 89 137 138 140 211 212
assignment_operator  : 140
cast_expression      : 179 180 181 182 184 188
compound_statement   : 6 7 8 9 111
conditional_expression : 139 153 154
constant             : 206
constant_expression  : 58 59 66 106 116
constant_expression_option : 71 101 102
declaration          : 5 12 13
declaration_list     : 6 7 13 119 121
declaration_specifiers : 6 9 10 11 14 15 16 85 86
declarator           : 6 7 8 9 48 49 57 58 70 85
direct_abstract_declarator : 98 99 101 103
direct_declarator    : 67 68 71 72 73 74
empty                : 95 105 107 135 218 219 220 221
enter_scope          : 119 120 121
enum_specifier       : 35
enumerator           : 63 64
enumerator_list      : 60 61 64
equality_expression  : 163 164 166 167
exclusive_or_expression : 159 160 162
expression           : 125 126 127 128 130 136 138 153 198 210
expression_option    : 118 129 129 129 134
expression_statement : 110
external_declaration : 2 3
function_definition  : 4
identifier           : 39 41 60 62 65 66 69 87 88 115 131 201 202 205
identifier_list      : 73 88
inclusive_or_expression : 157 158 160
init_declarator      : 46 47
init_declarator_list : 10 47
initializer          : 49 92 93
initializer_list     : 90 91 93
insert_mode          : 119 121
iteration_statement  : 113
jump_statement       : 114
labeled_statement    : 109
leave_scope          : 119 120 121
logical_and_expression : 155 156 158
logical_or_expression : 152 153 156
lookup_mode          : 119 120 121
multiplicative_expression : 176 177 178 180 181 182
parameter_declaration : 83 84
parameter_list       : 81 82 84
parameter_type_list  : 72 108
parameter_type_list_option : 103 104
pointer              : 67 77 78 97 98
postfix_expression   : 185 198 199 200 201 202 203 204
primary_expression   : 197
relational_expression : 165 166 167 169 170 171 172
selection_statement  : 112
shift_expression     : 168 169 170 171 172 174 175
specifier_qualifier_list : 50 51 53 94
statement            : 115 116 117 123 124 125 126 126 127 128 129 130
statement_list       : 119 120 124
storage_class_specifier : 14 17
string_literal_list  : 207 209
struct_declaration   : 44 45
struct_declaration_list : 39 40
struct_declarator    : 55 56
struct_declarator_list : 45 50 56
struct_or_union      : 39 40 41
struct_or_union_specifier : 34
translation_unit     : 3 0
translation_unit_opt : 1
type_name            : 184 190
type_qualifier       : 16 19 53 54 79 80
type_qualifier_list  : 75 77 80
type_specifier       : 15 18 51 52
unary_expression     : 140 183 186 187 189
unary_operator       : 188

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . translation_unit_opt
    (2) translation_unit_opt -> . external_declaration
    (3) translation_unit_opt -> . translation_unit external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (7) function_definition -> . declarator declaration_list compound_statement
    (8) function_definition -> . declarator compound_statement
    (9) function_definition -> . declaration_specifiers declarator compound_statement
    (10) declaration -> . declaration_specifiers init_declarator_list SEMI
    (11) declaration -> . declaration_specifiers SEMI
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (216) identifier -> . ID
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 39
    ENUM            shift and go to state 3
    ID              shift and go to state 10
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration                    shift and go to state 23
    direct_declarator              shift and go to state 24
    identifier                     shift and go to state 27
    enum_specifier                 shift and go to state 4
    pointer                        shift and go to state 28
    struct_or_union                shift and go to state 19
    translation_unit               shift and go to state 30
    translation_unit_opt           shift and go to state 7
    type_qualifier                 shift and go to state 31
    storage_class_specifier        shift and go to state 32
    declaration_specifiers         shift and go to state 11
    external_declaration           shift and go to state 33
    function_definition            shift and go to state 12
    struct_or_union_specifier      shift and go to state 25
    type_specifier                 shift and go to state 21
    declarator                     shift and go to state 38

state 1

    (20) storage_class_specifier -> AUTO .

    AUTO            reduce using rule 20 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 20 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 20 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 20 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 20 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 20 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 20 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 20 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 20 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 20 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 20 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 20 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 20 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 20 (storage_class_specifier -> AUTO .)
    TYPEID          reduce using rule 20 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 20 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 20 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 20 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 20 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 20 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 20 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 20 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 20 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 20 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 20 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 20 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 20 (storage_class_specifier -> AUTO .)


state 2

    (24) storage_class_specifier -> TYPEDEF .

    AUTO            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    TYPEID          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    SEMI            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    LBRACKET        reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)


state 3

    (60) enum_specifier -> ENUM . identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> ENUM . LBRACE enumerator_list RBRACE
    (62) enum_specifier -> ENUM . identifier
    (216) identifier -> . ID

    LBRACE          shift and go to state 40
    ID              shift and go to state 10

    identifier                     shift and go to state 41

state 4

    (35) type_specifier -> enum_specifier .

    AUTO            reduce using rule 35 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 35 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 35 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 35 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 35 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 35 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 35 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 35 (type_specifier -> enum_specifier .)
    INT             reduce using rule 35 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 35 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 35 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 35 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 35 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 35 (type_specifier -> enum_specifier .)
    TYPEID          reduce using rule 35 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 35 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 35 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 35 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 35 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 35 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 35 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 35 (type_specifier -> enum_specifier .)
    ID              reduce using rule 35 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 35 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 35 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 35 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 35 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 35 (type_specifier -> enum_specifier .)


state 5

    (43) struct_or_union -> UNION .

    LBRACE          reduce using rule 43 (struct_or_union -> UNION .)
    ID              reduce using rule 43 (struct_or_union -> UNION .)


state 6

    (28) type_specifier -> INT .

    AUTO            reduce using rule 28 (type_specifier -> INT .)
    REGISTER        reduce using rule 28 (type_specifier -> INT .)
    STATIC          reduce using rule 28 (type_specifier -> INT .)
    EXTERN          reduce using rule 28 (type_specifier -> INT .)
    TYPEDEF         reduce using rule 28 (type_specifier -> INT .)
    VOID            reduce using rule 28 (type_specifier -> INT .)
    CHAR            reduce using rule 28 (type_specifier -> INT .)
    SHORT           reduce using rule 28 (type_specifier -> INT .)
    INT             reduce using rule 28 (type_specifier -> INT .)
    LONG            reduce using rule 28 (type_specifier -> INT .)
    FLOAT           reduce using rule 28 (type_specifier -> INT .)
    DOUBLE          reduce using rule 28 (type_specifier -> INT .)
    SIGNED          reduce using rule 28 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 28 (type_specifier -> INT .)
    TYPEID          reduce using rule 28 (type_specifier -> INT .)
    CONST           reduce using rule 28 (type_specifier -> INT .)
    VOLATILE        reduce using rule 28 (type_specifier -> INT .)
    ENUM            reduce using rule 28 (type_specifier -> INT .)
    STRUCT          reduce using rule 28 (type_specifier -> INT .)
    UNION           reduce using rule 28 (type_specifier -> INT .)
    TIMES           reduce using rule 28 (type_specifier -> INT .)
    LPAREN          reduce using rule 28 (type_specifier -> INT .)
    ID              reduce using rule 28 (type_specifier -> INT .)
    LBRACKET        reduce using rule 28 (type_specifier -> INT .)
    COMMA           reduce using rule 28 (type_specifier -> INT .)
    RPAREN          reduce using rule 28 (type_specifier -> INT .)
    SEMI            reduce using rule 28 (type_specifier -> INT .)
    COLON           reduce using rule 28 (type_specifier -> INT .)


state 7

    (1) translation_unit -> translation_unit_opt .

    AUTO            reduce using rule 1 (translation_unit -> translation_unit_opt .)
    REGISTER        reduce using rule 1 (translation_unit -> translation_unit_opt .)
    STATIC          reduce using rule 1 (translation_unit -> translation_unit_opt .)
    EXTERN          reduce using rule 1 (translation_unit -> translation_unit_opt .)
    TYPEDEF         reduce using rule 1 (translation_unit -> translation_unit_opt .)
    VOID            reduce using rule 1 (translation_unit -> translation_unit_opt .)
    CHAR            reduce using rule 1 (translation_unit -> translation_unit_opt .)
    SHORT           reduce using rule 1 (translation_unit -> translation_unit_opt .)
    INT             reduce using rule 1 (translation_unit -> translation_unit_opt .)
    LONG            reduce using rule 1 (translation_unit -> translation_unit_opt .)
    FLOAT           reduce using rule 1 (translation_unit -> translation_unit_opt .)
    DOUBLE          reduce using rule 1 (translation_unit -> translation_unit_opt .)
    SIGNED          reduce using rule 1 (translation_unit -> translation_unit_opt .)
    UNSIGNED        reduce using rule 1 (translation_unit -> translation_unit_opt .)
    TYPEID          reduce using rule 1 (translation_unit -> translation_unit_opt .)
    CONST           reduce using rule 1 (translation_unit -> translation_unit_opt .)
    VOLATILE        reduce using rule 1 (translation_unit -> translation_unit_opt .)
    TIMES           reduce using rule 1 (translation_unit -> translation_unit_opt .)
    LPAREN          reduce using rule 1 (translation_unit -> translation_unit_opt .)
    ENUM            reduce using rule 1 (translation_unit -> translation_unit_opt .)
    ID              reduce using rule 1 (translation_unit -> translation_unit_opt .)
    STRUCT          reduce using rule 1 (translation_unit -> translation_unit_opt .)
    UNION           reduce using rule 1 (translation_unit -> translation_unit_opt .)
    $end            reduce using rule 1 (translation_unit -> translation_unit_opt .)


state 8

    (42) struct_or_union -> STRUCT .

    LBRACE          reduce using rule 42 (struct_or_union -> STRUCT .)
    ID              reduce using rule 42 (struct_or_union -> STRUCT .)


state 9

    (32) type_specifier -> SIGNED .

    AUTO            reduce using rule 32 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 32 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 32 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 32 (type_specifier -> SIGNED .)
    TYPEDEF         reduce using rule 32 (type_specifier -> SIGNED .)
    VOID            reduce using rule 32 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 32 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 32 (type_specifier -> SIGNED .)
    INT             reduce using rule 32 (type_specifier -> SIGNED .)
    LONG            reduce using rule 32 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 32 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 32 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 32 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 32 (type_specifier -> SIGNED .)
    TYPEID          reduce using rule 32 (type_specifier -> SIGNED .)
    CONST           reduce using rule 32 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 32 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 32 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 32 (type_specifier -> SIGNED .)
    UNION           reduce using rule 32 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 32 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 32 (type_specifier -> SIGNED .)
    ID              reduce using rule 32 (type_specifier -> SIGNED .)
    LBRACKET        reduce using rule 32 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 32 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 32 (type_specifier -> SIGNED .)
    SEMI            reduce using rule 32 (type_specifier -> SIGNED .)
    COLON           reduce using rule 32 (type_specifier -> SIGNED .)


state 10

    (216) identifier -> ID .

    LBRACKET        reduce using rule 216 (identifier -> ID .)
    LPAREN          reduce using rule 216 (identifier -> ID .)
    PERIOD          reduce using rule 216 (identifier -> ID .)
    ARROW           reduce using rule 216 (identifier -> ID .)
    PLUSPLUS        reduce using rule 216 (identifier -> ID .)
    MINUSMINUS      reduce using rule 216 (identifier -> ID .)
    EQUALS          reduce using rule 216 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 216 (identifier -> ID .)
    DIVEQUAL        reduce using rule 216 (identifier -> ID .)
    MODEQUAL        reduce using rule 216 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 216 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 216 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 216 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 216 (identifier -> ID .)
    ANDEQUAL        reduce using rule 216 (identifier -> ID .)
    OREQUAL         reduce using rule 216 (identifier -> ID .)
    XOREQUAL        reduce using rule 216 (identifier -> ID .)
    TIMES           reduce using rule 216 (identifier -> ID .)
    DIVIDE          reduce using rule 216 (identifier -> ID .)
    MOD             reduce using rule 216 (identifier -> ID .)
    PLUS            reduce using rule 216 (identifier -> ID .)
    MINUS           reduce using rule 216 (identifier -> ID .)
    LSHIFT          reduce using rule 216 (identifier -> ID .)
    RSHIFT          reduce using rule 216 (identifier -> ID .)
    LT              reduce using rule 216 (identifier -> ID .)
    GT              reduce using rule 216 (identifier -> ID .)
    LE              reduce using rule 216 (identifier -> ID .)
    GE              reduce using rule 216 (identifier -> ID .)
    EQ              reduce using rule 216 (identifier -> ID .)
    NE              reduce using rule 216 (identifier -> ID .)
    AND             reduce using rule 216 (identifier -> ID .)
    XOR             reduce using rule 216 (identifier -> ID .)
    OR              reduce using rule 216 (identifier -> ID .)
    LAND            reduce using rule 216 (identifier -> ID .)
    CONDOP          reduce using rule 216 (identifier -> ID .)
    LOR             reduce using rule 216 (identifier -> ID .)
    COMMA           reduce using rule 216 (identifier -> ID .)
    SEMI            reduce using rule 216 (identifier -> ID .)
    COLON           reduce using rule 216 (identifier -> ID .)
    VOID            reduce using rule 216 (identifier -> ID .)
    CHAR            reduce using rule 216 (identifier -> ID .)
    SHORT           reduce using rule 216 (identifier -> ID .)
    INT             reduce using rule 216 (identifier -> ID .)
    LONG            reduce using rule 216 (identifier -> ID .)
    FLOAT           reduce using rule 216 (identifier -> ID .)
    DOUBLE          reduce using rule 216 (identifier -> ID .)
    SIGNED          reduce using rule 216 (identifier -> ID .)
    UNSIGNED        reduce using rule 216 (identifier -> ID .)
    TYPEID          reduce using rule 216 (identifier -> ID .)
    CONST           reduce using rule 216 (identifier -> ID .)
    VOLATILE        reduce using rule 216 (identifier -> ID .)
    ENUM            reduce using rule 216 (identifier -> ID .)
    STRUCT          reduce using rule 216 (identifier -> ID .)
    UNION           reduce using rule 216 (identifier -> ID .)
    RPAREN          reduce using rule 216 (identifier -> ID .)
    RBRACKET        reduce using rule 216 (identifier -> ID .)
    RBRACE          reduce using rule 216 (identifier -> ID .)
    LBRACE          reduce using rule 216 (identifier -> ID .)
    AUTO            reduce using rule 216 (identifier -> ID .)
    REGISTER        reduce using rule 216 (identifier -> ID .)
    STATIC          reduce using rule 216 (identifier -> ID .)
    EXTERN          reduce using rule 216 (identifier -> ID .)
    TYPEDEF         reduce using rule 216 (identifier -> ID .)
    ID              reduce using rule 216 (identifier -> ID .)


state 11

    (6) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (9) function_definition -> declaration_specifiers . declarator compound_statement
    (10) declaration -> declaration_specifiers . init_declarator_list SEMI
    (11) declaration -> declaration_specifiers . SEMI
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (46) init_declarator_list -> . init_declarator
    (47) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (48) init_declarator -> . declarator
    (49) init_declarator -> . declarator EQUALS initializer
    (216) identifier -> . ID

    SEMI            shift and go to state 44
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 39
    ID              shift and go to state 10

    direct_declarator              shift and go to state 24
    init_declarator_list           shift and go to state 42
    identifier                     shift and go to state 27
    pointer                        shift and go to state 28
    init_declarator                shift and go to state 45
    declarator                     shift and go to state 43

state 12

    (4) external_declaration -> function_definition .

    AUTO            reduce using rule 4 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 4 (external_declaration -> function_definition .)
    STATIC          reduce using rule 4 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 4 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 4 (external_declaration -> function_definition .)
    VOID            reduce using rule 4 (external_declaration -> function_definition .)
    CHAR            reduce using rule 4 (external_declaration -> function_definition .)
    SHORT           reduce using rule 4 (external_declaration -> function_definition .)
    INT             reduce using rule 4 (external_declaration -> function_definition .)
    LONG            reduce using rule 4 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 4 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 4 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 4 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 4 (external_declaration -> function_definition .)
    CONST           reduce using rule 4 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 4 (external_declaration -> function_definition .)
    TIMES           reduce using rule 4 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 4 (external_declaration -> function_definition .)
    ENUM            reduce using rule 4 (external_declaration -> function_definition .)
    ID              reduce using rule 4 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 4 (external_declaration -> function_definition .)
    UNION           reduce using rule 4 (external_declaration -> function_definition .)
    $end            reduce using rule 4 (external_declaration -> function_definition .)


state 13

    (29) type_specifier -> LONG .

    AUTO            reduce using rule 29 (type_specifier -> LONG .)
    REGISTER        reduce using rule 29 (type_specifier -> LONG .)
    STATIC          reduce using rule 29 (type_specifier -> LONG .)
    EXTERN          reduce using rule 29 (type_specifier -> LONG .)
    TYPEDEF         reduce using rule 29 (type_specifier -> LONG .)
    VOID            reduce using rule 29 (type_specifier -> LONG .)
    CHAR            reduce using rule 29 (type_specifier -> LONG .)
    SHORT           reduce using rule 29 (type_specifier -> LONG .)
    INT             reduce using rule 29 (type_specifier -> LONG .)
    LONG            reduce using rule 29 (type_specifier -> LONG .)
    FLOAT           reduce using rule 29 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 29 (type_specifier -> LONG .)
    SIGNED          reduce using rule 29 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 29 (type_specifier -> LONG .)
    TYPEID          reduce using rule 29 (type_specifier -> LONG .)
    CONST           reduce using rule 29 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 29 (type_specifier -> LONG .)
    ENUM            reduce using rule 29 (type_specifier -> LONG .)
    STRUCT          reduce using rule 29 (type_specifier -> LONG .)
    UNION           reduce using rule 29 (type_specifier -> LONG .)
    TIMES           reduce using rule 29 (type_specifier -> LONG .)
    LPAREN          reduce using rule 29 (type_specifier -> LONG .)
    ID              reduce using rule 29 (type_specifier -> LONG .)
    LBRACKET        reduce using rule 29 (type_specifier -> LONG .)
    COMMA           reduce using rule 29 (type_specifier -> LONG .)
    RPAREN          reduce using rule 29 (type_specifier -> LONG .)
    SEMI            reduce using rule 29 (type_specifier -> LONG .)
    COLON           reduce using rule 29 (type_specifier -> LONG .)


state 14

    (37) type_qualifier -> CONST .

    AUTO            reduce using rule 37 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 37 (type_qualifier -> CONST .)
    STATIC          reduce using rule 37 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 37 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 37 (type_qualifier -> CONST .)
    VOID            reduce using rule 37 (type_qualifier -> CONST .)
    CHAR            reduce using rule 37 (type_qualifier -> CONST .)
    SHORT           reduce using rule 37 (type_qualifier -> CONST .)
    INT             reduce using rule 37 (type_qualifier -> CONST .)
    LONG            reduce using rule 37 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 37 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 37 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 37 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 37 (type_qualifier -> CONST .)
    TYPEID          reduce using rule 37 (type_qualifier -> CONST .)
    CONST           reduce using rule 37 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 37 (type_qualifier -> CONST .)
    ENUM            reduce using rule 37 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 37 (type_qualifier -> CONST .)
    UNION           reduce using rule 37 (type_qualifier -> CONST .)
    SEMI            reduce using rule 37 (type_qualifier -> CONST .)
    TIMES           reduce using rule 37 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 37 (type_qualifier -> CONST .)
    ID              reduce using rule 37 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 37 (type_qualifier -> CONST .)
    COMMA           reduce using rule 37 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 37 (type_qualifier -> CONST .)
    COLON           reduce using rule 37 (type_qualifier -> CONST .)


state 15

    (31) type_specifier -> DOUBLE .

    AUTO            reduce using rule 31 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 31 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 31 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 31 (type_specifier -> DOUBLE .)
    TYPEDEF         reduce using rule 31 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 31 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 31 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 31 (type_specifier -> DOUBLE .)
    INT             reduce using rule 31 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 31 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 31 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 31 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 31 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 31 (type_specifier -> DOUBLE .)
    TYPEID          reduce using rule 31 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 31 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 31 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 31 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 31 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 31 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 31 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 31 (type_specifier -> DOUBLE .)
    ID              reduce using rule 31 (type_specifier -> DOUBLE .)
    LBRACKET        reduce using rule 31 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 31 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 31 (type_specifier -> DOUBLE .)
    SEMI            reduce using rule 31 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 31 (type_specifier -> DOUBLE .)


state 16

    (25) type_specifier -> VOID .

    AUTO            reduce using rule 25 (type_specifier -> VOID .)
    REGISTER        reduce using rule 25 (type_specifier -> VOID .)
    STATIC          reduce using rule 25 (type_specifier -> VOID .)
    EXTERN          reduce using rule 25 (type_specifier -> VOID .)
    TYPEDEF         reduce using rule 25 (type_specifier -> VOID .)
    VOID            reduce using rule 25 (type_specifier -> VOID .)
    CHAR            reduce using rule 25 (type_specifier -> VOID .)
    SHORT           reduce using rule 25 (type_specifier -> VOID .)
    INT             reduce using rule 25 (type_specifier -> VOID .)
    LONG            reduce using rule 25 (type_specifier -> VOID .)
    FLOAT           reduce using rule 25 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 25 (type_specifier -> VOID .)
    SIGNED          reduce using rule 25 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 25 (type_specifier -> VOID .)
    TYPEID          reduce using rule 25 (type_specifier -> VOID .)
    CONST           reduce using rule 25 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 25 (type_specifier -> VOID .)
    ENUM            reduce using rule 25 (type_specifier -> VOID .)
    STRUCT          reduce using rule 25 (type_specifier -> VOID .)
    UNION           reduce using rule 25 (type_specifier -> VOID .)
    TIMES           reduce using rule 25 (type_specifier -> VOID .)
    LPAREN          reduce using rule 25 (type_specifier -> VOID .)
    ID              reduce using rule 25 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 25 (type_specifier -> VOID .)
    COMMA           reduce using rule 25 (type_specifier -> VOID .)
    RPAREN          reduce using rule 25 (type_specifier -> VOID .)
    SEMI            reduce using rule 25 (type_specifier -> VOID .)
    COLON           reduce using rule 25 (type_specifier -> VOID .)


state 17

    (23) storage_class_specifier -> EXTERN .

    AUTO            reduce using rule 23 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 23 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 23 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 23 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 23 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 23 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 23 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 23 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 23 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 23 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 23 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 23 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 23 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 23 (storage_class_specifier -> EXTERN .)
    TYPEID          reduce using rule 23 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 23 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 23 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 23 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 23 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 23 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 23 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 23 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 23 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 23 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 23 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 23 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 23 (storage_class_specifier -> EXTERN .)


state 18

    (33) type_specifier -> UNSIGNED .

    AUTO            reduce using rule 33 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 33 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 33 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 33 (type_specifier -> UNSIGNED .)
    TYPEDEF         reduce using rule 33 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 33 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 33 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 33 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 33 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 33 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 33 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 33 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 33 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 33 (type_specifier -> UNSIGNED .)
    TYPEID          reduce using rule 33 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 33 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 33 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 33 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 33 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 33 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 33 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 33 (type_specifier -> UNSIGNED .)
    ID              reduce using rule 33 (type_specifier -> UNSIGNED .)
    LBRACKET        reduce using rule 33 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 33 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 33 (type_specifier -> UNSIGNED .)
    SEMI            reduce using rule 33 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 33 (type_specifier -> UNSIGNED .)


state 19

    (39) struct_or_union_specifier -> struct_or_union . identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> struct_or_union . LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> struct_or_union . identifier
    (216) identifier -> . ID

    LBRACE          shift and go to state 46
    ID              shift and go to state 10

    identifier                     shift and go to state 47

state 20

    (22) storage_class_specifier -> STATIC .

    AUTO            reduce using rule 22 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 22 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 22 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 22 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 22 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 22 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 22 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 22 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 22 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 22 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 22 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 22 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 22 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 22 (storage_class_specifier -> STATIC .)
    TYPEID          reduce using rule 22 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 22 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 22 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 22 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 22 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 22 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 22 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 22 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 22 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 22 (storage_class_specifier -> STATIC .)
    LBRACKET        reduce using rule 22 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 22 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 22 (storage_class_specifier -> STATIC .)


state 21

    (15) declaration_specifiers -> type_specifier . declaration_specifiers
    (18) declaration_specifiers -> type_specifier .
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    SEMI            reduce using rule 18 (declaration_specifiers -> type_specifier .)
    TIMES           reduce using rule 18 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 18 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 18 (declaration_specifiers -> type_specifier .)
    LBRACKET        reduce using rule 18 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 18 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 18 (declaration_specifiers -> type_specifier .)
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration_specifiers         shift and go to state 48
    enum_specifier                 shift and go to state 4
    storage_class_specifier        shift and go to state 32
    struct_or_union_specifier      shift and go to state 25
    struct_or_union                shift and go to state 19
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 21

state 22

    (21) storage_class_specifier -> REGISTER .

    AUTO            reduce using rule 21 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 21 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 21 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 21 (storage_class_specifier -> REGISTER .)
    TYPEDEF         reduce using rule 21 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 21 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 21 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 21 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 21 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 21 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 21 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 21 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 21 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 21 (storage_class_specifier -> REGISTER .)
    TYPEID          reduce using rule 21 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 21 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 21 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 21 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 21 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 21 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 21 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 21 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 21 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 21 (storage_class_specifier -> REGISTER .)
    LBRACKET        reduce using rule 21 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 21 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 21 (storage_class_specifier -> REGISTER .)


state 23

    (5) external_declaration -> declaration .

    AUTO            reduce using rule 5 (external_declaration -> declaration .)
    REGISTER        reduce using rule 5 (external_declaration -> declaration .)
    STATIC          reduce using rule 5 (external_declaration -> declaration .)
    EXTERN          reduce using rule 5 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 5 (external_declaration -> declaration .)
    VOID            reduce using rule 5 (external_declaration -> declaration .)
    CHAR            reduce using rule 5 (external_declaration -> declaration .)
    SHORT           reduce using rule 5 (external_declaration -> declaration .)
    INT             reduce using rule 5 (external_declaration -> declaration .)
    LONG            reduce using rule 5 (external_declaration -> declaration .)
    FLOAT           reduce using rule 5 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 5 (external_declaration -> declaration .)
    SIGNED          reduce using rule 5 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 5 (external_declaration -> declaration .)
    TYPEID          reduce using rule 5 (external_declaration -> declaration .)
    CONST           reduce using rule 5 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 5 (external_declaration -> declaration .)
    TIMES           reduce using rule 5 (external_declaration -> declaration .)
    LPAREN          reduce using rule 5 (external_declaration -> declaration .)
    ENUM            reduce using rule 5 (external_declaration -> declaration .)
    ID              reduce using rule 5 (external_declaration -> declaration .)
    STRUCT          reduce using rule 5 (external_declaration -> declaration .)
    UNION           reduce using rule 5 (external_declaration -> declaration .)
    $end            reduce using rule 5 (external_declaration -> declaration .)


state 24

    (68) declarator -> direct_declarator .
    (71) direct_declarator -> direct_declarator . LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (74) direct_declarator -> direct_declarator . LPAREN RPAREN

    COLON           reduce using rule 68 (declarator -> direct_declarator .)
    COMMA           reduce using rule 68 (declarator -> direct_declarator .)
    VOID            reduce using rule 68 (declarator -> direct_declarator .)
    CHAR            reduce using rule 68 (declarator -> direct_declarator .)
    SHORT           reduce using rule 68 (declarator -> direct_declarator .)
    INT             reduce using rule 68 (declarator -> direct_declarator .)
    LONG            reduce using rule 68 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 68 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 68 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 68 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 68 (declarator -> direct_declarator .)
    TYPEID          reduce using rule 68 (declarator -> direct_declarator .)
    CONST           reduce using rule 68 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 68 (declarator -> direct_declarator .)
    ENUM            reduce using rule 68 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 68 (declarator -> direct_declarator .)
    UNION           reduce using rule 68 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 68 (declarator -> direct_declarator .)
    AUTO            reduce using rule 68 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 68 (declarator -> direct_declarator .)
    STATIC          reduce using rule 68 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 68 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 68 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 68 (declarator -> direct_declarator .)
    SEMI            reduce using rule 68 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 68 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 49
    LPAREN          shift and go to state 50


state 25

    (34) type_specifier -> struct_or_union_specifier .

    AUTO            reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    TYPEDEF         reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    TYPEID          reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 34 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 34 (type_specifier -> struct_or_union_specifier .)


state 26

    (36) type_specifier -> TYPEID .

    AUTO            reduce using rule 36 (type_specifier -> TYPEID .)
    REGISTER        reduce using rule 36 (type_specifier -> TYPEID .)
    STATIC          reduce using rule 36 (type_specifier -> TYPEID .)
    EXTERN          reduce using rule 36 (type_specifier -> TYPEID .)
    TYPEDEF         reduce using rule 36 (type_specifier -> TYPEID .)
    VOID            reduce using rule 36 (type_specifier -> TYPEID .)
    CHAR            reduce using rule 36 (type_specifier -> TYPEID .)
    SHORT           reduce using rule 36 (type_specifier -> TYPEID .)
    INT             reduce using rule 36 (type_specifier -> TYPEID .)
    LONG            reduce using rule 36 (type_specifier -> TYPEID .)
    FLOAT           reduce using rule 36 (type_specifier -> TYPEID .)
    DOUBLE          reduce using rule 36 (type_specifier -> TYPEID .)
    SIGNED          reduce using rule 36 (type_specifier -> TYPEID .)
    UNSIGNED        reduce using rule 36 (type_specifier -> TYPEID .)
    TYPEID          reduce using rule 36 (type_specifier -> TYPEID .)
    CONST           reduce using rule 36 (type_specifier -> TYPEID .)
    VOLATILE        reduce using rule 36 (type_specifier -> TYPEID .)
    ENUM            reduce using rule 36 (type_specifier -> TYPEID .)
    STRUCT          reduce using rule 36 (type_specifier -> TYPEID .)
    UNION           reduce using rule 36 (type_specifier -> TYPEID .)
    TIMES           reduce using rule 36 (type_specifier -> TYPEID .)
    LPAREN          reduce using rule 36 (type_specifier -> TYPEID .)
    ID              reduce using rule 36 (type_specifier -> TYPEID .)
    LBRACKET        reduce using rule 36 (type_specifier -> TYPEID .)
    COMMA           reduce using rule 36 (type_specifier -> TYPEID .)
    RPAREN          reduce using rule 36 (type_specifier -> TYPEID .)
    SEMI            reduce using rule 36 (type_specifier -> TYPEID .)
    COLON           reduce using rule 36 (type_specifier -> TYPEID .)


state 27

    (69) direct_declarator -> identifier .

    LBRACKET        reduce using rule 69 (direct_declarator -> identifier .)
    LPAREN          reduce using rule 69 (direct_declarator -> identifier .)
    RPAREN          reduce using rule 69 (direct_declarator -> identifier .)
    EQUALS          reduce using rule 69 (direct_declarator -> identifier .)
    SEMI            reduce using rule 69 (direct_declarator -> identifier .)
    COMMA           reduce using rule 69 (direct_declarator -> identifier .)
    LBRACE          reduce using rule 69 (direct_declarator -> identifier .)
    AUTO            reduce using rule 69 (direct_declarator -> identifier .)
    REGISTER        reduce using rule 69 (direct_declarator -> identifier .)
    STATIC          reduce using rule 69 (direct_declarator -> identifier .)
    EXTERN          reduce using rule 69 (direct_declarator -> identifier .)
    TYPEDEF         reduce using rule 69 (direct_declarator -> identifier .)
    VOID            reduce using rule 69 (direct_declarator -> identifier .)
    CHAR            reduce using rule 69 (direct_declarator -> identifier .)
    SHORT           reduce using rule 69 (direct_declarator -> identifier .)
    INT             reduce using rule 69 (direct_declarator -> identifier .)
    LONG            reduce using rule 69 (direct_declarator -> identifier .)
    FLOAT           reduce using rule 69 (direct_declarator -> identifier .)
    DOUBLE          reduce using rule 69 (direct_declarator -> identifier .)
    SIGNED          reduce using rule 69 (direct_declarator -> identifier .)
    UNSIGNED        reduce using rule 69 (direct_declarator -> identifier .)
    TYPEID          reduce using rule 69 (direct_declarator -> identifier .)
    CONST           reduce using rule 69 (direct_declarator -> identifier .)
    VOLATILE        reduce using rule 69 (direct_declarator -> identifier .)
    ENUM            reduce using rule 69 (direct_declarator -> identifier .)
    STRUCT          reduce using rule 69 (direct_declarator -> identifier .)
    UNION           reduce using rule 69 (direct_declarator -> identifier .)
    COLON           reduce using rule 69 (direct_declarator -> identifier .)


state 28

    (67) declarator -> pointer . direct_declarator
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (216) identifier -> . ID

    LPAREN          shift and go to state 39
    ID              shift and go to state 10

    direct_declarator              shift and go to state 51
    identifier                     shift and go to state 27

state 29

    (26) type_specifier -> CHAR .

    AUTO            reduce using rule 26 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 26 (type_specifier -> CHAR .)
    STATIC          reduce using rule 26 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 26 (type_specifier -> CHAR .)
    TYPEDEF         reduce using rule 26 (type_specifier -> CHAR .)
    VOID            reduce using rule 26 (type_specifier -> CHAR .)
    CHAR            reduce using rule 26 (type_specifier -> CHAR .)
    SHORT           reduce using rule 26 (type_specifier -> CHAR .)
    INT             reduce using rule 26 (type_specifier -> CHAR .)
    LONG            reduce using rule 26 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 26 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 26 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 26 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 26 (type_specifier -> CHAR .)
    TYPEID          reduce using rule 26 (type_specifier -> CHAR .)
    CONST           reduce using rule 26 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 26 (type_specifier -> CHAR .)
    ENUM            reduce using rule 26 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 26 (type_specifier -> CHAR .)
    UNION           reduce using rule 26 (type_specifier -> CHAR .)
    TIMES           reduce using rule 26 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 26 (type_specifier -> CHAR .)
    ID              reduce using rule 26 (type_specifier -> CHAR .)
    LBRACKET        reduce using rule 26 (type_specifier -> CHAR .)
    COMMA           reduce using rule 26 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 26 (type_specifier -> CHAR .)
    SEMI            reduce using rule 26 (type_specifier -> CHAR .)
    COLON           reduce using rule 26 (type_specifier -> CHAR .)


state 30

    (0) S' -> translation_unit .
    (3) translation_unit_opt -> translation_unit . external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (7) function_definition -> . declarator declaration_list compound_statement
    (8) function_definition -> . declarator compound_statement
    (9) function_definition -> . declaration_specifiers declarator compound_statement
    (10) declaration -> . declaration_specifiers init_declarator_list SEMI
    (11) declaration -> . declaration_specifiers SEMI
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (216) identifier -> . ID
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 39
    ENUM            shift and go to state 3
    ID              shift and go to state 10
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration                    shift and go to state 23
    direct_declarator              shift and go to state 24
    identifier                     shift and go to state 27
    enum_specifier                 shift and go to state 4
    pointer                        shift and go to state 28
    struct_or_union                shift and go to state 19
    type_qualifier                 shift and go to state 31
    storage_class_specifier        shift and go to state 32
    declaration_specifiers         shift and go to state 11
    external_declaration           shift and go to state 52
    function_definition            shift and go to state 12
    struct_or_union_specifier      shift and go to state 25
    type_specifier                 shift and go to state 21
    declarator                     shift and go to state 38

state 31

    (16) declaration_specifiers -> type_qualifier . declaration_specifiers
    (19) declaration_specifiers -> type_qualifier .
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    SEMI            reduce using rule 19 (declaration_specifiers -> type_qualifier .)
    TIMES           reduce using rule 19 (declaration_specifiers -> type_qualifier .)
    LPAREN          reduce using rule 19 (declaration_specifiers -> type_qualifier .)
    ID              reduce using rule 19 (declaration_specifiers -> type_qualifier .)
    LBRACKET        reduce using rule 19 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 19 (declaration_specifiers -> type_qualifier .)
    RPAREN          reduce using rule 19 (declaration_specifiers -> type_qualifier .)
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration_specifiers         shift and go to state 53
    enum_specifier                 shift and go to state 4
    storage_class_specifier        shift and go to state 32
    struct_or_union_specifier      shift and go to state 25
    struct_or_union                shift and go to state 19
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 21

state 32

    (14) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (17) declaration_specifiers -> storage_class_specifier .
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    SEMI            reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    TIMES           reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    LPAREN          reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    ID              reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    LBRACKET        reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    RPAREN          reduce using rule 17 (declaration_specifiers -> storage_class_specifier .)
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration_specifiers         shift and go to state 54
    enum_specifier                 shift and go to state 4
    storage_class_specifier        shift and go to state 32
    struct_or_union_specifier      shift and go to state 25
    struct_or_union                shift and go to state 19
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 21

state 33

    (2) translation_unit_opt -> external_declaration .

    AUTO            reduce using rule 2 (translation_unit_opt -> external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit_opt -> external_declaration .)
    STATIC          reduce using rule 2 (translation_unit_opt -> external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit_opt -> external_declaration .)
    TYPEDEF         reduce using rule 2 (translation_unit_opt -> external_declaration .)
    VOID            reduce using rule 2 (translation_unit_opt -> external_declaration .)
    CHAR            reduce using rule 2 (translation_unit_opt -> external_declaration .)
    SHORT           reduce using rule 2 (translation_unit_opt -> external_declaration .)
    INT             reduce using rule 2 (translation_unit_opt -> external_declaration .)
    LONG            reduce using rule 2 (translation_unit_opt -> external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit_opt -> external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit_opt -> external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit_opt -> external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit_opt -> external_declaration .)
    TYPEID          reduce using rule 2 (translation_unit_opt -> external_declaration .)
    CONST           reduce using rule 2 (translation_unit_opt -> external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit_opt -> external_declaration .)
    TIMES           reduce using rule 2 (translation_unit_opt -> external_declaration .)
    LPAREN          reduce using rule 2 (translation_unit_opt -> external_declaration .)
    ENUM            reduce using rule 2 (translation_unit_opt -> external_declaration .)
    ID              reduce using rule 2 (translation_unit_opt -> external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit_opt -> external_declaration .)
    UNION           reduce using rule 2 (translation_unit_opt -> external_declaration .)
    $end            reduce using rule 2 (translation_unit_opt -> external_declaration .)


state 34

    (30) type_specifier -> FLOAT .

    AUTO            reduce using rule 30 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 30 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 30 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 30 (type_specifier -> FLOAT .)
    TYPEDEF         reduce using rule 30 (type_specifier -> FLOAT .)
    VOID            reduce using rule 30 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 30 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 30 (type_specifier -> FLOAT .)
    INT             reduce using rule 30 (type_specifier -> FLOAT .)
    LONG            reduce using rule 30 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 30 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 30 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 30 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 30 (type_specifier -> FLOAT .)
    TYPEID          reduce using rule 30 (type_specifier -> FLOAT .)
    CONST           reduce using rule 30 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 30 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 30 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 30 (type_specifier -> FLOAT .)
    UNION           reduce using rule 30 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 30 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 30 (type_specifier -> FLOAT .)
    ID              reduce using rule 30 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 30 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 30 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 30 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 30 (type_specifier -> FLOAT .)
    COLON           reduce using rule 30 (type_specifier -> FLOAT .)


state 35

    (27) type_specifier -> SHORT .

    AUTO            reduce using rule 27 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 27 (type_specifier -> SHORT .)
    STATIC          reduce using rule 27 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 27 (type_specifier -> SHORT .)
    TYPEDEF         reduce using rule 27 (type_specifier -> SHORT .)
    VOID            reduce using rule 27 (type_specifier -> SHORT .)
    CHAR            reduce using rule 27 (type_specifier -> SHORT .)
    SHORT           reduce using rule 27 (type_specifier -> SHORT .)
    INT             reduce using rule 27 (type_specifier -> SHORT .)
    LONG            reduce using rule 27 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 27 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 27 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 27 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 27 (type_specifier -> SHORT .)
    TYPEID          reduce using rule 27 (type_specifier -> SHORT .)
    CONST           reduce using rule 27 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 27 (type_specifier -> SHORT .)
    ENUM            reduce using rule 27 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 27 (type_specifier -> SHORT .)
    UNION           reduce using rule 27 (type_specifier -> SHORT .)
    TIMES           reduce using rule 27 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 27 (type_specifier -> SHORT .)
    ID              reduce using rule 27 (type_specifier -> SHORT .)
    LBRACKET        reduce using rule 27 (type_specifier -> SHORT .)
    COMMA           reduce using rule 27 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 27 (type_specifier -> SHORT .)
    SEMI            reduce using rule 27 (type_specifier -> SHORT .)
    COLON           reduce using rule 27 (type_specifier -> SHORT .)


state 36

    (75) pointer -> TIMES . type_qualifier_list
    (76) pointer -> TIMES .
    (77) pointer -> TIMES . type_qualifier_list pointer
    (78) pointer -> TIMES . pointer
    (79) type_qualifier_list -> . type_qualifier
    (80) type_qualifier_list -> . type_qualifier_list type_qualifier
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE

    LPAREN          reduce using rule 76 (pointer -> TIMES .)
    ID              reduce using rule 76 (pointer -> TIMES .)
    LBRACKET        reduce using rule 76 (pointer -> TIMES .)
    COMMA           reduce using rule 76 (pointer -> TIMES .)
    RPAREN          reduce using rule 76 (pointer -> TIMES .)
    TIMES           shift and go to state 36
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37

    type_qualifier                 shift and go to state 56
    type_qualifier_list            shift and go to state 57
    pointer                        shift and go to state 55

state 37

    (38) type_qualifier -> VOLATILE .

    AUTO            reduce using rule 38 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 38 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 38 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 38 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 38 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 38 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 38 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 38 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 38 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 38 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 38 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 38 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 38 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 38 (type_qualifier -> VOLATILE .)
    TYPEID          reduce using rule 38 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 38 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 38 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 38 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 38 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 38 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 38 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 38 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 38 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 38 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 38 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 38 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 38 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 38 (type_qualifier -> VOLATILE .)


state 38

    (7) function_definition -> declarator . declaration_list compound_statement
    (8) function_definition -> declarator . compound_statement
    (12) declaration_list -> . declaration
    (13) declaration_list -> . declaration_list declaration
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (10) declaration -> . declaration_specifiers init_declarator_list SEMI
    (11) declaration -> . declaration_specifiers SEMI
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    LBRACE          shift and go to state 61
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration                    shift and go to state 58
    declaration_specifiers         shift and go to state 59
    compound_statement             shift and go to state 60
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 4
    struct_or_union                shift and go to state 19
    storage_class_specifier        shift and go to state 32
    type_qualifier                 shift and go to state 31
    declaration_list               shift and go to state 62
    type_specifier                 shift and go to state 21

state 39

    (70) direct_declarator -> LPAREN . declarator RPAREN
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (216) identifier -> . ID

    TIMES           shift and go to state 36
    LPAREN          shift and go to state 39
    ID              shift and go to state 10

    direct_declarator              shift and go to state 24
    pointer                        shift and go to state 28
    identifier                     shift and go to state 27
    declarator                     shift and go to state 63

state 40

    (61) enum_specifier -> ENUM LBRACE . enumerator_list RBRACE
    (63) enumerator_list -> . enumerator
    (64) enumerator_list -> . enumerator_list COMMA enumerator
    (65) enumerator -> . identifier
    (66) enumerator -> . identifier EQUALS constant_expression
    (216) identifier -> . ID

    ID              shift and go to state 10

    identifier                     shift and go to state 65
    enumerator_list                shift and go to state 64
    enumerator                     shift and go to state 66

state 41

    (60) enum_specifier -> ENUM identifier . LBRACE enumerator_list RBRACE
    (62) enum_specifier -> ENUM identifier .

    LBRACE          shift and go to state 67
    AUTO            reduce using rule 62 (enum_specifier -> ENUM identifier .)
    REGISTER        reduce using rule 62 (enum_specifier -> ENUM identifier .)
    STATIC          reduce using rule 62 (enum_specifier -> ENUM identifier .)
    EXTERN          reduce using rule 62 (enum_specifier -> ENUM identifier .)
    TYPEDEF         reduce using rule 62 (enum_specifier -> ENUM identifier .)
    VOID            reduce using rule 62 (enum_specifier -> ENUM identifier .)
    CHAR            reduce using rule 62 (enum_specifier -> ENUM identifier .)
    SHORT           reduce using rule 62 (enum_specifier -> ENUM identifier .)
    INT             reduce using rule 62 (enum_specifier -> ENUM identifier .)
    LONG            reduce using rule 62 (enum_specifier -> ENUM identifier .)
    FLOAT           reduce using rule 62 (enum_specifier -> ENUM identifier .)
    DOUBLE          reduce using rule 62 (enum_specifier -> ENUM identifier .)
    SIGNED          reduce using rule 62 (enum_specifier -> ENUM identifier .)
    UNSIGNED        reduce using rule 62 (enum_specifier -> ENUM identifier .)
    TYPEID          reduce using rule 62 (enum_specifier -> ENUM identifier .)
    CONST           reduce using rule 62 (enum_specifier -> ENUM identifier .)
    VOLATILE        reduce using rule 62 (enum_specifier -> ENUM identifier .)
    ENUM            reduce using rule 62 (enum_specifier -> ENUM identifier .)
    STRUCT          reduce using rule 62 (enum_specifier -> ENUM identifier .)
    UNION           reduce using rule 62 (enum_specifier -> ENUM identifier .)
    TIMES           reduce using rule 62 (enum_specifier -> ENUM identifier .)
    LPAREN          reduce using rule 62 (enum_specifier -> ENUM identifier .)
    ID              reduce using rule 62 (enum_specifier -> ENUM identifier .)
    LBRACKET        reduce using rule 62 (enum_specifier -> ENUM identifier .)
    COMMA           reduce using rule 62 (enum_specifier -> ENUM identifier .)
    RPAREN          reduce using rule 62 (enum_specifier -> ENUM identifier .)
    SEMI            reduce using rule 62 (enum_specifier -> ENUM identifier .)
    COLON           reduce using rule 62 (enum_specifier -> ENUM identifier .)


state 42

    (10) declaration -> declaration_specifiers init_declarator_list . SEMI
    (47) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 68
    COMMA           shift and go to state 69


state 43

    (6) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (9) function_definition -> declaration_specifiers declarator . compound_statement
    (48) init_declarator -> declarator .
    (49) init_declarator -> declarator . EQUALS initializer
    (12) declaration_list -> . declaration
    (13) declaration_list -> . declaration_list declaration
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (10) declaration -> . declaration_specifiers init_declarator_list SEMI
    (11) declaration -> . declaration_specifiers SEMI
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    SEMI            reduce using rule 48 (init_declarator -> declarator .)
    COMMA           reduce using rule 48 (init_declarator -> declarator .)
    EQUALS          shift and go to state 72
    LBRACE          shift and go to state 61
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration_specifiers         shift and go to state 59
    declaration                    shift and go to state 58
    compound_statement             shift and go to state 71
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 4
    struct_or_union                shift and go to state 19
    storage_class_specifier        shift and go to state 32
    type_qualifier                 shift and go to state 31
    declaration_list               shift and go to state 70
    type_specifier                 shift and go to state 21

state 44

    (11) declaration -> declaration_specifiers SEMI .

    LBRACE          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    AUTO            reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    REGISTER        reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    STATIC          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    EXTERN          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    TYPEDEF         reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    VOID            reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    CHAR            reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    SHORT           reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    INT             reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    LONG            reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    FLOAT           reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    DOUBLE          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    SIGNED          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    UNSIGNED        reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    TYPEID          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    CONST           reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    VOLATILE        reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    ENUM            reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    STRUCT          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    UNION           reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    TIMES           reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    LPAREN          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    ID              reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    $end            reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    CASE            reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    DEFAULT         reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    IF              reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    SWITCH          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    WHILE           reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    FOR             reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    DO              reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    GOTO            reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    CONTINUE        reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    BREAK           reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    RETURN          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    PLUSPLUS        reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    MINUSMINUS      reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    SIZEOF          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    AND             reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    PLUS            reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    MINUS           reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    NOT             reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    LNOT            reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    ICONST          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    FCONST          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    CCONST          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    SCONST          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    RBRACE          reduce using rule 11 (declaration -> declaration_specifiers SEMI .)
    SEMI            reduce using rule 11 (declaration -> declaration_specifiers SEMI .)


state 45

    (46) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 46 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 46 (init_declarator_list -> init_declarator .)


state 46

    (40) struct_or_union_specifier -> struct_or_union LBRACE . struct_declaration_list RBRACE
    (44) struct_declaration_list -> . struct_declaration
    (45) struct_declaration_list -> . struct_declarator_list struct_declaration
    (50) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (55) struct_declarator_list -> . struct_declarator
    (56) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (51) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (52) specifier_qualifier_list -> . type_specifier
    (53) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_qualifier
    (57) struct_declarator -> . declarator
    (58) struct_declarator -> . declarator COLON constant_expression
    (59) struct_declarator -> . COLON constant_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION
    (216) identifier -> . ID

    COLON           shift and go to state 80
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 39
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5
    ID              shift and go to state 10

    struct_declarator              shift and go to state 73
    direct_declarator              shift and go to state 24
    struct_or_union                shift and go to state 19
    struct_declarator_list         shift and go to state 81
    pointer                        shift and go to state 28
    struct_declaration_list        shift and go to state 76
    enum_specifier                 shift and go to state 4
    struct_or_union_specifier      shift and go to state 25
    type_qualifier                 shift and go to state 79
    struct_declaration             shift and go to state 75
    specifier_qualifier_list       shift and go to state 74
    identifier                     shift and go to state 27
    type_specifier                 shift and go to state 77
    declarator                     shift and go to state 78

state 47

    (39) struct_or_union_specifier -> struct_or_union identifier . LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> struct_or_union identifier .

    LBRACE          shift and go to state 82
    AUTO            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    REGISTER        reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    STATIC          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    EXTERN          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    TYPEDEF         reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    VOID            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    CHAR            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    SHORT           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    INT             reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    LONG            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    FLOAT           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    DOUBLE          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    SIGNED          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    UNSIGNED        reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    TYPEID          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    CONST           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    VOLATILE        reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    ENUM            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    STRUCT          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    UNION           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    TIMES           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    LPAREN          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    ID              reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    LBRACKET        reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    COMMA           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    RPAREN          reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    SEMI            reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)
    COLON           reduce using rule 41 (struct_or_union_specifier -> struct_or_union identifier .)


state 48

    (15) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI            reduce using rule 15 (declaration_specifiers -> type_specifier declaration_specifiers .)
    TIMES           reduce using rule 15 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 15 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ID              reduce using rule 15 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 15 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 15 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 15 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 49

    (71) direct_declarator -> direct_declarator LBRACKET . constant_expression_option RBRACKET
    (105) constant_expression_option -> . empty
    (106) constant_expression_option -> . constant_expression
    (217) empty -> .
    (154) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    RBRACKET        reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 108
    constant_expression            shift and go to state 114
    shift_expression               shift and go to state 90
    and_expression                 shift and go to state 113
    unary_expression               shift and go to state 93
    additive_expression            shift and go to state 95
    exclusive_or_expression        shift and go to state 110
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    empty                          shift and go to state 116
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    constant_expression_option     shift and go to state 100
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 102

state 50

    (72) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (73) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (74) direct_declarator -> direct_declarator LPAREN . RPAREN
    (81) parameter_type_list -> . parameter_list
    (82) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (87) identifier_list -> . identifier
    (88) identifier_list -> . identifier_list COMMA identifier
    (83) parameter_list -> . parameter_declaration
    (84) parameter_list -> . parameter_list COMMA parameter_declaration
    (216) identifier -> . ID
    (85) parameter_declaration -> . declaration_specifiers declarator
    (86) parameter_declaration -> . declaration_specifiers abstract_declarator_option
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    RPAREN          shift and go to state 124
    ID              shift and go to state 10
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration_specifiers         shift and go to state 121
    struct_or_union_specifier      shift and go to state 25
    parameter_type_list            shift and go to state 125
    parameter_list                 shift and go to state 122
    identifier                     shift and go to state 123
    enum_specifier                 shift and go to state 4
    struct_or_union                shift and go to state 19
    storage_class_specifier        shift and go to state 32
    type_qualifier                 shift and go to state 31
    identifier_list                shift and go to state 120
    parameter_declaration          shift and go to state 119
    type_specifier                 shift and go to state 21

state 51

    (67) declarator -> pointer direct_declarator .
    (71) direct_declarator -> direct_declarator . LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (74) direct_declarator -> direct_declarator . LPAREN RPAREN

    COLON           reduce using rule 67 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 67 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 67 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 67 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 67 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 67 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 67 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 67 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 67 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 67 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 67 (declarator -> pointer direct_declarator .)
    TYPEID          reduce using rule 67 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 67 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 67 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 67 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 67 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 67 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 67 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 67 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 67 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 67 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 67 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 67 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 67 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 67 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 67 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 49
    LPAREN          shift and go to state 50


state 52

    (3) translation_unit_opt -> translation_unit external_declaration .

    AUTO            reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    REGISTER        reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    STATIC          reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    EXTERN          reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    VOID            reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    CHAR            reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    SHORT           reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    INT             reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    LONG            reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    FLOAT           reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    SIGNED          reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    TYPEID          reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    CONST           reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    TIMES           reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    LPAREN          reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    ENUM            reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    ID              reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    STRUCT          reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    UNION           reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)
    $end            reduce using rule 3 (translation_unit_opt -> translation_unit external_declaration .)


state 53

    (16) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMI            reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    TIMES           reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LPAREN          reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ID              reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LBRACKET        reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RPAREN          reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 54

    (14) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMI            reduce using rule 14 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    TIMES           reduce using rule 14 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LPAREN          reduce using rule 14 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ID              reduce using rule 14 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LBRACKET        reduce using rule 14 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 14 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RPAREN          reduce using rule 14 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 55

    (78) pointer -> TIMES pointer .

    LPAREN          reduce using rule 78 (pointer -> TIMES pointer .)
    ID              reduce using rule 78 (pointer -> TIMES pointer .)
    LBRACKET        reduce using rule 78 (pointer -> TIMES pointer .)
    COMMA           reduce using rule 78 (pointer -> TIMES pointer .)
    RPAREN          reduce using rule 78 (pointer -> TIMES pointer .)


state 56

    (79) type_qualifier_list -> type_qualifier .

    TIMES           reduce using rule 79 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 79 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 79 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 79 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 79 (type_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 79 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 79 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 79 (type_qualifier_list -> type_qualifier .)


state 57

    (75) pointer -> TIMES type_qualifier_list .
    (77) pointer -> TIMES type_qualifier_list . pointer
    (80) type_qualifier_list -> type_qualifier_list . type_qualifier
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE

    LPAREN          reduce using rule 75 (pointer -> TIMES type_qualifier_list .)
    ID              reduce using rule 75 (pointer -> TIMES type_qualifier_list .)
    LBRACKET        reduce using rule 75 (pointer -> TIMES type_qualifier_list .)
    COMMA           reduce using rule 75 (pointer -> TIMES type_qualifier_list .)
    RPAREN          reduce using rule 75 (pointer -> TIMES type_qualifier_list .)
    TIMES           shift and go to state 36
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37

    type_qualifier                 shift and go to state 127
    pointer                        shift and go to state 126

state 58

    (12) declaration_list -> declaration .

    CASE            reduce using rule 12 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 12 (declaration_list -> declaration .)
    LBRACE          reduce using rule 12 (declaration_list -> declaration .)
    IF              reduce using rule 12 (declaration_list -> declaration .)
    SWITCH          reduce using rule 12 (declaration_list -> declaration .)
    WHILE           reduce using rule 12 (declaration_list -> declaration .)
    FOR             reduce using rule 12 (declaration_list -> declaration .)
    DO              reduce using rule 12 (declaration_list -> declaration .)
    GOTO            reduce using rule 12 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 12 (declaration_list -> declaration .)
    BREAK           reduce using rule 12 (declaration_list -> declaration .)
    RETURN          reduce using rule 12 (declaration_list -> declaration .)
    AUTO            reduce using rule 12 (declaration_list -> declaration .)
    REGISTER        reduce using rule 12 (declaration_list -> declaration .)
    STATIC          reduce using rule 12 (declaration_list -> declaration .)
    EXTERN          reduce using rule 12 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 12 (declaration_list -> declaration .)
    VOID            reduce using rule 12 (declaration_list -> declaration .)
    CHAR            reduce using rule 12 (declaration_list -> declaration .)
    SHORT           reduce using rule 12 (declaration_list -> declaration .)
    INT             reduce using rule 12 (declaration_list -> declaration .)
    LONG            reduce using rule 12 (declaration_list -> declaration .)
    FLOAT           reduce using rule 12 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 12 (declaration_list -> declaration .)
    SIGNED          reduce using rule 12 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 12 (declaration_list -> declaration .)
    TYPEID          reduce using rule 12 (declaration_list -> declaration .)
    CONST           reduce using rule 12 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 12 (declaration_list -> declaration .)
    ID              reduce using rule 12 (declaration_list -> declaration .)
    ENUM            reduce using rule 12 (declaration_list -> declaration .)
    STRUCT          reduce using rule 12 (declaration_list -> declaration .)
    UNION           reduce using rule 12 (declaration_list -> declaration .)
    PLUSPLUS        reduce using rule 12 (declaration_list -> declaration .)
    MINUSMINUS      reduce using rule 12 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 12 (declaration_list -> declaration .)
    AND             reduce using rule 12 (declaration_list -> declaration .)
    TIMES           reduce using rule 12 (declaration_list -> declaration .)
    PLUS            reduce using rule 12 (declaration_list -> declaration .)
    MINUS           reduce using rule 12 (declaration_list -> declaration .)
    NOT             reduce using rule 12 (declaration_list -> declaration .)
    LNOT            reduce using rule 12 (declaration_list -> declaration .)
    LPAREN          reduce using rule 12 (declaration_list -> declaration .)
    ICONST          reduce using rule 12 (declaration_list -> declaration .)
    FCONST          reduce using rule 12 (declaration_list -> declaration .)
    CCONST          reduce using rule 12 (declaration_list -> declaration .)
    SCONST          reduce using rule 12 (declaration_list -> declaration .)
    RBRACE          reduce using rule 12 (declaration_list -> declaration .)
    SEMI            reduce using rule 12 (declaration_list -> declaration .)


state 59

    (10) declaration -> declaration_specifiers . init_declarator_list SEMI
    (11) declaration -> declaration_specifiers . SEMI
    (46) init_declarator_list -> . init_declarator
    (47) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (48) init_declarator -> . declarator
    (49) init_declarator -> . declarator EQUALS initializer
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (216) identifier -> . ID

    SEMI            shift and go to state 44
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 39
    ID              shift and go to state 10

    direct_declarator              shift and go to state 24
    init_declarator_list           shift and go to state 42
    identifier                     shift and go to state 27
    pointer                        shift and go to state 28
    init_declarator                shift and go to state 45
    declarator                     shift and go to state 128

state 60

    (8) function_definition -> declarator compound_statement .

    AUTO            reduce using rule 8 (function_definition -> declarator compound_statement .)
    REGISTER        reduce using rule 8 (function_definition -> declarator compound_statement .)
    STATIC          reduce using rule 8 (function_definition -> declarator compound_statement .)
    EXTERN          reduce using rule 8 (function_definition -> declarator compound_statement .)
    TYPEDEF         reduce using rule 8 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 8 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 8 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 8 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 8 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 8 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 8 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 8 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 8 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 8 (function_definition -> declarator compound_statement .)
    TYPEID          reduce using rule 8 (function_definition -> declarator compound_statement .)
    CONST           reduce using rule 8 (function_definition -> declarator compound_statement .)
    VOLATILE        reduce using rule 8 (function_definition -> declarator compound_statement .)
    TIMES           reduce using rule 8 (function_definition -> declarator compound_statement .)
    LPAREN          reduce using rule 8 (function_definition -> declarator compound_statement .)
    ENUM            reduce using rule 8 (function_definition -> declarator compound_statement .)
    ID              reduce using rule 8 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 8 (function_definition -> declarator compound_statement .)
    UNION           reduce using rule 8 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 8 (function_definition -> declarator compound_statement .)


state 61

    (119) compound_statement -> LBRACE . enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> LBRACE . enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> LBRACE . enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> LBRACE . RBRACE
    (218) enter_scope -> . empty
    (217) empty -> .

    RBRACE          shift and go to state 131
    CASE            reduce using rule 217 (empty -> .)
    DEFAULT         reduce using rule 217 (empty -> .)
    LBRACE          reduce using rule 217 (empty -> .)
    IF              reduce using rule 217 (empty -> .)
    SWITCH          reduce using rule 217 (empty -> .)
    WHILE           reduce using rule 217 (empty -> .)
    FOR             reduce using rule 217 (empty -> .)
    DO              reduce using rule 217 (empty -> .)
    GOTO            reduce using rule 217 (empty -> .)
    CONTINUE        reduce using rule 217 (empty -> .)
    BREAK           reduce using rule 217 (empty -> .)
    RETURN          reduce using rule 217 (empty -> .)
    ID              reduce using rule 217 (empty -> .)
    PLUSPLUS        reduce using rule 217 (empty -> .)
    MINUSMINUS      reduce using rule 217 (empty -> .)
    SIZEOF          reduce using rule 217 (empty -> .)
    AND             reduce using rule 217 (empty -> .)
    TIMES           reduce using rule 217 (empty -> .)
    PLUS            reduce using rule 217 (empty -> .)
    MINUS           reduce using rule 217 (empty -> .)
    NOT             reduce using rule 217 (empty -> .)
    LNOT            reduce using rule 217 (empty -> .)
    LPAREN          reduce using rule 217 (empty -> .)
    ICONST          reduce using rule 217 (empty -> .)
    FCONST          reduce using rule 217 (empty -> .)
    CCONST          reduce using rule 217 (empty -> .)
    SCONST          reduce using rule 217 (empty -> .)
    AUTO            reduce using rule 217 (empty -> .)
    REGISTER        reduce using rule 217 (empty -> .)
    STATIC          reduce using rule 217 (empty -> .)
    EXTERN          reduce using rule 217 (empty -> .)
    TYPEDEF         reduce using rule 217 (empty -> .)
    VOID            reduce using rule 217 (empty -> .)
    CHAR            reduce using rule 217 (empty -> .)
    SHORT           reduce using rule 217 (empty -> .)
    INT             reduce using rule 217 (empty -> .)
    LONG            reduce using rule 217 (empty -> .)
    FLOAT           reduce using rule 217 (empty -> .)
    DOUBLE          reduce using rule 217 (empty -> .)
    SIGNED          reduce using rule 217 (empty -> .)
    UNSIGNED        reduce using rule 217 (empty -> .)
    TYPEID          reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    VOLATILE        reduce using rule 217 (empty -> .)
    ENUM            reduce using rule 217 (empty -> .)
    STRUCT          reduce using rule 217 (empty -> .)
    UNION           reduce using rule 217 (empty -> .)
    SEMI            reduce using rule 217 (empty -> .)

    enter_scope                    shift and go to state 129
    empty                          shift and go to state 130

state 62

    (7) function_definition -> declarator declaration_list . compound_statement
    (13) declaration_list -> declaration_list . declaration
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (10) declaration -> . declaration_specifiers init_declarator_list SEMI
    (11) declaration -> . declaration_specifiers SEMI
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    LBRACE          shift and go to state 61
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration                    shift and go to state 132
    declaration_specifiers         shift and go to state 59
    compound_statement             shift and go to state 133
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 4
    struct_or_union                shift and go to state 19
    storage_class_specifier        shift and go to state 32
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 21

state 63

    (70) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 134


state 64

    (61) enum_specifier -> ENUM LBRACE enumerator_list . RBRACE
    (64) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 135
    COMMA           shift and go to state 136


state 65

    (65) enumerator -> identifier .
    (66) enumerator -> identifier . EQUALS constant_expression

    RBRACE          reduce using rule 65 (enumerator -> identifier .)
    COMMA           reduce using rule 65 (enumerator -> identifier .)
    EQUALS          shift and go to state 137


state 66

    (63) enumerator_list -> enumerator .

    RBRACE          reduce using rule 63 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 63 (enumerator_list -> enumerator .)


state 67

    (60) enum_specifier -> ENUM identifier LBRACE . enumerator_list RBRACE
    (63) enumerator_list -> . enumerator
    (64) enumerator_list -> . enumerator_list COMMA enumerator
    (65) enumerator -> . identifier
    (66) enumerator -> . identifier EQUALS constant_expression
    (216) identifier -> . ID

    ID              shift and go to state 10

    identifier                     shift and go to state 65
    enumerator_list                shift and go to state 138
    enumerator                     shift and go to state 66

state 68

    (10) declaration -> declaration_specifiers init_declarator_list SEMI .

    LBRACE          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AUTO            reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    REGISTER        reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STATIC          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    EXTERN          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEDEF         reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOID            reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHAR            reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SHORT           reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LONG            reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FLOAT           reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DOUBLE          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIGNED          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNSIGNED        reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEID          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONST           reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOLATILE        reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ENUM            reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRUCT          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNION           reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TIMES           reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LPAREN          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ID              reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CASE            reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DEFAULT         reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SWITCH          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    WHILE           reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DO              reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    GOTO            reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONTINUE        reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUSPLUS        reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUSMINUS      reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIZEOF          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AND             reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUS            reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUS           reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    NOT             reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LNOT            reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ICONST          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FCONST          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CCONST          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SCONST          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RBRACE          reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 10 (declaration -> declaration_specifiers init_declarator_list SEMI .)


state 69

    (47) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (48) init_declarator -> . declarator
    (49) init_declarator -> . declarator EQUALS initializer
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (216) identifier -> . ID

    TIMES           shift and go to state 36
    LPAREN          shift and go to state 39
    ID              shift and go to state 10

    pointer                        shift and go to state 28
    init_declarator                shift and go to state 139
    direct_declarator              shift and go to state 24
    identifier                     shift and go to state 27
    declarator                     shift and go to state 128

state 70

    (6) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (13) declaration_list -> declaration_list . declaration
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (10) declaration -> . declaration_specifiers init_declarator_list SEMI
    (11) declaration -> . declaration_specifiers SEMI
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    LBRACE          shift and go to state 61
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration_specifiers         shift and go to state 59
    declaration                    shift and go to state 132
    compound_statement             shift and go to state 140
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 4
    struct_or_union                shift and go to state 19
    storage_class_specifier        shift and go to state 32
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 21

state 71

    (9) function_definition -> declaration_specifiers declarator compound_statement .

    AUTO            reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEDEF         reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEID          reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    TIMES           reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    LPAREN          reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    ID              reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 9 (function_definition -> declaration_specifiers declarator compound_statement .)


state 72

    (49) init_declarator -> declarator EQUALS . initializer
    (89) initializer -> . assignment_expression
    (90) initializer -> . LBRACE initializer_list RBRACE
    (91) initializer -> . LBRACE initializer_list COMMA RBRACE
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 145
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 142
    constant                       shift and go to state 87
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    exclusive_or_expression        shift and go to state 110
    initializer                    shift and go to state 144
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    and_expression                 shift and go to state 113
    identifier                     shift and go to state 106

state 73

    (55) struct_declarator_list -> struct_declarator .

    COMMA           reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    VOID            reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    CHAR            reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    SHORT           reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    INT             reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    LONG            reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    FLOAT           reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    DOUBLE          reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    SIGNED          reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    UNSIGNED        reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    TYPEID          reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    CONST           reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    VOLATILE        reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    ENUM            reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    STRUCT          reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    UNION           reduce using rule 55 (struct_declarator_list -> struct_declarator .)
    SEMI            reduce using rule 55 (struct_declarator_list -> struct_declarator .)


state 74

    (50) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMI
    (55) struct_declarator_list -> . struct_declarator
    (56) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (57) struct_declarator -> . declarator
    (58) struct_declarator -> . declarator COLON constant_expression
    (59) struct_declarator -> . COLON constant_expression
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (216) identifier -> . ID

    COLON           shift and go to state 80
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 39
    ID              shift and go to state 10

    direct_declarator              shift and go to state 24
    identifier                     shift and go to state 27
    struct_declarator              shift and go to state 73
    struct_declarator_list         shift and go to state 147
    pointer                        shift and go to state 28
    declarator                     shift and go to state 78

state 75

    (44) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 44 (struct_declaration_list -> struct_declaration .)


state 76

    (40) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list . RBRACE

    RBRACE          shift and go to state 148


state 77

    (51) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (52) specifier_qualifier_list -> type_specifier .
    (51) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (52) specifier_qualifier_list -> . type_specifier
    (53) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    COLON           reduce using rule 52 (specifier_qualifier_list -> type_specifier .)
    TIMES           reduce using rule 52 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 52 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 52 (specifier_qualifier_list -> type_specifier .)
    LBRACKET        reduce using rule 52 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 52 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    type_specifier                 shift and go to state 77
    struct_or_union_specifier      shift and go to state 25
    struct_or_union                shift and go to state 19
    type_qualifier                 shift and go to state 79
    specifier_qualifier_list       shift and go to state 149
    enum_specifier                 shift and go to state 4

state 78

    (57) struct_declarator -> declarator .
    (58) struct_declarator -> declarator . COLON constant_expression

    COMMA           reduce using rule 57 (struct_declarator -> declarator .)
    VOID            reduce using rule 57 (struct_declarator -> declarator .)
    CHAR            reduce using rule 57 (struct_declarator -> declarator .)
    SHORT           reduce using rule 57 (struct_declarator -> declarator .)
    INT             reduce using rule 57 (struct_declarator -> declarator .)
    LONG            reduce using rule 57 (struct_declarator -> declarator .)
    FLOAT           reduce using rule 57 (struct_declarator -> declarator .)
    DOUBLE          reduce using rule 57 (struct_declarator -> declarator .)
    SIGNED          reduce using rule 57 (struct_declarator -> declarator .)
    UNSIGNED        reduce using rule 57 (struct_declarator -> declarator .)
    TYPEID          reduce using rule 57 (struct_declarator -> declarator .)
    CONST           reduce using rule 57 (struct_declarator -> declarator .)
    VOLATILE        reduce using rule 57 (struct_declarator -> declarator .)
    ENUM            reduce using rule 57 (struct_declarator -> declarator .)
    STRUCT          reduce using rule 57 (struct_declarator -> declarator .)
    UNION           reduce using rule 57 (struct_declarator -> declarator .)
    SEMI            reduce using rule 57 (struct_declarator -> declarator .)
    COLON           shift and go to state 150


state 79

    (53) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (54) specifier_qualifier_list -> type_qualifier .
    (51) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (52) specifier_qualifier_list -> . type_specifier
    (53) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    COLON           reduce using rule 54 (specifier_qualifier_list -> type_qualifier .)
    TIMES           reduce using rule 54 (specifier_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 54 (specifier_qualifier_list -> type_qualifier .)
    ID              reduce using rule 54 (specifier_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 54 (specifier_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 54 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    type_specifier                 shift and go to state 77
    struct_or_union_specifier      shift and go to state 25
    struct_or_union                shift and go to state 19
    type_qualifier                 shift and go to state 79
    specifier_qualifier_list       shift and go to state 151
    enum_specifier                 shift and go to state 4

state 80

    (59) struct_declarator -> COLON . constant_expression
    (154) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant_expression            shift and go to state 152
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 108
    exclusive_or_expression        shift and go to state 110
    unary_expression               shift and go to state 93
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    and_expression                 shift and go to state 113
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 102

state 81

    (45) struct_declaration_list -> struct_declarator_list . struct_declaration
    (56) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator
    (50) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (51) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (52) specifier_qualifier_list -> . type_specifier
    (53) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    COMMA           shift and go to state 153
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    enum_specifier                 shift and go to state 4
    struct_or_union                shift and go to state 19
    struct_or_union_specifier      shift and go to state 25
    type_qualifier                 shift and go to state 79
    specifier_qualifier_list       shift and go to state 74
    type_specifier                 shift and go to state 77
    struct_declaration             shift and go to state 154

state 82

    (39) struct_or_union_specifier -> struct_or_union identifier LBRACE . struct_declaration_list RBRACE
    (44) struct_declaration_list -> . struct_declaration
    (45) struct_declaration_list -> . struct_declarator_list struct_declaration
    (50) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (55) struct_declarator_list -> . struct_declarator
    (56) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (51) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (52) specifier_qualifier_list -> . type_specifier
    (53) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_qualifier
    (57) struct_declarator -> . declarator
    (58) struct_declarator -> . declarator COLON constant_expression
    (59) struct_declarator -> . COLON constant_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION
    (216) identifier -> . ID

    COLON           shift and go to state 80
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 39
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5
    ID              shift and go to state 10

    struct_declarator              shift and go to state 73
    identifier                     shift and go to state 27
    struct_or_union                shift and go to state 19
    direct_declarator              shift and go to state 24
    struct_declarator_list         shift and go to state 81
    pointer                        shift and go to state 28
    struct_declaration_list        shift and go to state 155
    enum_specifier                 shift and go to state 4
    struct_or_union_specifier      shift and go to state 25
    type_qualifier                 shift and go to state 79
    struct_declaration             shift and go to state 75
    specifier_qualifier_list       shift and go to state 74
    type_specifier                 shift and go to state 77
    declarator                     shift and go to state 78

state 83

    (193) unary_operator -> PLUS .

    LPAREN          reduce using rule 193 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 193 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 193 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 193 (unary_operator -> PLUS .)
    AND             reduce using rule 193 (unary_operator -> PLUS .)
    TIMES           reduce using rule 193 (unary_operator -> PLUS .)
    PLUS            reduce using rule 193 (unary_operator -> PLUS .)
    MINUS           reduce using rule 193 (unary_operator -> PLUS .)
    NOT             reduce using rule 193 (unary_operator -> PLUS .)
    LNOT            reduce using rule 193 (unary_operator -> PLUS .)
    ID              reduce using rule 193 (unary_operator -> PLUS .)
    ICONST          reduce using rule 193 (unary_operator -> PLUS .)
    FCONST          reduce using rule 193 (unary_operator -> PLUS .)
    CCONST          reduce using rule 193 (unary_operator -> PLUS .)
    SCONST          reduce using rule 193 (unary_operator -> PLUS .)


state 84

    (152) conditional_expression -> logical_or_expression .
    (153) conditional_expression -> logical_or_expression . CONDOP expression COLON conditional_expression
    (156) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    COMMA           reduce using rule 152 (conditional_expression -> logical_or_expression .)
    SEMI            reduce using rule 152 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 152 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 152 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 152 (conditional_expression -> logical_or_expression .)
    VOID            reduce using rule 152 (conditional_expression -> logical_or_expression .)
    CHAR            reduce using rule 152 (conditional_expression -> logical_or_expression .)
    SHORT           reduce using rule 152 (conditional_expression -> logical_or_expression .)
    INT             reduce using rule 152 (conditional_expression -> logical_or_expression .)
    LONG            reduce using rule 152 (conditional_expression -> logical_or_expression .)
    FLOAT           reduce using rule 152 (conditional_expression -> logical_or_expression .)
    DOUBLE          reduce using rule 152 (conditional_expression -> logical_or_expression .)
    SIGNED          reduce using rule 152 (conditional_expression -> logical_or_expression .)
    UNSIGNED        reduce using rule 152 (conditional_expression -> logical_or_expression .)
    TYPEID          reduce using rule 152 (conditional_expression -> logical_or_expression .)
    CONST           reduce using rule 152 (conditional_expression -> logical_or_expression .)
    VOLATILE        reduce using rule 152 (conditional_expression -> logical_or_expression .)
    ENUM            reduce using rule 152 (conditional_expression -> logical_or_expression .)
    STRUCT          reduce using rule 152 (conditional_expression -> logical_or_expression .)
    UNION           reduce using rule 152 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 152 (conditional_expression -> logical_or_expression .)
    CONDOP          shift and go to state 157
    LOR             shift and go to state 156


state 85

    (157) logical_and_expression -> inclusive_or_expression .
    (160) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    CONDOP          reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    SEMI            reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    VOID            reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    CHAR            reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    SHORT           reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    INT             reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    LONG            reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    FLOAT           reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    DOUBLE          reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    SIGNED          reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    UNSIGNED        reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    TYPEID          reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    CONST           reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    VOLATILE        reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    ENUM            reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    STRUCT          reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    UNION           reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 157 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 158


state 86

    (208) string_literal_list -> SCONST .

    SCONST          reduce using rule 208 (string_literal_list -> SCONST .)
    LBRACKET        reduce using rule 208 (string_literal_list -> SCONST .)
    LPAREN          reduce using rule 208 (string_literal_list -> SCONST .)
    PERIOD          reduce using rule 208 (string_literal_list -> SCONST .)
    ARROW           reduce using rule 208 (string_literal_list -> SCONST .)
    PLUSPLUS        reduce using rule 208 (string_literal_list -> SCONST .)
    MINUSMINUS      reduce using rule 208 (string_literal_list -> SCONST .)
    EQUALS          reduce using rule 208 (string_literal_list -> SCONST .)
    TIMESEQUAL      reduce using rule 208 (string_literal_list -> SCONST .)
    DIVEQUAL        reduce using rule 208 (string_literal_list -> SCONST .)
    MODEQUAL        reduce using rule 208 (string_literal_list -> SCONST .)
    PLUSEQUAL       reduce using rule 208 (string_literal_list -> SCONST .)
    MINUSEQUAL      reduce using rule 208 (string_literal_list -> SCONST .)
    LSHIFTEQUAL     reduce using rule 208 (string_literal_list -> SCONST .)
    RSHIFTEQUAL     reduce using rule 208 (string_literal_list -> SCONST .)
    ANDEQUAL        reduce using rule 208 (string_literal_list -> SCONST .)
    OREQUAL         reduce using rule 208 (string_literal_list -> SCONST .)
    XOREQUAL        reduce using rule 208 (string_literal_list -> SCONST .)
    TIMES           reduce using rule 208 (string_literal_list -> SCONST .)
    DIVIDE          reduce using rule 208 (string_literal_list -> SCONST .)
    MOD             reduce using rule 208 (string_literal_list -> SCONST .)
    PLUS            reduce using rule 208 (string_literal_list -> SCONST .)
    MINUS           reduce using rule 208 (string_literal_list -> SCONST .)
    LSHIFT          reduce using rule 208 (string_literal_list -> SCONST .)
    RSHIFT          reduce using rule 208 (string_literal_list -> SCONST .)
    LT              reduce using rule 208 (string_literal_list -> SCONST .)
    GT              reduce using rule 208 (string_literal_list -> SCONST .)
    LE              reduce using rule 208 (string_literal_list -> SCONST .)
    GE              reduce using rule 208 (string_literal_list -> SCONST .)
    EQ              reduce using rule 208 (string_literal_list -> SCONST .)
    NE              reduce using rule 208 (string_literal_list -> SCONST .)
    AND             reduce using rule 208 (string_literal_list -> SCONST .)
    XOR             reduce using rule 208 (string_literal_list -> SCONST .)
    OR              reduce using rule 208 (string_literal_list -> SCONST .)
    LAND            reduce using rule 208 (string_literal_list -> SCONST .)
    CONDOP          reduce using rule 208 (string_literal_list -> SCONST .)
    LOR             reduce using rule 208 (string_literal_list -> SCONST .)
    RPAREN          reduce using rule 208 (string_literal_list -> SCONST .)
    COMMA           reduce using rule 208 (string_literal_list -> SCONST .)
    SEMI            reduce using rule 208 (string_literal_list -> SCONST .)
    RBRACE          reduce using rule 208 (string_literal_list -> SCONST .)
    COLON           reduce using rule 208 (string_literal_list -> SCONST .)
    RBRACKET        reduce using rule 208 (string_literal_list -> SCONST .)
    VOID            reduce using rule 208 (string_literal_list -> SCONST .)
    CHAR            reduce using rule 208 (string_literal_list -> SCONST .)
    SHORT           reduce using rule 208 (string_literal_list -> SCONST .)
    INT             reduce using rule 208 (string_literal_list -> SCONST .)
    LONG            reduce using rule 208 (string_literal_list -> SCONST .)
    FLOAT           reduce using rule 208 (string_literal_list -> SCONST .)
    DOUBLE          reduce using rule 208 (string_literal_list -> SCONST .)
    SIGNED          reduce using rule 208 (string_literal_list -> SCONST .)
    UNSIGNED        reduce using rule 208 (string_literal_list -> SCONST .)
    TYPEID          reduce using rule 208 (string_literal_list -> SCONST .)
    CONST           reduce using rule 208 (string_literal_list -> SCONST .)
    VOLATILE        reduce using rule 208 (string_literal_list -> SCONST .)
    ENUM            reduce using rule 208 (string_literal_list -> SCONST .)
    STRUCT          reduce using rule 208 (string_literal_list -> SCONST .)
    UNION           reduce using rule 208 (string_literal_list -> SCONST .)


state 87

    (206) primary_expression -> constant .

    LBRACKET        reduce using rule 206 (primary_expression -> constant .)
    LPAREN          reduce using rule 206 (primary_expression -> constant .)
    PERIOD          reduce using rule 206 (primary_expression -> constant .)
    ARROW           reduce using rule 206 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 206 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 206 (primary_expression -> constant .)
    TIMES           reduce using rule 206 (primary_expression -> constant .)
    DIVIDE          reduce using rule 206 (primary_expression -> constant .)
    MOD             reduce using rule 206 (primary_expression -> constant .)
    PLUS            reduce using rule 206 (primary_expression -> constant .)
    MINUS           reduce using rule 206 (primary_expression -> constant .)
    LSHIFT          reduce using rule 206 (primary_expression -> constant .)
    RSHIFT          reduce using rule 206 (primary_expression -> constant .)
    LT              reduce using rule 206 (primary_expression -> constant .)
    GT              reduce using rule 206 (primary_expression -> constant .)
    LE              reduce using rule 206 (primary_expression -> constant .)
    GE              reduce using rule 206 (primary_expression -> constant .)
    EQ              reduce using rule 206 (primary_expression -> constant .)
    NE              reduce using rule 206 (primary_expression -> constant .)
    AND             reduce using rule 206 (primary_expression -> constant .)
    XOR             reduce using rule 206 (primary_expression -> constant .)
    OR              reduce using rule 206 (primary_expression -> constant .)
    LAND            reduce using rule 206 (primary_expression -> constant .)
    CONDOP          reduce using rule 206 (primary_expression -> constant .)
    LOR             reduce using rule 206 (primary_expression -> constant .)
    RBRACKET        reduce using rule 206 (primary_expression -> constant .)
    SEMI            reduce using rule 206 (primary_expression -> constant .)
    COMMA           reduce using rule 206 (primary_expression -> constant .)
    VOID            reduce using rule 206 (primary_expression -> constant .)
    CHAR            reduce using rule 206 (primary_expression -> constant .)
    SHORT           reduce using rule 206 (primary_expression -> constant .)
    INT             reduce using rule 206 (primary_expression -> constant .)
    LONG            reduce using rule 206 (primary_expression -> constant .)
    FLOAT           reduce using rule 206 (primary_expression -> constant .)
    DOUBLE          reduce using rule 206 (primary_expression -> constant .)
    SIGNED          reduce using rule 206 (primary_expression -> constant .)
    UNSIGNED        reduce using rule 206 (primary_expression -> constant .)
    TYPEID          reduce using rule 206 (primary_expression -> constant .)
    CONST           reduce using rule 206 (primary_expression -> constant .)
    VOLATILE        reduce using rule 206 (primary_expression -> constant .)
    ENUM            reduce using rule 206 (primary_expression -> constant .)
    STRUCT          reduce using rule 206 (primary_expression -> constant .)
    UNION           reduce using rule 206 (primary_expression -> constant .)
    RPAREN          reduce using rule 206 (primary_expression -> constant .)
    RBRACE          reduce using rule 206 (primary_expression -> constant .)
    COLON           reduce using rule 206 (primary_expression -> constant .)
    EQUALS          reduce using rule 206 (primary_expression -> constant .)
    TIMESEQUAL      reduce using rule 206 (primary_expression -> constant .)
    DIVEQUAL        reduce using rule 206 (primary_expression -> constant .)
    MODEQUAL        reduce using rule 206 (primary_expression -> constant .)
    PLUSEQUAL       reduce using rule 206 (primary_expression -> constant .)
    MINUSEQUAL      reduce using rule 206 (primary_expression -> constant .)
    LSHIFTEQUAL     reduce using rule 206 (primary_expression -> constant .)
    RSHIFTEQUAL     reduce using rule 206 (primary_expression -> constant .)
    ANDEQUAL        reduce using rule 206 (primary_expression -> constant .)
    OREQUAL         reduce using rule 206 (primary_expression -> constant .)
    XOREQUAL        reduce using rule 206 (primary_expression -> constant .)


state 88

    (165) equality_expression -> relational_expression .
    (169) relational_expression -> relational_expression . LT shift_expression
    (170) relational_expression -> relational_expression . GT shift_expression
    (171) relational_expression -> relational_expression . LE shift_expression
    (172) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 165 (equality_expression -> relational_expression .)
    NE              reduce using rule 165 (equality_expression -> relational_expression .)
    AND             reduce using rule 165 (equality_expression -> relational_expression .)
    XOR             reduce using rule 165 (equality_expression -> relational_expression .)
    OR              reduce using rule 165 (equality_expression -> relational_expression .)
    LAND            reduce using rule 165 (equality_expression -> relational_expression .)
    CONDOP          reduce using rule 165 (equality_expression -> relational_expression .)
    LOR             reduce using rule 165 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 165 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 165 (equality_expression -> relational_expression .)
    VOID            reduce using rule 165 (equality_expression -> relational_expression .)
    CHAR            reduce using rule 165 (equality_expression -> relational_expression .)
    SHORT           reduce using rule 165 (equality_expression -> relational_expression .)
    INT             reduce using rule 165 (equality_expression -> relational_expression .)
    LONG            reduce using rule 165 (equality_expression -> relational_expression .)
    FLOAT           reduce using rule 165 (equality_expression -> relational_expression .)
    DOUBLE          reduce using rule 165 (equality_expression -> relational_expression .)
    SIGNED          reduce using rule 165 (equality_expression -> relational_expression .)
    UNSIGNED        reduce using rule 165 (equality_expression -> relational_expression .)
    TYPEID          reduce using rule 165 (equality_expression -> relational_expression .)
    CONST           reduce using rule 165 (equality_expression -> relational_expression .)
    VOLATILE        reduce using rule 165 (equality_expression -> relational_expression .)
    ENUM            reduce using rule 165 (equality_expression -> relational_expression .)
    STRUCT          reduce using rule 165 (equality_expression -> relational_expression .)
    UNION           reduce using rule 165 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 165 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 165 (equality_expression -> relational_expression .)
    COLON           reduce using rule 165 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 165 (equality_expression -> relational_expression .)
    LT              shift and go to state 160
    GT              shift and go to state 161
    LE              shift and go to state 162
    GE              shift and go to state 159


state 89

    (191) unary_operator -> AND .

    LPAREN          reduce using rule 191 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 191 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 191 (unary_operator -> AND .)
    SIZEOF          reduce using rule 191 (unary_operator -> AND .)
    AND             reduce using rule 191 (unary_operator -> AND .)
    TIMES           reduce using rule 191 (unary_operator -> AND .)
    PLUS            reduce using rule 191 (unary_operator -> AND .)
    MINUS           reduce using rule 191 (unary_operator -> AND .)
    NOT             reduce using rule 191 (unary_operator -> AND .)
    LNOT            reduce using rule 191 (unary_operator -> AND .)
    ID              reduce using rule 191 (unary_operator -> AND .)
    ICONST          reduce using rule 191 (unary_operator -> AND .)
    FCONST          reduce using rule 191 (unary_operator -> AND .)
    CCONST          reduce using rule 191 (unary_operator -> AND .)
    SCONST          reduce using rule 191 (unary_operator -> AND .)


state 90

    (168) relational_expression -> shift_expression .
    (174) shift_expression -> shift_expression . LSHIFT additive_expression
    (175) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 168 (relational_expression -> shift_expression .)
    GT              reduce using rule 168 (relational_expression -> shift_expression .)
    LE              reduce using rule 168 (relational_expression -> shift_expression .)
    GE              reduce using rule 168 (relational_expression -> shift_expression .)
    EQ              reduce using rule 168 (relational_expression -> shift_expression .)
    NE              reduce using rule 168 (relational_expression -> shift_expression .)
    AND             reduce using rule 168 (relational_expression -> shift_expression .)
    XOR             reduce using rule 168 (relational_expression -> shift_expression .)
    OR              reduce using rule 168 (relational_expression -> shift_expression .)
    LAND            reduce using rule 168 (relational_expression -> shift_expression .)
    CONDOP          reduce using rule 168 (relational_expression -> shift_expression .)
    LOR             reduce using rule 168 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 168 (relational_expression -> shift_expression .)
    SEMI            reduce using rule 168 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 168 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 168 (relational_expression -> shift_expression .)
    VOID            reduce using rule 168 (relational_expression -> shift_expression .)
    CHAR            reduce using rule 168 (relational_expression -> shift_expression .)
    SHORT           reduce using rule 168 (relational_expression -> shift_expression .)
    INT             reduce using rule 168 (relational_expression -> shift_expression .)
    LONG            reduce using rule 168 (relational_expression -> shift_expression .)
    FLOAT           reduce using rule 168 (relational_expression -> shift_expression .)
    DOUBLE          reduce using rule 168 (relational_expression -> shift_expression .)
    SIGNED          reduce using rule 168 (relational_expression -> shift_expression .)
    UNSIGNED        reduce using rule 168 (relational_expression -> shift_expression .)
    TYPEID          reduce using rule 168 (relational_expression -> shift_expression .)
    CONST           reduce using rule 168 (relational_expression -> shift_expression .)
    VOLATILE        reduce using rule 168 (relational_expression -> shift_expression .)
    ENUM            reduce using rule 168 (relational_expression -> shift_expression .)
    STRUCT          reduce using rule 168 (relational_expression -> shift_expression .)
    UNION           reduce using rule 168 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 168 (relational_expression -> shift_expression .)
    COLON           reduce using rule 168 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 163


state 91

    (197) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 197 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 197 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 197 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 197 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 197 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 197 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 197 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 197 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 197 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 197 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 197 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 197 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 197 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 197 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 197 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 197 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 197 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 197 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 197 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 197 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 197 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 197 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 197 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 197 (postfix_expression -> primary_expression .)
    LT              reduce using rule 197 (postfix_expression -> primary_expression .)
    GT              reduce using rule 197 (postfix_expression -> primary_expression .)
    LE              reduce using rule 197 (postfix_expression -> primary_expression .)
    GE              reduce using rule 197 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 197 (postfix_expression -> primary_expression .)
    NE              reduce using rule 197 (postfix_expression -> primary_expression .)
    AND             reduce using rule 197 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 197 (postfix_expression -> primary_expression .)
    OR              reduce using rule 197 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 197 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 197 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 197 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 197 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 197 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 197 (postfix_expression -> primary_expression .)
    VOID            reduce using rule 197 (postfix_expression -> primary_expression .)
    CHAR            reduce using rule 197 (postfix_expression -> primary_expression .)
    SHORT           reduce using rule 197 (postfix_expression -> primary_expression .)
    INT             reduce using rule 197 (postfix_expression -> primary_expression .)
    LONG            reduce using rule 197 (postfix_expression -> primary_expression .)
    FLOAT           reduce using rule 197 (postfix_expression -> primary_expression .)
    DOUBLE          reduce using rule 197 (postfix_expression -> primary_expression .)
    SIGNED          reduce using rule 197 (postfix_expression -> primary_expression .)
    UNSIGNED        reduce using rule 197 (postfix_expression -> primary_expression .)
    TYPEID          reduce using rule 197 (postfix_expression -> primary_expression .)
    CONST           reduce using rule 197 (postfix_expression -> primary_expression .)
    VOLATILE        reduce using rule 197 (postfix_expression -> primary_expression .)
    ENUM            reduce using rule 197 (postfix_expression -> primary_expression .)
    STRUCT          reduce using rule 197 (postfix_expression -> primary_expression .)
    UNION           reduce using rule 197 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 197 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 197 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 197 (postfix_expression -> primary_expression .)


state 92

    (189) unary_expression -> SIZEOF . unary_expression
    (190) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 166
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    identifier                     shift and go to state 106
    string_literal_list            shift and go to state 117
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 91

state 93

    (183) cast_expression -> unary_expression .

    TIMES           reduce using rule 183 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 183 (cast_expression -> unary_expression .)
    MOD             reduce using rule 183 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 183 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 183 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 183 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 183 (cast_expression -> unary_expression .)
    LT              reduce using rule 183 (cast_expression -> unary_expression .)
    GT              reduce using rule 183 (cast_expression -> unary_expression .)
    LE              reduce using rule 183 (cast_expression -> unary_expression .)
    GE              reduce using rule 183 (cast_expression -> unary_expression .)
    EQ              reduce using rule 183 (cast_expression -> unary_expression .)
    NE              reduce using rule 183 (cast_expression -> unary_expression .)
    AND             reduce using rule 183 (cast_expression -> unary_expression .)
    XOR             reduce using rule 183 (cast_expression -> unary_expression .)
    OR              reduce using rule 183 (cast_expression -> unary_expression .)
    LAND            reduce using rule 183 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 183 (cast_expression -> unary_expression .)
    LOR             reduce using rule 183 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 183 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 183 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 183 (cast_expression -> unary_expression .)
    VOID            reduce using rule 183 (cast_expression -> unary_expression .)
    CHAR            reduce using rule 183 (cast_expression -> unary_expression .)
    SHORT           reduce using rule 183 (cast_expression -> unary_expression .)
    INT             reduce using rule 183 (cast_expression -> unary_expression .)
    LONG            reduce using rule 183 (cast_expression -> unary_expression .)
    FLOAT           reduce using rule 183 (cast_expression -> unary_expression .)
    DOUBLE          reduce using rule 183 (cast_expression -> unary_expression .)
    SIGNED          reduce using rule 183 (cast_expression -> unary_expression .)
    UNSIGNED        reduce using rule 183 (cast_expression -> unary_expression .)
    TYPEID          reduce using rule 183 (cast_expression -> unary_expression .)
    CONST           reduce using rule 183 (cast_expression -> unary_expression .)
    VOLATILE        reduce using rule 183 (cast_expression -> unary_expression .)
    ENUM            reduce using rule 183 (cast_expression -> unary_expression .)
    STRUCT          reduce using rule 183 (cast_expression -> unary_expression .)
    UNION           reduce using rule 183 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 183 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 183 (cast_expression -> unary_expression .)
    COLON           reduce using rule 183 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 183 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 183 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 183 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 183 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 183 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 183 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 183 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 183 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 183 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 183 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 183 (cast_expression -> unary_expression .)


state 94

    (194) unary_operator -> MINUS .

    LPAREN          reduce using rule 194 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 194 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 194 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 194 (unary_operator -> MINUS .)
    AND             reduce using rule 194 (unary_operator -> MINUS .)
    TIMES           reduce using rule 194 (unary_operator -> MINUS .)
    PLUS            reduce using rule 194 (unary_operator -> MINUS .)
    MINUS           reduce using rule 194 (unary_operator -> MINUS .)
    NOT             reduce using rule 194 (unary_operator -> MINUS .)
    LNOT            reduce using rule 194 (unary_operator -> MINUS .)
    ID              reduce using rule 194 (unary_operator -> MINUS .)
    ICONST          reduce using rule 194 (unary_operator -> MINUS .)
    FCONST          reduce using rule 194 (unary_operator -> MINUS .)
    CCONST          reduce using rule 194 (unary_operator -> MINUS .)
    SCONST          reduce using rule 194 (unary_operator -> MINUS .)


state 95

    (173) shift_expression -> additive_expression .
    (177) additive_expression -> additive_expression . PLUS multiplicative_expression
    (178) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 173 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 173 (shift_expression -> additive_expression .)
    LT              reduce using rule 173 (shift_expression -> additive_expression .)
    GT              reduce using rule 173 (shift_expression -> additive_expression .)
    LE              reduce using rule 173 (shift_expression -> additive_expression .)
    GE              reduce using rule 173 (shift_expression -> additive_expression .)
    EQ              reduce using rule 173 (shift_expression -> additive_expression .)
    NE              reduce using rule 173 (shift_expression -> additive_expression .)
    AND             reduce using rule 173 (shift_expression -> additive_expression .)
    XOR             reduce using rule 173 (shift_expression -> additive_expression .)
    OR              reduce using rule 173 (shift_expression -> additive_expression .)
    LAND            reduce using rule 173 (shift_expression -> additive_expression .)
    CONDOP          reduce using rule 173 (shift_expression -> additive_expression .)
    LOR             reduce using rule 173 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 173 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 173 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 173 (shift_expression -> additive_expression .)
    SEMI            reduce using rule 173 (shift_expression -> additive_expression .)
    VOID            reduce using rule 173 (shift_expression -> additive_expression .)
    CHAR            reduce using rule 173 (shift_expression -> additive_expression .)
    SHORT           reduce using rule 173 (shift_expression -> additive_expression .)
    INT             reduce using rule 173 (shift_expression -> additive_expression .)
    LONG            reduce using rule 173 (shift_expression -> additive_expression .)
    FLOAT           reduce using rule 173 (shift_expression -> additive_expression .)
    DOUBLE          reduce using rule 173 (shift_expression -> additive_expression .)
    SIGNED          reduce using rule 173 (shift_expression -> additive_expression .)
    UNSIGNED        reduce using rule 173 (shift_expression -> additive_expression .)
    TYPEID          reduce using rule 173 (shift_expression -> additive_expression .)
    CONST           reduce using rule 173 (shift_expression -> additive_expression .)
    VOLATILE        reduce using rule 173 (shift_expression -> additive_expression .)
    ENUM            reduce using rule 173 (shift_expression -> additive_expression .)
    STRUCT          reduce using rule 173 (shift_expression -> additive_expression .)
    UNION           reduce using rule 173 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 173 (shift_expression -> additive_expression .)
    COLON           reduce using rule 173 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 96

    (179) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 179 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 179 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 179 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 179 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 179 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 179 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 179 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 179 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 179 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 179 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 179 (multiplicative_expression -> cast_expression .)
    EQ              reduce using rule 179 (multiplicative_expression -> cast_expression .)
    NE              reduce using rule 179 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 179 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 179 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 179 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 179 (multiplicative_expression -> cast_expression .)
    CONDOP          reduce using rule 179 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 179 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 179 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 179 (multiplicative_expression -> cast_expression .)
    SEMI            reduce using rule 179 (multiplicative_expression -> cast_expression .)
    RBRACKET        reduce using rule 179 (multiplicative_expression -> cast_expression .)
    VOID            reduce using rule 179 (multiplicative_expression -> cast_expression .)
    CHAR            reduce using rule 179 (multiplicative_expression -> cast_expression .)
    SHORT           reduce using rule 179 (multiplicative_expression -> cast_expression .)
    INT             reduce using rule 179 (multiplicative_expression -> cast_expression .)
    LONG            reduce using rule 179 (multiplicative_expression -> cast_expression .)
    FLOAT           reduce using rule 179 (multiplicative_expression -> cast_expression .)
    DOUBLE          reduce using rule 179 (multiplicative_expression -> cast_expression .)
    SIGNED          reduce using rule 179 (multiplicative_expression -> cast_expression .)
    UNSIGNED        reduce using rule 179 (multiplicative_expression -> cast_expression .)
    TYPEID          reduce using rule 179 (multiplicative_expression -> cast_expression .)
    CONST           reduce using rule 179 (multiplicative_expression -> cast_expression .)
    VOLATILE        reduce using rule 179 (multiplicative_expression -> cast_expression .)
    ENUM            reduce using rule 179 (multiplicative_expression -> cast_expression .)
    STRUCT          reduce using rule 179 (multiplicative_expression -> cast_expression .)
    UNION           reduce using rule 179 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 179 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 179 (multiplicative_expression -> cast_expression .)


state 97

    (155) logical_or_expression -> logical_and_expression .
    (158) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    VOID            reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    CHAR            reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    SHORT           reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    INT             reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    LONG            reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    FLOAT           reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    DOUBLE          reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    SIGNED          reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    UNSIGNED        reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    TYPEID          reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    CONST           reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    VOLATILE        reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    ENUM            reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    STRUCT          reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    UNION           reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 155 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 169


state 98

    (195) unary_operator -> NOT .

    LPAREN          reduce using rule 195 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 195 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 195 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 195 (unary_operator -> NOT .)
    AND             reduce using rule 195 (unary_operator -> NOT .)
    TIMES           reduce using rule 195 (unary_operator -> NOT .)
    PLUS            reduce using rule 195 (unary_operator -> NOT .)
    MINUS           reduce using rule 195 (unary_operator -> NOT .)
    NOT             reduce using rule 195 (unary_operator -> NOT .)
    LNOT            reduce using rule 195 (unary_operator -> NOT .)
    ID              reduce using rule 195 (unary_operator -> NOT .)
    ICONST          reduce using rule 195 (unary_operator -> NOT .)
    FCONST          reduce using rule 195 (unary_operator -> NOT .)
    CCONST          reduce using rule 195 (unary_operator -> NOT .)
    SCONST          reduce using rule 195 (unary_operator -> NOT .)


state 99

    (163) and_expression -> equality_expression .
    (166) equality_expression -> equality_expression . EQ relational_expression
    (167) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 163 (and_expression -> equality_expression .)
    XOR             reduce using rule 163 (and_expression -> equality_expression .)
    OR              reduce using rule 163 (and_expression -> equality_expression .)
    LAND            reduce using rule 163 (and_expression -> equality_expression .)
    CONDOP          reduce using rule 163 (and_expression -> equality_expression .)
    LOR             reduce using rule 163 (and_expression -> equality_expression .)
    COMMA           reduce using rule 163 (and_expression -> equality_expression .)
    SEMI            reduce using rule 163 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 163 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 163 (and_expression -> equality_expression .)
    COLON           reduce using rule 163 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 163 (and_expression -> equality_expression .)
    VOID            reduce using rule 163 (and_expression -> equality_expression .)
    CHAR            reduce using rule 163 (and_expression -> equality_expression .)
    SHORT           reduce using rule 163 (and_expression -> equality_expression .)
    INT             reduce using rule 163 (and_expression -> equality_expression .)
    LONG            reduce using rule 163 (and_expression -> equality_expression .)
    FLOAT           reduce using rule 163 (and_expression -> equality_expression .)
    DOUBLE          reduce using rule 163 (and_expression -> equality_expression .)
    SIGNED          reduce using rule 163 (and_expression -> equality_expression .)
    UNSIGNED        reduce using rule 163 (and_expression -> equality_expression .)
    TYPEID          reduce using rule 163 (and_expression -> equality_expression .)
    CONST           reduce using rule 163 (and_expression -> equality_expression .)
    VOLATILE        reduce using rule 163 (and_expression -> equality_expression .)
    ENUM            reduce using rule 163 (and_expression -> equality_expression .)
    STRUCT          reduce using rule 163 (and_expression -> equality_expression .)
    UNION           reduce using rule 163 (and_expression -> equality_expression .)
    EQ              shift and go to state 171
    NE              shift and go to state 170


state 100

    (71) direct_declarator -> direct_declarator LBRACKET constant_expression_option . RBRACKET

    RBRACKET        shift and go to state 172


state 101

    (185) unary_expression -> postfix_expression .
    (198) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (199) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> postfix_expression . LPAREN RPAREN
    (201) postfix_expression -> postfix_expression . PERIOD identifier
    (202) postfix_expression -> postfix_expression . ARROW identifier
    (203) postfix_expression -> postfix_expression . PLUSPLUS
    (204) postfix_expression -> postfix_expression . MINUSMINUS

    EQUALS          reduce using rule 185 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 185 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 185 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 185 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 185 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 185 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 185 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 185 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 185 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 185 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 185 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 185 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 185 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 185 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 185 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 185 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 185 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 185 (unary_expression -> postfix_expression .)
    LT              reduce using rule 185 (unary_expression -> postfix_expression .)
    GT              reduce using rule 185 (unary_expression -> postfix_expression .)
    LE              reduce using rule 185 (unary_expression -> postfix_expression .)
    GE              reduce using rule 185 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 185 (unary_expression -> postfix_expression .)
    NE              reduce using rule 185 (unary_expression -> postfix_expression .)
    AND             reduce using rule 185 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 185 (unary_expression -> postfix_expression .)
    OR              reduce using rule 185 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 185 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 185 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 185 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 185 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 185 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 185 (unary_expression -> postfix_expression .)
    VOID            reduce using rule 185 (unary_expression -> postfix_expression .)
    CHAR            reduce using rule 185 (unary_expression -> postfix_expression .)
    SHORT           reduce using rule 185 (unary_expression -> postfix_expression .)
    INT             reduce using rule 185 (unary_expression -> postfix_expression .)
    LONG            reduce using rule 185 (unary_expression -> postfix_expression .)
    FLOAT           reduce using rule 185 (unary_expression -> postfix_expression .)
    DOUBLE          reduce using rule 185 (unary_expression -> postfix_expression .)
    SIGNED          reduce using rule 185 (unary_expression -> postfix_expression .)
    UNSIGNED        reduce using rule 185 (unary_expression -> postfix_expression .)
    TYPEID          reduce using rule 185 (unary_expression -> postfix_expression .)
    CONST           reduce using rule 185 (unary_expression -> postfix_expression .)
    VOLATILE        reduce using rule 185 (unary_expression -> postfix_expression .)
    ENUM            reduce using rule 185 (unary_expression -> postfix_expression .)
    STRUCT          reduce using rule 185 (unary_expression -> postfix_expression .)
    UNION           reduce using rule 185 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 185 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 185 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 185 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 177
    LPAREN          shift and go to state 178
    PERIOD          shift and go to state 174
    ARROW           shift and go to state 176
    PLUSPLUS        shift and go to state 175
    MINUSMINUS      shift and go to state 173


state 102

    (176) additive_expression -> multiplicative_expression .
    (180) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (181) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (182) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 176 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 176 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 176 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 176 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 176 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 176 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 176 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 176 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 176 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 176 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 176 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 176 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 176 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 176 (additive_expression -> multiplicative_expression .)
    CONDOP          reduce using rule 176 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 176 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 176 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 176 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 176 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 176 (additive_expression -> multiplicative_expression .)
    VOID            reduce using rule 176 (additive_expression -> multiplicative_expression .)
    CHAR            reduce using rule 176 (additive_expression -> multiplicative_expression .)
    SHORT           reduce using rule 176 (additive_expression -> multiplicative_expression .)
    INT             reduce using rule 176 (additive_expression -> multiplicative_expression .)
    LONG            reduce using rule 176 (additive_expression -> multiplicative_expression .)
    FLOAT           reduce using rule 176 (additive_expression -> multiplicative_expression .)
    DOUBLE          reduce using rule 176 (additive_expression -> multiplicative_expression .)
    SIGNED          reduce using rule 176 (additive_expression -> multiplicative_expression .)
    UNSIGNED        reduce using rule 176 (additive_expression -> multiplicative_expression .)
    TYPEID          reduce using rule 176 (additive_expression -> multiplicative_expression .)
    CONST           reduce using rule 176 (additive_expression -> multiplicative_expression .)
    VOLATILE        reduce using rule 176 (additive_expression -> multiplicative_expression .)
    ENUM            reduce using rule 176 (additive_expression -> multiplicative_expression .)
    STRUCT          reduce using rule 176 (additive_expression -> multiplicative_expression .)
    UNION           reduce using rule 176 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 176 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 176 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 179
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 180


state 103

    (192) unary_operator -> TIMES .

    LPAREN          reduce using rule 192 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 192 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 192 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 192 (unary_operator -> TIMES .)
    AND             reduce using rule 192 (unary_operator -> TIMES .)
    TIMES           reduce using rule 192 (unary_operator -> TIMES .)
    PLUS            reduce using rule 192 (unary_operator -> TIMES .)
    MINUS           reduce using rule 192 (unary_operator -> TIMES .)
    NOT             reduce using rule 192 (unary_operator -> TIMES .)
    LNOT            reduce using rule 192 (unary_operator -> TIMES .)
    ID              reduce using rule 192 (unary_operator -> TIMES .)
    ICONST          reduce using rule 192 (unary_operator -> TIMES .)
    FCONST          reduce using rule 192 (unary_operator -> TIMES .)
    CCONST          reduce using rule 192 (unary_operator -> TIMES .)
    SCONST          reduce using rule 192 (unary_operator -> TIMES .)


state 104

    (188) unary_expression -> unary_operator . cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    cast_expression                shift and go to state 182
    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    identifier                     shift and go to state 106
    string_literal_list            shift and go to state 117
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 91

state 105

    (213) constant -> ICONST .

    LBRACKET        reduce using rule 213 (constant -> ICONST .)
    LPAREN          reduce using rule 213 (constant -> ICONST .)
    PERIOD          reduce using rule 213 (constant -> ICONST .)
    ARROW           reduce using rule 213 (constant -> ICONST .)
    PLUSPLUS        reduce using rule 213 (constant -> ICONST .)
    MINUSMINUS      reduce using rule 213 (constant -> ICONST .)
    TIMES           reduce using rule 213 (constant -> ICONST .)
    DIVIDE          reduce using rule 213 (constant -> ICONST .)
    MOD             reduce using rule 213 (constant -> ICONST .)
    PLUS            reduce using rule 213 (constant -> ICONST .)
    MINUS           reduce using rule 213 (constant -> ICONST .)
    LSHIFT          reduce using rule 213 (constant -> ICONST .)
    RSHIFT          reduce using rule 213 (constant -> ICONST .)
    LT              reduce using rule 213 (constant -> ICONST .)
    GT              reduce using rule 213 (constant -> ICONST .)
    LE              reduce using rule 213 (constant -> ICONST .)
    GE              reduce using rule 213 (constant -> ICONST .)
    EQ              reduce using rule 213 (constant -> ICONST .)
    NE              reduce using rule 213 (constant -> ICONST .)
    AND             reduce using rule 213 (constant -> ICONST .)
    XOR             reduce using rule 213 (constant -> ICONST .)
    OR              reduce using rule 213 (constant -> ICONST .)
    LAND            reduce using rule 213 (constant -> ICONST .)
    CONDOP          reduce using rule 213 (constant -> ICONST .)
    LOR             reduce using rule 213 (constant -> ICONST .)
    RBRACKET        reduce using rule 213 (constant -> ICONST .)
    EQUALS          reduce using rule 213 (constant -> ICONST .)
    TIMESEQUAL      reduce using rule 213 (constant -> ICONST .)
    DIVEQUAL        reduce using rule 213 (constant -> ICONST .)
    MODEQUAL        reduce using rule 213 (constant -> ICONST .)
    PLUSEQUAL       reduce using rule 213 (constant -> ICONST .)
    MINUSEQUAL      reduce using rule 213 (constant -> ICONST .)
    LSHIFTEQUAL     reduce using rule 213 (constant -> ICONST .)
    RSHIFTEQUAL     reduce using rule 213 (constant -> ICONST .)
    ANDEQUAL        reduce using rule 213 (constant -> ICONST .)
    OREQUAL         reduce using rule 213 (constant -> ICONST .)
    XOREQUAL        reduce using rule 213 (constant -> ICONST .)
    SEMI            reduce using rule 213 (constant -> ICONST .)
    COMMA           reduce using rule 213 (constant -> ICONST .)
    VOID            reduce using rule 213 (constant -> ICONST .)
    CHAR            reduce using rule 213 (constant -> ICONST .)
    SHORT           reduce using rule 213 (constant -> ICONST .)
    INT             reduce using rule 213 (constant -> ICONST .)
    LONG            reduce using rule 213 (constant -> ICONST .)
    FLOAT           reduce using rule 213 (constant -> ICONST .)
    DOUBLE          reduce using rule 213 (constant -> ICONST .)
    SIGNED          reduce using rule 213 (constant -> ICONST .)
    UNSIGNED        reduce using rule 213 (constant -> ICONST .)
    TYPEID          reduce using rule 213 (constant -> ICONST .)
    CONST           reduce using rule 213 (constant -> ICONST .)
    VOLATILE        reduce using rule 213 (constant -> ICONST .)
    ENUM            reduce using rule 213 (constant -> ICONST .)
    STRUCT          reduce using rule 213 (constant -> ICONST .)
    UNION           reduce using rule 213 (constant -> ICONST .)
    RPAREN          reduce using rule 213 (constant -> ICONST .)
    RBRACE          reduce using rule 213 (constant -> ICONST .)
    COLON           reduce using rule 213 (constant -> ICONST .)


state 106

    (205) primary_expression -> identifier .

    LBRACKET        reduce using rule 205 (primary_expression -> identifier .)
    LPAREN          reduce using rule 205 (primary_expression -> identifier .)
    PERIOD          reduce using rule 205 (primary_expression -> identifier .)
    ARROW           reduce using rule 205 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 205 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 205 (primary_expression -> identifier .)
    TIMES           reduce using rule 205 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 205 (primary_expression -> identifier .)
    MOD             reduce using rule 205 (primary_expression -> identifier .)
    PLUS            reduce using rule 205 (primary_expression -> identifier .)
    MINUS           reduce using rule 205 (primary_expression -> identifier .)
    LSHIFT          reduce using rule 205 (primary_expression -> identifier .)
    RSHIFT          reduce using rule 205 (primary_expression -> identifier .)
    LT              reduce using rule 205 (primary_expression -> identifier .)
    GT              reduce using rule 205 (primary_expression -> identifier .)
    LE              reduce using rule 205 (primary_expression -> identifier .)
    GE              reduce using rule 205 (primary_expression -> identifier .)
    EQ              reduce using rule 205 (primary_expression -> identifier .)
    NE              reduce using rule 205 (primary_expression -> identifier .)
    AND             reduce using rule 205 (primary_expression -> identifier .)
    XOR             reduce using rule 205 (primary_expression -> identifier .)
    OR              reduce using rule 205 (primary_expression -> identifier .)
    LAND            reduce using rule 205 (primary_expression -> identifier .)
    CONDOP          reduce using rule 205 (primary_expression -> identifier .)
    LOR             reduce using rule 205 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 205 (primary_expression -> identifier .)
    SEMI            reduce using rule 205 (primary_expression -> identifier .)
    COMMA           reduce using rule 205 (primary_expression -> identifier .)
    VOID            reduce using rule 205 (primary_expression -> identifier .)
    CHAR            reduce using rule 205 (primary_expression -> identifier .)
    SHORT           reduce using rule 205 (primary_expression -> identifier .)
    INT             reduce using rule 205 (primary_expression -> identifier .)
    LONG            reduce using rule 205 (primary_expression -> identifier .)
    FLOAT           reduce using rule 205 (primary_expression -> identifier .)
    DOUBLE          reduce using rule 205 (primary_expression -> identifier .)
    SIGNED          reduce using rule 205 (primary_expression -> identifier .)
    UNSIGNED        reduce using rule 205 (primary_expression -> identifier .)
    TYPEID          reduce using rule 205 (primary_expression -> identifier .)
    CONST           reduce using rule 205 (primary_expression -> identifier .)
    VOLATILE        reduce using rule 205 (primary_expression -> identifier .)
    ENUM            reduce using rule 205 (primary_expression -> identifier .)
    STRUCT          reduce using rule 205 (primary_expression -> identifier .)
    UNION           reduce using rule 205 (primary_expression -> identifier .)
    RPAREN          reduce using rule 205 (primary_expression -> identifier .)
    RBRACE          reduce using rule 205 (primary_expression -> identifier .)
    COLON           reduce using rule 205 (primary_expression -> identifier .)
    EQUALS          reduce using rule 205 (primary_expression -> identifier .)
    TIMESEQUAL      reduce using rule 205 (primary_expression -> identifier .)
    DIVEQUAL        reduce using rule 205 (primary_expression -> identifier .)
    MODEQUAL        reduce using rule 205 (primary_expression -> identifier .)
    PLUSEQUAL       reduce using rule 205 (primary_expression -> identifier .)
    MINUSEQUAL      reduce using rule 205 (primary_expression -> identifier .)
    LSHIFTEQUAL     reduce using rule 205 (primary_expression -> identifier .)
    RSHIFTEQUAL     reduce using rule 205 (primary_expression -> identifier .)
    ANDEQUAL        reduce using rule 205 (primary_expression -> identifier .)
    OREQUAL         reduce using rule 205 (primary_expression -> identifier .)
    XOREQUAL        reduce using rule 205 (primary_expression -> identifier .)


state 107

    (186) unary_expression -> PLUSPLUS . unary_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 184
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    identifier                     shift and go to state 106
    string_literal_list            shift and go to state 117
    unary_expression               shift and go to state 183
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 91

state 108

    (154) constant_expression -> conditional_expression .

    RBRACE          reduce using rule 154 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 154 (constant_expression -> conditional_expression .)
    VOID            reduce using rule 154 (constant_expression -> conditional_expression .)
    CHAR            reduce using rule 154 (constant_expression -> conditional_expression .)
    SHORT           reduce using rule 154 (constant_expression -> conditional_expression .)
    INT             reduce using rule 154 (constant_expression -> conditional_expression .)
    LONG            reduce using rule 154 (constant_expression -> conditional_expression .)
    FLOAT           reduce using rule 154 (constant_expression -> conditional_expression .)
    DOUBLE          reduce using rule 154 (constant_expression -> conditional_expression .)
    SIGNED          reduce using rule 154 (constant_expression -> conditional_expression .)
    UNSIGNED        reduce using rule 154 (constant_expression -> conditional_expression .)
    TYPEID          reduce using rule 154 (constant_expression -> conditional_expression .)
    CONST           reduce using rule 154 (constant_expression -> conditional_expression .)
    VOLATILE        reduce using rule 154 (constant_expression -> conditional_expression .)
    ENUM            reduce using rule 154 (constant_expression -> conditional_expression .)
    STRUCT          reduce using rule 154 (constant_expression -> conditional_expression .)
    UNION           reduce using rule 154 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 154 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 154 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 154 (constant_expression -> conditional_expression .)


state 109

    (215) constant -> CCONST .

    LBRACKET        reduce using rule 215 (constant -> CCONST .)
    LPAREN          reduce using rule 215 (constant -> CCONST .)
    PERIOD          reduce using rule 215 (constant -> CCONST .)
    ARROW           reduce using rule 215 (constant -> CCONST .)
    PLUSPLUS        reduce using rule 215 (constant -> CCONST .)
    MINUSMINUS      reduce using rule 215 (constant -> CCONST .)
    TIMES           reduce using rule 215 (constant -> CCONST .)
    DIVIDE          reduce using rule 215 (constant -> CCONST .)
    MOD             reduce using rule 215 (constant -> CCONST .)
    PLUS            reduce using rule 215 (constant -> CCONST .)
    MINUS           reduce using rule 215 (constant -> CCONST .)
    LSHIFT          reduce using rule 215 (constant -> CCONST .)
    RSHIFT          reduce using rule 215 (constant -> CCONST .)
    LT              reduce using rule 215 (constant -> CCONST .)
    GT              reduce using rule 215 (constant -> CCONST .)
    LE              reduce using rule 215 (constant -> CCONST .)
    GE              reduce using rule 215 (constant -> CCONST .)
    EQ              reduce using rule 215 (constant -> CCONST .)
    NE              reduce using rule 215 (constant -> CCONST .)
    AND             reduce using rule 215 (constant -> CCONST .)
    XOR             reduce using rule 215 (constant -> CCONST .)
    OR              reduce using rule 215 (constant -> CCONST .)
    LAND            reduce using rule 215 (constant -> CCONST .)
    CONDOP          reduce using rule 215 (constant -> CCONST .)
    LOR             reduce using rule 215 (constant -> CCONST .)
    RBRACKET        reduce using rule 215 (constant -> CCONST .)
    EQUALS          reduce using rule 215 (constant -> CCONST .)
    TIMESEQUAL      reduce using rule 215 (constant -> CCONST .)
    DIVEQUAL        reduce using rule 215 (constant -> CCONST .)
    MODEQUAL        reduce using rule 215 (constant -> CCONST .)
    PLUSEQUAL       reduce using rule 215 (constant -> CCONST .)
    MINUSEQUAL      reduce using rule 215 (constant -> CCONST .)
    LSHIFTEQUAL     reduce using rule 215 (constant -> CCONST .)
    RSHIFTEQUAL     reduce using rule 215 (constant -> CCONST .)
    ANDEQUAL        reduce using rule 215 (constant -> CCONST .)
    OREQUAL         reduce using rule 215 (constant -> CCONST .)
    XOREQUAL        reduce using rule 215 (constant -> CCONST .)
    SEMI            reduce using rule 215 (constant -> CCONST .)
    COMMA           reduce using rule 215 (constant -> CCONST .)
    VOID            reduce using rule 215 (constant -> CCONST .)
    CHAR            reduce using rule 215 (constant -> CCONST .)
    SHORT           reduce using rule 215 (constant -> CCONST .)
    INT             reduce using rule 215 (constant -> CCONST .)
    LONG            reduce using rule 215 (constant -> CCONST .)
    FLOAT           reduce using rule 215 (constant -> CCONST .)
    DOUBLE          reduce using rule 215 (constant -> CCONST .)
    SIGNED          reduce using rule 215 (constant -> CCONST .)
    UNSIGNED        reduce using rule 215 (constant -> CCONST .)
    TYPEID          reduce using rule 215 (constant -> CCONST .)
    CONST           reduce using rule 215 (constant -> CCONST .)
    VOLATILE        reduce using rule 215 (constant -> CCONST .)
    ENUM            reduce using rule 215 (constant -> CCONST .)
    STRUCT          reduce using rule 215 (constant -> CCONST .)
    UNION           reduce using rule 215 (constant -> CCONST .)
    RPAREN          reduce using rule 215 (constant -> CCONST .)
    RBRACE          reduce using rule 215 (constant -> CCONST .)
    COLON           reduce using rule 215 (constant -> CCONST .)


state 110

    (159) inclusive_or_expression -> exclusive_or_expression .
    (162) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    CONDOP          reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI            reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    VOID            reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    CHAR            reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    SHORT           reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    INT             reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    LONG            reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    FLOAT           reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    DOUBLE          reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    SIGNED          reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    UNSIGNED        reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    TYPEID          reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    CONST           reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    VOLATILE        reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    ENUM            reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    STRUCT          reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    UNION           reduce using rule 159 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 185


state 111

    (187) unary_expression -> MINUSMINUS . unary_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 184
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    identifier                     shift and go to state 106
    string_literal_list            shift and go to state 117
    unary_expression               shift and go to state 186
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 91

state 112

    (196) unary_operator -> LNOT .

    LPAREN          reduce using rule 196 (unary_operator -> LNOT .)
    PLUSPLUS        reduce using rule 196 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 196 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 196 (unary_operator -> LNOT .)
    AND             reduce using rule 196 (unary_operator -> LNOT .)
    TIMES           reduce using rule 196 (unary_operator -> LNOT .)
    PLUS            reduce using rule 196 (unary_operator -> LNOT .)
    MINUS           reduce using rule 196 (unary_operator -> LNOT .)
    NOT             reduce using rule 196 (unary_operator -> LNOT .)
    LNOT            reduce using rule 196 (unary_operator -> LNOT .)
    ID              reduce using rule 196 (unary_operator -> LNOT .)
    ICONST          reduce using rule 196 (unary_operator -> LNOT .)
    FCONST          reduce using rule 196 (unary_operator -> LNOT .)
    CCONST          reduce using rule 196 (unary_operator -> LNOT .)
    SCONST          reduce using rule 196 (unary_operator -> LNOT .)


state 113

    (161) exclusive_or_expression -> and_expression .
    (164) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 161 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 161 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 161 (exclusive_or_expression -> and_expression .)
    CONDOP          reduce using rule 161 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 161 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 161 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 161 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 161 (exclusive_or_expression -> and_expression .)
    SEMI            reduce using rule 161 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 161 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 161 (exclusive_or_expression -> and_expression .)
    VOID            reduce using rule 161 (exclusive_or_expression -> and_expression .)
    CHAR            reduce using rule 161 (exclusive_or_expression -> and_expression .)
    SHORT           reduce using rule 161 (exclusive_or_expression -> and_expression .)
    INT             reduce using rule 161 (exclusive_or_expression -> and_expression .)
    LONG            reduce using rule 161 (exclusive_or_expression -> and_expression .)
    FLOAT           reduce using rule 161 (exclusive_or_expression -> and_expression .)
    DOUBLE          reduce using rule 161 (exclusive_or_expression -> and_expression .)
    SIGNED          reduce using rule 161 (exclusive_or_expression -> and_expression .)
    UNSIGNED        reduce using rule 161 (exclusive_or_expression -> and_expression .)
    TYPEID          reduce using rule 161 (exclusive_or_expression -> and_expression .)
    CONST           reduce using rule 161 (exclusive_or_expression -> and_expression .)
    VOLATILE        reduce using rule 161 (exclusive_or_expression -> and_expression .)
    ENUM            reduce using rule 161 (exclusive_or_expression -> and_expression .)
    STRUCT          reduce using rule 161 (exclusive_or_expression -> and_expression .)
    UNION           reduce using rule 161 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 187


state 114

    (106) constant_expression_option -> constant_expression .

    RBRACKET        reduce using rule 106 (constant_expression_option -> constant_expression .)


state 115

    (214) constant -> FCONST .

    LBRACKET        reduce using rule 214 (constant -> FCONST .)
    LPAREN          reduce using rule 214 (constant -> FCONST .)
    PERIOD          reduce using rule 214 (constant -> FCONST .)
    ARROW           reduce using rule 214 (constant -> FCONST .)
    PLUSPLUS        reduce using rule 214 (constant -> FCONST .)
    MINUSMINUS      reduce using rule 214 (constant -> FCONST .)
    TIMES           reduce using rule 214 (constant -> FCONST .)
    DIVIDE          reduce using rule 214 (constant -> FCONST .)
    MOD             reduce using rule 214 (constant -> FCONST .)
    PLUS            reduce using rule 214 (constant -> FCONST .)
    MINUS           reduce using rule 214 (constant -> FCONST .)
    LSHIFT          reduce using rule 214 (constant -> FCONST .)
    RSHIFT          reduce using rule 214 (constant -> FCONST .)
    LT              reduce using rule 214 (constant -> FCONST .)
    GT              reduce using rule 214 (constant -> FCONST .)
    LE              reduce using rule 214 (constant -> FCONST .)
    GE              reduce using rule 214 (constant -> FCONST .)
    EQ              reduce using rule 214 (constant -> FCONST .)
    NE              reduce using rule 214 (constant -> FCONST .)
    AND             reduce using rule 214 (constant -> FCONST .)
    XOR             reduce using rule 214 (constant -> FCONST .)
    OR              reduce using rule 214 (constant -> FCONST .)
    LAND            reduce using rule 214 (constant -> FCONST .)
    CONDOP          reduce using rule 214 (constant -> FCONST .)
    LOR             reduce using rule 214 (constant -> FCONST .)
    RBRACKET        reduce using rule 214 (constant -> FCONST .)
    EQUALS          reduce using rule 214 (constant -> FCONST .)
    TIMESEQUAL      reduce using rule 214 (constant -> FCONST .)
    DIVEQUAL        reduce using rule 214 (constant -> FCONST .)
    MODEQUAL        reduce using rule 214 (constant -> FCONST .)
    PLUSEQUAL       reduce using rule 214 (constant -> FCONST .)
    MINUSEQUAL      reduce using rule 214 (constant -> FCONST .)
    LSHIFTEQUAL     reduce using rule 214 (constant -> FCONST .)
    RSHIFTEQUAL     reduce using rule 214 (constant -> FCONST .)
    ANDEQUAL        reduce using rule 214 (constant -> FCONST .)
    OREQUAL         reduce using rule 214 (constant -> FCONST .)
    XOREQUAL        reduce using rule 214 (constant -> FCONST .)
    SEMI            reduce using rule 214 (constant -> FCONST .)
    COMMA           reduce using rule 214 (constant -> FCONST .)
    VOID            reduce using rule 214 (constant -> FCONST .)
    CHAR            reduce using rule 214 (constant -> FCONST .)
    SHORT           reduce using rule 214 (constant -> FCONST .)
    INT             reduce using rule 214 (constant -> FCONST .)
    LONG            reduce using rule 214 (constant -> FCONST .)
    FLOAT           reduce using rule 214 (constant -> FCONST .)
    DOUBLE          reduce using rule 214 (constant -> FCONST .)
    SIGNED          reduce using rule 214 (constant -> FCONST .)
    UNSIGNED        reduce using rule 214 (constant -> FCONST .)
    TYPEID          reduce using rule 214 (constant -> FCONST .)
    CONST           reduce using rule 214 (constant -> FCONST .)
    VOLATILE        reduce using rule 214 (constant -> FCONST .)
    ENUM            reduce using rule 214 (constant -> FCONST .)
    STRUCT          reduce using rule 214 (constant -> FCONST .)
    UNION           reduce using rule 214 (constant -> FCONST .)
    RPAREN          reduce using rule 214 (constant -> FCONST .)
    RBRACE          reduce using rule 214 (constant -> FCONST .)
    COLON           reduce using rule 214 (constant -> FCONST .)


state 116

    (105) constant_expression_option -> empty .

    RBRACKET        reduce using rule 105 (constant_expression_option -> empty .)


state 117

    (207) primary_expression -> string_literal_list .
    (209) string_literal_list -> string_literal_list . SCONST

    LBRACKET        reduce using rule 207 (primary_expression -> string_literal_list .)
    LPAREN          reduce using rule 207 (primary_expression -> string_literal_list .)
    PERIOD          reduce using rule 207 (primary_expression -> string_literal_list .)
    ARROW           reduce using rule 207 (primary_expression -> string_literal_list .)
    PLUSPLUS        reduce using rule 207 (primary_expression -> string_literal_list .)
    MINUSMINUS      reduce using rule 207 (primary_expression -> string_literal_list .)
    TIMES           reduce using rule 207 (primary_expression -> string_literal_list .)
    DIVIDE          reduce using rule 207 (primary_expression -> string_literal_list .)
    MOD             reduce using rule 207 (primary_expression -> string_literal_list .)
    PLUS            reduce using rule 207 (primary_expression -> string_literal_list .)
    MINUS           reduce using rule 207 (primary_expression -> string_literal_list .)
    LSHIFT          reduce using rule 207 (primary_expression -> string_literal_list .)
    RSHIFT          reduce using rule 207 (primary_expression -> string_literal_list .)
    LT              reduce using rule 207 (primary_expression -> string_literal_list .)
    GT              reduce using rule 207 (primary_expression -> string_literal_list .)
    LE              reduce using rule 207 (primary_expression -> string_literal_list .)
    GE              reduce using rule 207 (primary_expression -> string_literal_list .)
    EQ              reduce using rule 207 (primary_expression -> string_literal_list .)
    NE              reduce using rule 207 (primary_expression -> string_literal_list .)
    AND             reduce using rule 207 (primary_expression -> string_literal_list .)
    XOR             reduce using rule 207 (primary_expression -> string_literal_list .)
    OR              reduce using rule 207 (primary_expression -> string_literal_list .)
    LAND            reduce using rule 207 (primary_expression -> string_literal_list .)
    CONDOP          reduce using rule 207 (primary_expression -> string_literal_list .)
    LOR             reduce using rule 207 (primary_expression -> string_literal_list .)
    RBRACKET        reduce using rule 207 (primary_expression -> string_literal_list .)
    SEMI            reduce using rule 207 (primary_expression -> string_literal_list .)
    COMMA           reduce using rule 207 (primary_expression -> string_literal_list .)
    VOID            reduce using rule 207 (primary_expression -> string_literal_list .)
    CHAR            reduce using rule 207 (primary_expression -> string_literal_list .)
    SHORT           reduce using rule 207 (primary_expression -> string_literal_list .)
    INT             reduce using rule 207 (primary_expression -> string_literal_list .)
    LONG            reduce using rule 207 (primary_expression -> string_literal_list .)
    FLOAT           reduce using rule 207 (primary_expression -> string_literal_list .)
    DOUBLE          reduce using rule 207 (primary_expression -> string_literal_list .)
    SIGNED          reduce using rule 207 (primary_expression -> string_literal_list .)
    UNSIGNED        reduce using rule 207 (primary_expression -> string_literal_list .)
    TYPEID          reduce using rule 207 (primary_expression -> string_literal_list .)
    CONST           reduce using rule 207 (primary_expression -> string_literal_list .)
    VOLATILE        reduce using rule 207 (primary_expression -> string_literal_list .)
    ENUM            reduce using rule 207 (primary_expression -> string_literal_list .)
    STRUCT          reduce using rule 207 (primary_expression -> string_literal_list .)
    UNION           reduce using rule 207 (primary_expression -> string_literal_list .)
    RPAREN          reduce using rule 207 (primary_expression -> string_literal_list .)
    RBRACE          reduce using rule 207 (primary_expression -> string_literal_list .)
    COLON           reduce using rule 207 (primary_expression -> string_literal_list .)
    EQUALS          reduce using rule 207 (primary_expression -> string_literal_list .)
    TIMESEQUAL      reduce using rule 207 (primary_expression -> string_literal_list .)
    DIVEQUAL        reduce using rule 207 (primary_expression -> string_literal_list .)
    MODEQUAL        reduce using rule 207 (primary_expression -> string_literal_list .)
    PLUSEQUAL       reduce using rule 207 (primary_expression -> string_literal_list .)
    MINUSEQUAL      reduce using rule 207 (primary_expression -> string_literal_list .)
    LSHIFTEQUAL     reduce using rule 207 (primary_expression -> string_literal_list .)
    RSHIFTEQUAL     reduce using rule 207 (primary_expression -> string_literal_list .)
    ANDEQUAL        reduce using rule 207 (primary_expression -> string_literal_list .)
    OREQUAL         reduce using rule 207 (primary_expression -> string_literal_list .)
    XOREQUAL        reduce using rule 207 (primary_expression -> string_literal_list .)
    SCONST          shift and go to state 188


state 118

    (184) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (210) primary_expression -> LPAREN . expression RPAREN
    (94) type_name -> . specifier_qualifier_list abstract_declarator_option
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (51) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (52) specifier_qualifier_list -> . type_specifier
    (53) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_qualifier
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 3
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    equality_expression            shift and go to state 99
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    type_name                      shift and go to state 189
    constant                       shift and go to state 87
    enum_specifier                 shift and go to state 4
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    struct_or_union                shift and go to state 19
    conditional_expression         shift and go to state 143
    type_qualifier                 shift and go to state 79
    specifier_qualifier_list       shift and go to state 190
    exclusive_or_expression        shift and go to state 110
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    struct_or_union_specifier      shift and go to state 25
    string_literal_list            shift and go to state 117
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 192
    identifier                     shift and go to state 106
    type_specifier                 shift and go to state 77
    and_expression                 shift and go to state 113

state 119

    (83) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 83 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 83 (parameter_list -> parameter_declaration .)


state 120

    (73) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (88) identifier_list -> identifier_list . COMMA identifier

    RPAREN          shift and go to state 194
    COMMA           shift and go to state 193


state 121

    (85) parameter_declaration -> declaration_specifiers . declarator
    (86) parameter_declaration -> declaration_specifiers . abstract_declarator_option
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (95) abstract_declarator_option -> . empty
    (96) abstract_declarator_option -> . abstract_declarator
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (217) empty -> .
    (97) abstract_declarator -> . pointer
    (98) abstract_declarator -> . pointer direct_abstract_declarator
    (99) abstract_declarator -> . direct_abstract_declarator
    (216) identifier -> . ID
    (100) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (101) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (102) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (103) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (104) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN

    TIMES           shift and go to state 36
    LPAREN          shift and go to state 202
    COMMA           reduce using rule 217 (empty -> .)
    RPAREN          reduce using rule 217 (empty -> .)
    ID              shift and go to state 10
    LBRACKET        shift and go to state 200

    direct_declarator              shift and go to state 24
    direct_abstract_declarator     shift and go to state 195
    abstract_declarator_option     shift and go to state 196
    identifier                     shift and go to state 27
    pointer                        shift and go to state 198
    abstract_declarator            shift and go to state 199
    empty                          shift and go to state 201
    declarator                     shift and go to state 197

state 122

    (81) parameter_type_list -> parameter_list .
    (82) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (84) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 81 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 203


state 123

    (87) identifier_list -> identifier .

    RPAREN          reduce using rule 87 (identifier_list -> identifier .)
    COMMA           reduce using rule 87 (identifier_list -> identifier .)


state 124

    (74) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBRACKET        reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMI            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    AUTO            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    REGISTER        reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EXTERN          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEDEF         reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SHORT           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LONG            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEID          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CONST           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOLATILE        reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ENUM            reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STRUCT          reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNION           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COLON           reduce using rule 74 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 125

    (72) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 204


state 126

    (77) pointer -> TIMES type_qualifier_list pointer .

    LPAREN          reduce using rule 77 (pointer -> TIMES type_qualifier_list pointer .)
    ID              reduce using rule 77 (pointer -> TIMES type_qualifier_list pointer .)
    LBRACKET        reduce using rule 77 (pointer -> TIMES type_qualifier_list pointer .)
    COMMA           reduce using rule 77 (pointer -> TIMES type_qualifier_list pointer .)
    RPAREN          reduce using rule 77 (pointer -> TIMES type_qualifier_list pointer .)


state 127

    (80) type_qualifier_list -> type_qualifier_list type_qualifier .

    TIMES           reduce using rule 80 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 80 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 80 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 80 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 80 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 80 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 80 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 80 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 128

    (48) init_declarator -> declarator .
    (49) init_declarator -> declarator . EQUALS initializer

    SEMI            reduce using rule 48 (init_declarator -> declarator .)
    COMMA           reduce using rule 48 (init_declarator -> declarator .)
    EQUALS          shift and go to state 72


state 129

    (119) compound_statement -> LBRACE enter_scope . insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> LBRACE enter_scope . statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> LBRACE enter_scope . insert_mode declaration_list lookup_mode leave_scope RBRACE
    (219) insert_mode -> . empty
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (217) empty -> .
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    AUTO            reduce using rule 217 (empty -> .)
    REGISTER        reduce using rule 217 (empty -> .)
    STATIC          reduce using rule 217 (empty -> .)
    EXTERN          reduce using rule 217 (empty -> .)
    TYPEDEF         reduce using rule 217 (empty -> .)
    VOID            reduce using rule 217 (empty -> .)
    CHAR            reduce using rule 217 (empty -> .)
    SHORT           reduce using rule 217 (empty -> .)
    INT             reduce using rule 217 (empty -> .)
    LONG            reduce using rule 217 (empty -> .)
    FLOAT           reduce using rule 217 (empty -> .)
    DOUBLE          reduce using rule 217 (empty -> .)
    SIGNED          reduce using rule 217 (empty -> .)
    UNSIGNED        reduce using rule 217 (empty -> .)
    TYPEID          reduce using rule 217 (empty -> .)
    CONST           reduce using rule 217 (empty -> .)
    VOLATILE        reduce using rule 217 (empty -> .)
    ENUM            reduce using rule 217 (empty -> .)
    STRUCT          reduce using rule 217 (empty -> .)
    UNION           reduce using rule 217 (empty -> .)
    SEMI            reduce using rule 217 (empty -> .)
    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    iteration_statement            shift and go to state 209
    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    insert_mode                    shift and go to state 224
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    jump_statement                 shift and go to state 208
    postfix_expression             shift and go to state 101
    statement                      shift and go to state 207
    selection_statement            shift and go to state 210
    empty                          shift and go to state 214
    statement_list                 shift and go to state 219
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    and_expression                 shift and go to state 113
    expression                     shift and go to state 225
    expression_statement           shift and go to state 221
    logical_and_expression         shift and go to state 97

state 130

    (218) enter_scope -> empty .

    CASE            reduce using rule 218 (enter_scope -> empty .)
    DEFAULT         reduce using rule 218 (enter_scope -> empty .)
    LBRACE          reduce using rule 218 (enter_scope -> empty .)
    IF              reduce using rule 218 (enter_scope -> empty .)
    SWITCH          reduce using rule 218 (enter_scope -> empty .)
    WHILE           reduce using rule 218 (enter_scope -> empty .)
    FOR             reduce using rule 218 (enter_scope -> empty .)
    DO              reduce using rule 218 (enter_scope -> empty .)
    GOTO            reduce using rule 218 (enter_scope -> empty .)
    CONTINUE        reduce using rule 218 (enter_scope -> empty .)
    BREAK           reduce using rule 218 (enter_scope -> empty .)
    RETURN          reduce using rule 218 (enter_scope -> empty .)
    ID              reduce using rule 218 (enter_scope -> empty .)
    PLUSPLUS        reduce using rule 218 (enter_scope -> empty .)
    MINUSMINUS      reduce using rule 218 (enter_scope -> empty .)
    SIZEOF          reduce using rule 218 (enter_scope -> empty .)
    AND             reduce using rule 218 (enter_scope -> empty .)
    TIMES           reduce using rule 218 (enter_scope -> empty .)
    PLUS            reduce using rule 218 (enter_scope -> empty .)
    MINUS           reduce using rule 218 (enter_scope -> empty .)
    NOT             reduce using rule 218 (enter_scope -> empty .)
    LNOT            reduce using rule 218 (enter_scope -> empty .)
    LPAREN          reduce using rule 218 (enter_scope -> empty .)
    ICONST          reduce using rule 218 (enter_scope -> empty .)
    FCONST          reduce using rule 218 (enter_scope -> empty .)
    CCONST          reduce using rule 218 (enter_scope -> empty .)
    SCONST          reduce using rule 218 (enter_scope -> empty .)
    AUTO            reduce using rule 218 (enter_scope -> empty .)
    REGISTER        reduce using rule 218 (enter_scope -> empty .)
    STATIC          reduce using rule 218 (enter_scope -> empty .)
    EXTERN          reduce using rule 218 (enter_scope -> empty .)
    TYPEDEF         reduce using rule 218 (enter_scope -> empty .)
    VOID            reduce using rule 218 (enter_scope -> empty .)
    CHAR            reduce using rule 218 (enter_scope -> empty .)
    SHORT           reduce using rule 218 (enter_scope -> empty .)
    INT             reduce using rule 218 (enter_scope -> empty .)
    LONG            reduce using rule 218 (enter_scope -> empty .)
    FLOAT           reduce using rule 218 (enter_scope -> empty .)
    DOUBLE          reduce using rule 218 (enter_scope -> empty .)
    SIGNED          reduce using rule 218 (enter_scope -> empty .)
    UNSIGNED        reduce using rule 218 (enter_scope -> empty .)
    TYPEID          reduce using rule 218 (enter_scope -> empty .)
    CONST           reduce using rule 218 (enter_scope -> empty .)
    VOLATILE        reduce using rule 218 (enter_scope -> empty .)
    ENUM            reduce using rule 218 (enter_scope -> empty .)
    STRUCT          reduce using rule 218 (enter_scope -> empty .)
    UNION           reduce using rule 218 (enter_scope -> empty .)
    SEMI            reduce using rule 218 (enter_scope -> empty .)


state 131

    (122) compound_statement -> LBRACE RBRACE .

    WHILE           reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    CASE            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    GOTO            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    PLUSPLUS        reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    MINUSMINUS      reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    SIZEOF          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    AND             reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    NOT             reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    ICONST          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    FCONST          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    CCONST          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    SCONST          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    AUTO            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    REGISTER        reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    STATIC          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    EXTERN          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    TYPEDEF         reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    SHORT           reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    LONG            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    SIGNED          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    UNSIGNED        reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    TYPEID          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    CONST           reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    VOLATILE        reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    ENUM            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    STRUCT          reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    UNION           reduce using rule 122 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 122 (compound_statement -> LBRACE RBRACE .)


state 132

    (13) declaration_list -> declaration_list declaration .

    CASE            reduce using rule 13 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 13 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 13 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 13 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 13 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 13 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 13 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 13 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 13 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 13 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 13 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 13 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 13 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 13 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 13 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 13 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 13 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 13 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    PLUSPLUS        reduce using rule 13 (declaration_list -> declaration_list declaration .)
    MINUSMINUS      reduce using rule 13 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 13 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 13 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 13 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 13 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    ICONST          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    FCONST          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    CCONST          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    SCONST          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 13 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 13 (declaration_list -> declaration_list declaration .)


state 133

    (7) function_definition -> declarator declaration_list compound_statement .

    AUTO            reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    STATIC          reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    TYPEDEF         reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    VOID            reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    SHORT           reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    LONG            reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    TYPEID          reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    CONST           reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    TIMES           reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    ENUM            reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    ID              reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    UNION           reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 7 (function_definition -> declarator declaration_list compound_statement .)


state 134

    (70) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEID          reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 70 (direct_declarator -> LPAREN declarator RPAREN .)


state 135

    (61) enum_specifier -> ENUM LBRACE enumerator_list RBRACE .

    AUTO            reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TYPEDEF         reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TYPEID          reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ID              reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 61 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)


state 136

    (64) enumerator_list -> enumerator_list COMMA . enumerator
    (65) enumerator -> . identifier
    (66) enumerator -> . identifier EQUALS constant_expression
    (216) identifier -> . ID

    ID              shift and go to state 10

    identifier                     shift and go to state 65
    enumerator                     shift and go to state 229

state 137

    (66) enumerator -> identifier EQUALS . constant_expression
    (154) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant_expression            shift and go to state 230
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    identifier                     shift and go to state 106
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 108
    shift_expression               shift and go to state 90
    unary_expression               shift and go to state 93
    additive_expression            shift and go to state 95
    exclusive_or_expression        shift and go to state 110
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    and_expression                 shift and go to state 113
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 102

state 138

    (60) enum_specifier -> ENUM identifier LBRACE enumerator_list . RBRACE
    (64) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 231
    COMMA           shift and go to state 136


state 139

    (47) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 47 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 47 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 140

    (6) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    AUTO            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEDEF         reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEID          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TIMES           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ID              reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 141

    (140) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (183) cast_expression -> unary_expression .
    (141) assignment_operator -> . EQUALS
    (142) assignment_operator -> . TIMESEQUAL
    (143) assignment_operator -> . DIVEQUAL
    (144) assignment_operator -> . MODEQUAL
    (145) assignment_operator -> . PLUSEQUAL
    (146) assignment_operator -> . MINUSEQUAL
    (147) assignment_operator -> . LSHIFTEQUAL
    (148) assignment_operator -> . RSHIFTEQUAL
    (149) assignment_operator -> . ANDEQUAL
    (150) assignment_operator -> . OREQUAL
    (151) assignment_operator -> . XOREQUAL

    TIMES           reduce using rule 183 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 183 (cast_expression -> unary_expression .)
    MOD             reduce using rule 183 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 183 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 183 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 183 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 183 (cast_expression -> unary_expression .)
    LT              reduce using rule 183 (cast_expression -> unary_expression .)
    GT              reduce using rule 183 (cast_expression -> unary_expression .)
    LE              reduce using rule 183 (cast_expression -> unary_expression .)
    GE              reduce using rule 183 (cast_expression -> unary_expression .)
    EQ              reduce using rule 183 (cast_expression -> unary_expression .)
    NE              reduce using rule 183 (cast_expression -> unary_expression .)
    AND             reduce using rule 183 (cast_expression -> unary_expression .)
    XOR             reduce using rule 183 (cast_expression -> unary_expression .)
    OR              reduce using rule 183 (cast_expression -> unary_expression .)
    LAND            reduce using rule 183 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 183 (cast_expression -> unary_expression .)
    LOR             reduce using rule 183 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 183 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 183 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 183 (cast_expression -> unary_expression .)
    COLON           reduce using rule 183 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 183 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 183 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 239
    TIMESEQUAL      shift and go to state 243
    DIVEQUAL        shift and go to state 233
    MODEQUAL        shift and go to state 232
    PLUSEQUAL       shift and go to state 237
    MINUSEQUAL      shift and go to state 238
    LSHIFTEQUAL     shift and go to state 241
    RSHIFTEQUAL     shift and go to state 234
    ANDEQUAL        shift and go to state 235
    OREQUAL         shift and go to state 240
    XOREQUAL        shift and go to state 242

    assignment_operator            shift and go to state 236

state 142

    (89) initializer -> assignment_expression .

    SEMI            reduce using rule 89 (initializer -> assignment_expression .)
    COMMA           reduce using rule 89 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 89 (initializer -> assignment_expression .)


state 143

    (139) assignment_expression -> conditional_expression .

    COMMA           reduce using rule 139 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 139 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 139 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 139 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 139 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 139 (assignment_expression -> conditional_expression .)


state 144

    (49) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 49 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 49 (init_declarator -> declarator EQUALS initializer .)


state 145

    (90) initializer -> LBRACE . initializer_list RBRACE
    (91) initializer -> LBRACE . initializer_list COMMA RBRACE
    (92) initializer_list -> . initializer
    (93) initializer_list -> . initializer_list COMMA initializer
    (89) initializer -> . assignment_expression
    (90) initializer -> . LBRACE initializer_list RBRACE
    (91) initializer -> . LBRACE initializer_list COMMA RBRACE
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 145
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 142
    constant                       shift and go to state 87
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    initializer_list               shift and go to state 244
    exclusive_or_expression        shift and go to state 110
    initializer                    shift and go to state 245
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    multiplicative_expression      shift and go to state 102
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 146

    (210) primary_expression -> LPAREN . expression RPAREN
    (184) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (94) type_name -> . specifier_qualifier_list abstract_declarator_option
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (51) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (52) specifier_qualifier_list -> . type_specifier
    (53) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_qualifier
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ENUM            shift and go to state 3
    LPAREN          shift and go to state 146
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    equality_expression            shift and go to state 99
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    type_name                      shift and go to state 189
    constant                       shift and go to state 87
    enum_specifier                 shift and go to state 4
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    struct_or_union                shift and go to state 19
    conditional_expression         shift and go to state 143
    type_qualifier                 shift and go to state 79
    specifier_qualifier_list       shift and go to state 190
    exclusive_or_expression        shift and go to state 110
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    struct_or_union_specifier      shift and go to state 25
    string_literal_list            shift and go to state 117
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 192
    identifier                     shift and go to state 106
    type_specifier                 shift and go to state 77
    and_expression                 shift and go to state 113

state 147

    (50) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMI
    (56) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            shift and go to state 246
    COMMA           shift and go to state 153


state 148

    (40) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .

    AUTO            reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TYPEID          reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ID              reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 40 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)


state 149

    (51) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    COLON           reduce using rule 51 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    TIMES           reduce using rule 51 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LPAREN          reduce using rule 51 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    ID              reduce using rule 51 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 51 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 51 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 150

    (58) struct_declarator -> declarator COLON . constant_expression
    (154) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant_expression            shift and go to state 247
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 108
    shift_expression               shift and go to state 90
    and_expression                 shift and go to state 113
    unary_expression               shift and go to state 93
    additive_expression            shift and go to state 95
    exclusive_or_expression        shift and go to state 110
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 102

state 151

    (53) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    COLON           reduce using rule 53 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    TIMES           reduce using rule 53 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LPAREN          reduce using rule 53 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    ID              reduce using rule 53 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LBRACKET        reduce using rule 53 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RPAREN          reduce using rule 53 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 152

    (59) struct_declarator -> COLON constant_expression .

    COMMA           reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    VOID            reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    CHAR            reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    SHORT           reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    INT             reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    LONG            reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    FLOAT           reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    DOUBLE          reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    SIGNED          reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    UNSIGNED        reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    TYPEID          reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    CONST           reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    VOLATILE        reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    ENUM            reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    STRUCT          reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    UNION           reduce using rule 59 (struct_declarator -> COLON constant_expression .)
    SEMI            reduce using rule 59 (struct_declarator -> COLON constant_expression .)


state 153

    (56) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (57) struct_declarator -> . declarator
    (58) struct_declarator -> . declarator COLON constant_expression
    (59) struct_declarator -> . COLON constant_expression
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (216) identifier -> . ID

    COLON           shift and go to state 80
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 39
    ID              shift and go to state 10

    pointer                        shift and go to state 28
    direct_declarator              shift and go to state 24
    struct_declarator              shift and go to state 248
    identifier                     shift and go to state 27
    declarator                     shift and go to state 78

state 154

    (45) struct_declaration_list -> struct_declarator_list struct_declaration .

    RBRACE          reduce using rule 45 (struct_declaration_list -> struct_declarator_list struct_declaration .)


state 155

    (39) struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list . RBRACE

    RBRACE          shift and go to state 249


state 156

    (156) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    postfix_expression             shift and go to state 101
    constant                       shift and go to state 87
    inclusive_or_expression        shift and go to state 85
    string_literal_list            shift and go to state 117
    unary_expression               shift and go to state 93
    unary_operator                 shift and go to state 104
    additive_expression            shift and go to state 95
    exclusive_or_expression        shift and go to state 110
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 250
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    equality_expression            shift and go to state 99
    primary_expression             shift and go to state 91
    and_expression                 shift and go to state 113
    shift_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 102

state 157

    (153) conditional_expression -> logical_or_expression CONDOP . expression COLON conditional_expression
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    string_literal_list            shift and go to state 117
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    constant                       shift and go to state 87
    exclusive_or_expression        shift and go to state 110
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 251
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 158

    (160) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    postfix_expression             shift and go to state 101
    constant                       shift and go to state 87
    string_literal_list            shift and go to state 117
    unary_expression               shift and go to state 93
    unary_operator                 shift and go to state 104
    additive_expression            shift and go to state 95
    exclusive_or_expression        shift and go to state 252
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    equality_expression            shift and go to state 99
    primary_expression             shift and go to state 91
    and_expression                 shift and go to state 113
    shift_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 102

state 159

    (172) relational_expression -> relational_expression GE . shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    unary_expression               shift and go to state 93
    primary_expression             shift and go to state 91
    shift_expression               shift and go to state 253
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    string_literal_list            shift and go to state 117
    postfix_expression             shift and go to state 101
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 102

state 160

    (169) relational_expression -> relational_expression LT . shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    unary_expression               shift and go to state 93
    primary_expression             shift and go to state 91
    shift_expression               shift and go to state 254
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    string_literal_list            shift and go to state 117
    postfix_expression             shift and go to state 101
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 102

state 161

    (170) relational_expression -> relational_expression GT . shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    unary_expression               shift and go to state 93
    primary_expression             shift and go to state 91
    shift_expression               shift and go to state 255
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    string_literal_list            shift and go to state 117
    postfix_expression             shift and go to state 101
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 102

state 162

    (171) relational_expression -> relational_expression LE . shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    unary_expression               shift and go to state 93
    primary_expression             shift and go to state 91
    shift_expression               shift and go to state 256
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    string_literal_list            shift and go to state 117
    postfix_expression             shift and go to state 101
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 102

state 163

    (175) shift_expression -> shift_expression RSHIFT . additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    unary_expression               shift and go to state 93
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    string_literal_list            shift and go to state 117
    postfix_expression             shift and go to state 101
    additive_expression            shift and go to state 257
    multiplicative_expression      shift and go to state 102

state 164

    (174) shift_expression -> shift_expression LSHIFT . additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    unary_expression               shift and go to state 93
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    string_literal_list            shift and go to state 117
    postfix_expression             shift and go to state 101
    additive_expression            shift and go to state 258
    multiplicative_expression      shift and go to state 102

state 165

    (189) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    TIMESEQUAL      reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    DIVEQUAL        reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    TIMES           reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    VOID            reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    CHAR            reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    SHORT           reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    INT             reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    LONG            reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    FLOAT           reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    DOUBLE          reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    SIGNED          reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    UNSIGNED        reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    TYPEID          reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    CONST           reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    VOLATILE        reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    ENUM            reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    STRUCT          reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    UNION           reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 189 (unary_expression -> SIZEOF unary_expression .)


state 166

    (190) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (210) primary_expression -> LPAREN . expression RPAREN
    (94) type_name -> . specifier_qualifier_list abstract_declarator_option
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (51) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (52) specifier_qualifier_list -> . type_specifier
    (53) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (54) specifier_qualifier_list -> . type_qualifier
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 3
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    equality_expression            shift and go to state 99
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    type_name                      shift and go to state 259
    constant                       shift and go to state 87
    enum_specifier                 shift and go to state 4
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    struct_or_union                shift and go to state 19
    conditional_expression         shift and go to state 143
    type_qualifier                 shift and go to state 79
    specifier_qualifier_list       shift and go to state 190
    exclusive_or_expression        shift and go to state 110
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    struct_or_union_specifier      shift and go to state 25
    string_literal_list            shift and go to state 117
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 192
    identifier                     shift and go to state 106
    type_specifier                 shift and go to state 77
    and_expression                 shift and go to state 113

state 167

    (177) additive_expression -> additive_expression PLUS . multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    identifier                     shift and go to state 106
    unary_expression               shift and go to state 93
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    string_literal_list            shift and go to state 117
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 260

state 168

    (178) additive_expression -> additive_expression MINUS . multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    identifier                     shift and go to state 106
    unary_expression               shift and go to state 93
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    string_literal_list            shift and go to state 117
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 261

state 169

    (158) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    postfix_expression             shift and go to state 101
    constant                       shift and go to state 87
    inclusive_or_expression        shift and go to state 262
    string_literal_list            shift and go to state 117
    unary_expression               shift and go to state 93
    unary_operator                 shift and go to state 104
    additive_expression            shift and go to state 95
    exclusive_or_expression        shift and go to state 110
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    equality_expression            shift and go to state 99
    primary_expression             shift and go to state 91
    and_expression                 shift and go to state 113
    shift_expression               shift and go to state 90
    multiplicative_expression      shift and go to state 102

state 170

    (167) equality_expression -> equality_expression NE . relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    unary_expression               shift and go to state 93
    primary_expression             shift and go to state 91
    shift_expression               shift and go to state 90
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 263
    string_literal_list            shift and go to state 117
    postfix_expression             shift and go to state 101
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 102

state 171

    (166) equality_expression -> equality_expression EQ . relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    unary_expression               shift and go to state 93
    primary_expression             shift and go to state 91
    shift_expression               shift and go to state 90
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 264
    string_literal_list            shift and go to state 117
    postfix_expression             shift and go to state 101
    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 102

state 172

    (71) direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .

    LBRACKET        reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    LPAREN          reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    RPAREN          reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    EQUALS          reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    SEMI            reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    COMMA           reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    LBRACE          reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    AUTO            reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    REGISTER        reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    STATIC          reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    EXTERN          reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    TYPEDEF         reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    VOID            reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    CHAR            reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    SHORT           reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    INT             reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    LONG            reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    FLOAT           reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    DOUBLE          reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    SIGNED          reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    UNSIGNED        reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    TYPEID          reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    CONST           reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    VOLATILE        reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    ENUM            reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    STRUCT          reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    UNION           reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)
    COLON           reduce using rule 71 (direct_declarator -> direct_declarator LBRACKET constant_expression_option RBRACKET .)


state 173

    (204) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    PERIOD          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    ARROW           reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    VOID            reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    CHAR            reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    SHORT           reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    INT             reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    LONG            reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    FLOAT           reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    DOUBLE          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    SIGNED          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    UNSIGNED        reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    TYPEID          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONST           reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    VOLATILE        reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    ENUM            reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    STRUCT          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    UNION           reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)
    COLON           reduce using rule 204 (postfix_expression -> postfix_expression MINUSMINUS .)


state 174

    (201) postfix_expression -> postfix_expression PERIOD . identifier
    (216) identifier -> . ID

    ID              shift and go to state 10

    identifier                     shift and go to state 265

state 175

    (203) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    PERIOD          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    ARROW           reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    VOID            reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    CHAR            reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    SHORT           reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    INT             reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    LONG            reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    FLOAT           reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    DOUBLE          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    SIGNED          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    UNSIGNED        reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    TYPEID          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONST           reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    VOLATILE        reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    ENUM            reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    STRUCT          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    UNION           reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)
    COLON           reduce using rule 203 (postfix_expression -> postfix_expression PLUSPLUS .)


state 176

    (202) postfix_expression -> postfix_expression ARROW . identifier
    (216) identifier -> . ID

    ID              shift and go to state 10

    identifier                     shift and go to state 266

state 177

    (198) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    string_literal_list            shift and go to state 117
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    constant                       shift and go to state 87
    exclusive_or_expression        shift and go to state 110
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 267
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 178

    (199) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (200) postfix_expression -> postfix_expression LPAREN . RPAREN
    (211) argument_expression_list -> . assignment_expression
    (212) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 270
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 268
    string_literal_list            shift and go to state 117
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    constant                       shift and go to state 87
    exclusive_or_expression        shift and go to state 110
    argument_expression_list       shift and go to state 269
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 102
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 179

    (180) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    postfix_expression             shift and go to state 101
    string_literal_list            shift and go to state 117
    identifier                     shift and go to state 106
    unary_expression               shift and go to state 93
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 271

state 180

    (182) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    postfix_expression             shift and go to state 101
    string_literal_list            shift and go to state 117
    identifier                     shift and go to state 106
    unary_expression               shift and go to state 93
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 272

state 181

    (181) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    postfix_expression             shift and go to state 101
    string_literal_list            shift and go to state 117
    identifier                     shift and go to state 106
    unary_expression               shift and go to state 93
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 273

state 182

    (188) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    VOID            reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    CHAR            reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    SHORT           reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    INT             reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    LONG            reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    FLOAT           reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    DOUBLE          reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    SIGNED          reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    UNSIGNED        reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    TYPEID          reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    CONST           reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    VOLATILE        reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    ENUM            reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    STRUCT          reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    UNION           reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 188 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 188 (unary_expression -> unary_operator cast_expression .)


state 183

    (186) unary_expression -> PLUSPLUS unary_expression .

    EQUALS          reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUAL      reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQUAL        reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUAL        reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUAL       reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUAL      reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    ANDEQUAL        reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    OREQUAL         reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    XOREQUAL        reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    CONDOP          reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    VOID            reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    CHAR            reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    SHORT           reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    INT             reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    LONG            reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    FLOAT           reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    DOUBLE          reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    SIGNED          reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    UNSIGNED        reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    TYPEID          reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    CONST           reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    VOLATILE        reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    ENUM            reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    STRUCT          reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    UNION           reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 186 (unary_expression -> PLUSPLUS unary_expression .)


state 184

    (210) primary_expression -> LPAREN . expression RPAREN
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    string_literal_list            shift and go to state 117
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    constant                       shift and go to state 87
    exclusive_or_expression        shift and go to state 110
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 192
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 185

    (162) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    constant                       shift and go to state 87
    string_literal_list            shift and go to state 117
    unary_expression               shift and go to state 93
    unary_operator                 shift and go to state 104
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    equality_expression            shift and go to state 99
    primary_expression             shift and go to state 91
    and_expression                 shift and go to state 274
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 102

state 186

    (187) unary_expression -> MINUSMINUS unary_expression .

    EQUALS          reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUAL      reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQUAL        reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUAL        reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUAL       reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUAL      reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    ANDEQUAL        reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    OREQUAL         reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    XOREQUAL        reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    CONDOP          reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    VOID            reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    CHAR            reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    SHORT           reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    INT             reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    LONG            reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    FLOAT           reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    DOUBLE          reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    SIGNED          reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    UNSIGNED        reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    TYPEID          reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    CONST           reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    VOLATILE        reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    ENUM            reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    STRUCT          reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    UNION           reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 187 (unary_expression -> MINUSMINUS unary_expression .)


state 187

    (164) and_expression -> and_expression AND . equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    string_literal_list            shift and go to state 117
    unary_expression               shift and go to state 93
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    cast_expression                shift and go to state 96
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    equality_expression            shift and go to state 275
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 102

state 188

    (209) string_literal_list -> string_literal_list SCONST .

    SCONST          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    LBRACKET        reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    LPAREN          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    PERIOD          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    ARROW           reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    PLUSPLUS        reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    MINUSMINUS      reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    EQUALS          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    TIMESEQUAL      reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    DIVEQUAL        reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    MODEQUAL        reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    PLUSEQUAL       reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    MINUSEQUAL      reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    LSHIFTEQUAL     reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    RSHIFTEQUAL     reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    ANDEQUAL        reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    OREQUAL         reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    XOREQUAL        reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    TIMES           reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    DIVIDE          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    MOD             reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    PLUS            reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    MINUS           reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    LSHIFT          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    RSHIFT          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    LT              reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    GT              reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    LE              reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    GE              reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    EQ              reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    NE              reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    AND             reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    XOR             reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    OR              reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    LAND            reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    CONDOP          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    LOR             reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    RPAREN          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    COMMA           reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    SEMI            reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    RBRACE          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    COLON           reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    RBRACKET        reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    VOID            reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    CHAR            reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    SHORT           reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    INT             reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    LONG            reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    FLOAT           reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    DOUBLE          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    SIGNED          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    UNSIGNED        reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    TYPEID          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    CONST           reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    VOLATILE        reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    ENUM            reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    STRUCT          reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)
    UNION           reduce using rule 209 (string_literal_list -> string_literal_list SCONST .)


state 189

    (184) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 276


state 190

    (94) type_name -> specifier_qualifier_list . abstract_declarator_option
    (95) abstract_declarator_option -> . empty
    (96) abstract_declarator_option -> . abstract_declarator
    (217) empty -> .
    (97) abstract_declarator -> . pointer
    (98) abstract_declarator -> . pointer direct_abstract_declarator
    (99) abstract_declarator -> . direct_abstract_declarator
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (100) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (101) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (102) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (103) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (104) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN

    RPAREN          reduce using rule 217 (empty -> .)
    TIMES           shift and go to state 36
    LPAREN          shift and go to state 279
    LBRACKET        shift and go to state 200

    pointer                        shift and go to state 278
    abstract_declarator            shift and go to state 199
    direct_abstract_declarator     shift and go to state 195
    abstract_declarator_option     shift and go to state 277
    empty                          shift and go to state 201

state 191

    (137) expression -> assignment_expression .

    COMMA           reduce using rule 137 (expression -> assignment_expression .)
    SEMI            reduce using rule 137 (expression -> assignment_expression .)
    RPAREN          reduce using rule 137 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 137 (expression -> assignment_expression .)
    COLON           reduce using rule 137 (expression -> assignment_expression .)


state 192

    (210) primary_expression -> LPAREN expression . RPAREN
    (138) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 280
    COMMA           shift and go to state 281


state 193

    (88) identifier_list -> identifier_list COMMA . identifier
    (216) identifier -> . ID

    ID              shift and go to state 10

    identifier                     shift and go to state 282

state 194

    (73) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LBRACKET        reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMI            reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACE          reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    AUTO            reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    REGISTER        reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC          reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EXTERN          reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEDEF         reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CHAR            reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SHORT           reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LONG            reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    FLOAT           reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    DOUBLE          reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SIGNED          reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNSIGNED        reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEID          reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CONST           reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOLATILE        reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ENUM            reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STRUCT          reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNION           reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COLON           reduce using rule 73 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 195

    (99) abstract_declarator -> direct_abstract_declarator .
    (101) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET constant_expression_option RBRACKET
    (103) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_option RPAREN

    RPAREN          reduce using rule 99 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 99 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 283
    LPAREN          shift and go to state 284


state 196

    (86) parameter_declaration -> declaration_specifiers abstract_declarator_option .

    COMMA           reduce using rule 86 (parameter_declaration -> declaration_specifiers abstract_declarator_option .)
    RPAREN          reduce using rule 86 (parameter_declaration -> declaration_specifiers abstract_declarator_option .)


state 197

    (85) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 85 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 85 (parameter_declaration -> declaration_specifiers declarator .)


state 198

    (67) declarator -> pointer . direct_declarator
    (97) abstract_declarator -> pointer .
    (98) abstract_declarator -> pointer . direct_abstract_declarator
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (100) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (101) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (102) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (103) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (104) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN
    (216) identifier -> . ID

    RPAREN          reduce using rule 97 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 97 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 202
    LBRACKET        shift and go to state 200
    ID              shift and go to state 10

    direct_declarator              shift and go to state 51
    direct_abstract_declarator     shift and go to state 285
    identifier                     shift and go to state 27

state 199

    (96) abstract_declarator_option -> abstract_declarator .

    RPAREN          reduce using rule 96 (abstract_declarator_option -> abstract_declarator .)
    COMMA           reduce using rule 96 (abstract_declarator_option -> abstract_declarator .)


state 200

    (102) direct_abstract_declarator -> LBRACKET . constant_expression_option RBRACKET
    (105) constant_expression_option -> . empty
    (106) constant_expression_option -> . constant_expression
    (217) empty -> .
    (154) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    RBRACKET        reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant_expression            shift and go to state 114
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 108
    shift_expression               shift and go to state 90
    and_expression                 shift and go to state 113
    unary_expression               shift and go to state 93
    additive_expression            shift and go to state 95
    exclusive_or_expression        shift and go to state 110
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    empty                          shift and go to state 116
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    constant_expression_option     shift and go to state 286
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 102

state 201

    (95) abstract_declarator_option -> empty .

    RPAREN          reduce using rule 95 (abstract_declarator_option -> empty .)
    COMMA           reduce using rule 95 (abstract_declarator_option -> empty .)


state 202

    (70) direct_declarator -> LPAREN . declarator RPAREN
    (100) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (104) direct_abstract_declarator -> LPAREN . parameter_type_list_option RPAREN
    (67) declarator -> . pointer direct_declarator
    (68) declarator -> . direct_declarator
    (97) abstract_declarator -> . pointer
    (98) abstract_declarator -> . pointer direct_abstract_declarator
    (99) abstract_declarator -> . direct_abstract_declarator
    (107) parameter_type_list_option -> . empty
    (108) parameter_type_list_option -> . parameter_type_list
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (69) direct_declarator -> . identifier
    (70) direct_declarator -> . LPAREN declarator RPAREN
    (71) direct_declarator -> . direct_declarator LBRACKET constant_expression_option RBRACKET
    (72) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (73) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (74) direct_declarator -> . direct_declarator LPAREN RPAREN
    (100) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (101) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (102) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (103) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (104) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN
    (217) empty -> .
    (81) parameter_type_list -> . parameter_list
    (82) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (216) identifier -> . ID
    (83) parameter_list -> . parameter_declaration
    (84) parameter_list -> . parameter_list COMMA parameter_declaration
    (85) parameter_declaration -> . declaration_specifiers declarator
    (86) parameter_declaration -> . declaration_specifiers abstract_declarator_option
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    TIMES           shift and go to state 36
    LPAREN          shift and go to state 202
    LBRACKET        shift and go to state 200
    RPAREN          reduce using rule 217 (empty -> .)
    ID              shift and go to state 10
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    direct_declarator              shift and go to state 24
    identifier                     shift and go to state 27
    enum_specifier                 shift and go to state 4
    pointer                        shift and go to state 198
    struct_or_union                shift and go to state 19
    storage_class_specifier        shift and go to state 32
    type_qualifier                 shift and go to state 31
    parameter_declaration          shift and go to state 119
    direct_abstract_declarator     shift and go to state 195
    declaration_specifiers         shift and go to state 121
    parameter_type_list_option     shift and go to state 288
    empty                          shift and go to state 289
    abstract_declarator            shift and go to state 287
    struct_or_union_specifier      shift and go to state 25
    parameter_list                 shift and go to state 122
    parameter_type_list            shift and go to state 290
    type_specifier                 shift and go to state 21
    declarator                     shift and go to state 63

state 203

    (82) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (84) parameter_list -> parameter_list COMMA . parameter_declaration
    (85) parameter_declaration -> . declaration_specifiers declarator
    (86) parameter_declaration -> . declaration_specifiers abstract_declarator_option
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 291
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration_specifiers         shift and go to state 121
    storage_class_specifier        shift and go to state 32
    enum_specifier                 shift and go to state 4
    struct_or_union                shift and go to state 19
    struct_or_union_specifier      shift and go to state 25
    type_qualifier                 shift and go to state 31
    parameter_declaration          shift and go to state 292
    type_specifier                 shift and go to state 21

state 204

    (72) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 72 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 205

    (130) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    selection_statement            shift and go to state 210
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    iteration_statement            shift and go to state 209
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    logical_and_expression         shift and go to state 97
    postfix_expression             shift and go to state 101
    statement                      shift and go to state 293
    jump_statement                 shift and go to state 208
    empty                          shift and go to state 294
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 225
    expression_statement           shift and go to state 221
    and_expression                 shift and go to state 113

state 206

    (128) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 295


state 207

    (123) statement_list -> statement .

    CASE            reduce using rule 123 (statement_list -> statement .)
    DEFAULT         reduce using rule 123 (statement_list -> statement .)
    LBRACE          reduce using rule 123 (statement_list -> statement .)
    IF              reduce using rule 123 (statement_list -> statement .)
    SWITCH          reduce using rule 123 (statement_list -> statement .)
    WHILE           reduce using rule 123 (statement_list -> statement .)
    FOR             reduce using rule 123 (statement_list -> statement .)
    DO              reduce using rule 123 (statement_list -> statement .)
    GOTO            reduce using rule 123 (statement_list -> statement .)
    CONTINUE        reduce using rule 123 (statement_list -> statement .)
    BREAK           reduce using rule 123 (statement_list -> statement .)
    RETURN          reduce using rule 123 (statement_list -> statement .)
    ID              reduce using rule 123 (statement_list -> statement .)
    PLUSPLUS        reduce using rule 123 (statement_list -> statement .)
    MINUSMINUS      reduce using rule 123 (statement_list -> statement .)
    SIZEOF          reduce using rule 123 (statement_list -> statement .)
    AND             reduce using rule 123 (statement_list -> statement .)
    TIMES           reduce using rule 123 (statement_list -> statement .)
    PLUS            reduce using rule 123 (statement_list -> statement .)
    MINUS           reduce using rule 123 (statement_list -> statement .)
    NOT             reduce using rule 123 (statement_list -> statement .)
    LNOT            reduce using rule 123 (statement_list -> statement .)
    LPAREN          reduce using rule 123 (statement_list -> statement .)
    ICONST          reduce using rule 123 (statement_list -> statement .)
    FCONST          reduce using rule 123 (statement_list -> statement .)
    CCONST          reduce using rule 123 (statement_list -> statement .)
    SCONST          reduce using rule 123 (statement_list -> statement .)
    RBRACE          reduce using rule 123 (statement_list -> statement .)
    SEMI            reduce using rule 123 (statement_list -> statement .)


state 208

    (114) statement -> jump_statement .

    CASE            reduce using rule 114 (statement -> jump_statement .)
    DEFAULT         reduce using rule 114 (statement -> jump_statement .)
    LBRACE          reduce using rule 114 (statement -> jump_statement .)
    IF              reduce using rule 114 (statement -> jump_statement .)
    SWITCH          reduce using rule 114 (statement -> jump_statement .)
    WHILE           reduce using rule 114 (statement -> jump_statement .)
    FOR             reduce using rule 114 (statement -> jump_statement .)
    DO              reduce using rule 114 (statement -> jump_statement .)
    GOTO            reduce using rule 114 (statement -> jump_statement .)
    CONTINUE        reduce using rule 114 (statement -> jump_statement .)
    BREAK           reduce using rule 114 (statement -> jump_statement .)
    RETURN          reduce using rule 114 (statement -> jump_statement .)
    ID              reduce using rule 114 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 114 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 114 (statement -> jump_statement .)
    SIZEOF          reduce using rule 114 (statement -> jump_statement .)
    AND             reduce using rule 114 (statement -> jump_statement .)
    TIMES           reduce using rule 114 (statement -> jump_statement .)
    PLUS            reduce using rule 114 (statement -> jump_statement .)
    MINUS           reduce using rule 114 (statement -> jump_statement .)
    NOT             reduce using rule 114 (statement -> jump_statement .)
    LNOT            reduce using rule 114 (statement -> jump_statement .)
    LPAREN          reduce using rule 114 (statement -> jump_statement .)
    ICONST          reduce using rule 114 (statement -> jump_statement .)
    FCONST          reduce using rule 114 (statement -> jump_statement .)
    CCONST          reduce using rule 114 (statement -> jump_statement .)
    SCONST          reduce using rule 114 (statement -> jump_statement .)
    RBRACE          reduce using rule 114 (statement -> jump_statement .)
    SEMI            reduce using rule 114 (statement -> jump_statement .)
    ELSE            reduce using rule 114 (statement -> jump_statement .)


state 209

    (113) statement -> iteration_statement .

    CASE            reduce using rule 113 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 113 (statement -> iteration_statement .)
    LBRACE          reduce using rule 113 (statement -> iteration_statement .)
    IF              reduce using rule 113 (statement -> iteration_statement .)
    SWITCH          reduce using rule 113 (statement -> iteration_statement .)
    WHILE           reduce using rule 113 (statement -> iteration_statement .)
    FOR             reduce using rule 113 (statement -> iteration_statement .)
    DO              reduce using rule 113 (statement -> iteration_statement .)
    GOTO            reduce using rule 113 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 113 (statement -> iteration_statement .)
    BREAK           reduce using rule 113 (statement -> iteration_statement .)
    RETURN          reduce using rule 113 (statement -> iteration_statement .)
    ID              reduce using rule 113 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 113 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 113 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 113 (statement -> iteration_statement .)
    AND             reduce using rule 113 (statement -> iteration_statement .)
    TIMES           reduce using rule 113 (statement -> iteration_statement .)
    PLUS            reduce using rule 113 (statement -> iteration_statement .)
    MINUS           reduce using rule 113 (statement -> iteration_statement .)
    NOT             reduce using rule 113 (statement -> iteration_statement .)
    LNOT            reduce using rule 113 (statement -> iteration_statement .)
    LPAREN          reduce using rule 113 (statement -> iteration_statement .)
    ICONST          reduce using rule 113 (statement -> iteration_statement .)
    FCONST          reduce using rule 113 (statement -> iteration_statement .)
    CCONST          reduce using rule 113 (statement -> iteration_statement .)
    SCONST          reduce using rule 113 (statement -> iteration_statement .)
    RBRACE          reduce using rule 113 (statement -> iteration_statement .)
    SEMI            reduce using rule 113 (statement -> iteration_statement .)
    ELSE            reduce using rule 113 (statement -> iteration_statement .)


state 210

    (112) statement -> selection_statement .

    CASE            reduce using rule 112 (statement -> selection_statement .)
    DEFAULT         reduce using rule 112 (statement -> selection_statement .)
    LBRACE          reduce using rule 112 (statement -> selection_statement .)
    IF              reduce using rule 112 (statement -> selection_statement .)
    SWITCH          reduce using rule 112 (statement -> selection_statement .)
    WHILE           reduce using rule 112 (statement -> selection_statement .)
    FOR             reduce using rule 112 (statement -> selection_statement .)
    DO              reduce using rule 112 (statement -> selection_statement .)
    GOTO            reduce using rule 112 (statement -> selection_statement .)
    CONTINUE        reduce using rule 112 (statement -> selection_statement .)
    BREAK           reduce using rule 112 (statement -> selection_statement .)
    RETURN          reduce using rule 112 (statement -> selection_statement .)
    ID              reduce using rule 112 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 112 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 112 (statement -> selection_statement .)
    SIZEOF          reduce using rule 112 (statement -> selection_statement .)
    AND             reduce using rule 112 (statement -> selection_statement .)
    TIMES           reduce using rule 112 (statement -> selection_statement .)
    PLUS            reduce using rule 112 (statement -> selection_statement .)
    MINUS           reduce using rule 112 (statement -> selection_statement .)
    NOT             reduce using rule 112 (statement -> selection_statement .)
    LNOT            reduce using rule 112 (statement -> selection_statement .)
    LPAREN          reduce using rule 112 (statement -> selection_statement .)
    ICONST          reduce using rule 112 (statement -> selection_statement .)
    FCONST          reduce using rule 112 (statement -> selection_statement .)
    CCONST          reduce using rule 112 (statement -> selection_statement .)
    SCONST          reduce using rule 112 (statement -> selection_statement .)
    RBRACE          reduce using rule 112 (statement -> selection_statement .)
    SEMI            reduce using rule 112 (statement -> selection_statement .)
    ELSE            reduce using rule 112 (statement -> selection_statement .)


state 211

    (131) jump_statement -> GOTO . identifier SEMI
    (216) identifier -> . ID

    ID              shift and go to state 10

    identifier                     shift and go to state 296

state 212

    (118) expression_statement -> expression_option . SEMI

    SEMI            shift and go to state 297


state 213

    (111) statement -> compound_statement .

    CASE            reduce using rule 111 (statement -> compound_statement .)
    DEFAULT         reduce using rule 111 (statement -> compound_statement .)
    LBRACE          reduce using rule 111 (statement -> compound_statement .)
    IF              reduce using rule 111 (statement -> compound_statement .)
    SWITCH          reduce using rule 111 (statement -> compound_statement .)
    WHILE           reduce using rule 111 (statement -> compound_statement .)
    FOR             reduce using rule 111 (statement -> compound_statement .)
    DO              reduce using rule 111 (statement -> compound_statement .)
    GOTO            reduce using rule 111 (statement -> compound_statement .)
    CONTINUE        reduce using rule 111 (statement -> compound_statement .)
    BREAK           reduce using rule 111 (statement -> compound_statement .)
    RETURN          reduce using rule 111 (statement -> compound_statement .)
    ID              reduce using rule 111 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 111 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 111 (statement -> compound_statement .)
    SIZEOF          reduce using rule 111 (statement -> compound_statement .)
    AND             reduce using rule 111 (statement -> compound_statement .)
    TIMES           reduce using rule 111 (statement -> compound_statement .)
    PLUS            reduce using rule 111 (statement -> compound_statement .)
    MINUS           reduce using rule 111 (statement -> compound_statement .)
    NOT             reduce using rule 111 (statement -> compound_statement .)
    LNOT            reduce using rule 111 (statement -> compound_statement .)
    LPAREN          reduce using rule 111 (statement -> compound_statement .)
    ICONST          reduce using rule 111 (statement -> compound_statement .)
    FCONST          reduce using rule 111 (statement -> compound_statement .)
    CCONST          reduce using rule 111 (statement -> compound_statement .)
    SCONST          reduce using rule 111 (statement -> compound_statement .)
    RBRACE          reduce using rule 111 (statement -> compound_statement .)
    SEMI            reduce using rule 111 (statement -> compound_statement .)
    ELSE            reduce using rule 111 (statement -> compound_statement .)


state 214

    (219) insert_mode -> empty .
    (135) expression_option -> empty .

    AUTO            reduce using rule 219 (insert_mode -> empty .)
    REGISTER        reduce using rule 219 (insert_mode -> empty .)
    STATIC          reduce using rule 219 (insert_mode -> empty .)
    EXTERN          reduce using rule 219 (insert_mode -> empty .)
    TYPEDEF         reduce using rule 219 (insert_mode -> empty .)
    VOID            reduce using rule 219 (insert_mode -> empty .)
    CHAR            reduce using rule 219 (insert_mode -> empty .)
    SHORT           reduce using rule 219 (insert_mode -> empty .)
    INT             reduce using rule 219 (insert_mode -> empty .)
    LONG            reduce using rule 219 (insert_mode -> empty .)
    FLOAT           reduce using rule 219 (insert_mode -> empty .)
    DOUBLE          reduce using rule 219 (insert_mode -> empty .)
    SIGNED          reduce using rule 219 (insert_mode -> empty .)
    UNSIGNED        reduce using rule 219 (insert_mode -> empty .)
    TYPEID          reduce using rule 219 (insert_mode -> empty .)
    CONST           reduce using rule 219 (insert_mode -> empty .)
    VOLATILE        reduce using rule 219 (insert_mode -> empty .)
    ENUM            reduce using rule 219 (insert_mode -> empty .)
    STRUCT          reduce using rule 219 (insert_mode -> empty .)
    UNION           reduce using rule 219 (insert_mode -> empty .)
    SEMI            reduce using rule 135 (expression_option -> empty .)


state 215

    (127) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 298


state 216

    (132) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 299


state 217

    (109) statement -> labeled_statement .

    CASE            reduce using rule 109 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 109 (statement -> labeled_statement .)
    LBRACE          reduce using rule 109 (statement -> labeled_statement .)
    IF              reduce using rule 109 (statement -> labeled_statement .)
    SWITCH          reduce using rule 109 (statement -> labeled_statement .)
    WHILE           reduce using rule 109 (statement -> labeled_statement .)
    FOR             reduce using rule 109 (statement -> labeled_statement .)
    DO              reduce using rule 109 (statement -> labeled_statement .)
    GOTO            reduce using rule 109 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 109 (statement -> labeled_statement .)
    BREAK           reduce using rule 109 (statement -> labeled_statement .)
    RETURN          reduce using rule 109 (statement -> labeled_statement .)
    ID              reduce using rule 109 (statement -> labeled_statement .)
    PLUSPLUS        reduce using rule 109 (statement -> labeled_statement .)
    MINUSMINUS      reduce using rule 109 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 109 (statement -> labeled_statement .)
    AND             reduce using rule 109 (statement -> labeled_statement .)
    TIMES           reduce using rule 109 (statement -> labeled_statement .)
    PLUS            reduce using rule 109 (statement -> labeled_statement .)
    MINUS           reduce using rule 109 (statement -> labeled_statement .)
    NOT             reduce using rule 109 (statement -> labeled_statement .)
    LNOT            reduce using rule 109 (statement -> labeled_statement .)
    LPAREN          reduce using rule 109 (statement -> labeled_statement .)
    ICONST          reduce using rule 109 (statement -> labeled_statement .)
    FCONST          reduce using rule 109 (statement -> labeled_statement .)
    CCONST          reduce using rule 109 (statement -> labeled_statement .)
    SCONST          reduce using rule 109 (statement -> labeled_statement .)
    RBRACE          reduce using rule 109 (statement -> labeled_statement .)
    SEMI            reduce using rule 109 (statement -> labeled_statement .)
    ELSE            reduce using rule 109 (statement -> labeled_statement .)


state 218

    (117) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 300


state 219

    (120) compound_statement -> LBRACE enter_scope statement_list . lookup_mode leave_scope RBRACE
    (124) statement_list -> statement_list . statement
    (221) lookup_mode -> . empty
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (217) empty -> .
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          reduce using rule 217 (empty -> .)
    SEMI            reduce using rule 217 (empty -> .)
    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    lookup_mode                    shift and go to state 302
    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    iteration_statement            shift and go to state 209
    relational_expression          shift and go to state 88
    jump_statement                 shift and go to state 208
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    postfix_expression             shift and go to state 101
    expression_statement           shift and go to state 221
    statement                      shift and go to state 301
    selection_statement            shift and go to state 210
    empty                          shift and go to state 303
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    and_expression                 shift and go to state 113
    expression                     shift and go to state 225
    logical_and_expression         shift and go to state 97

state 220

    (129) iteration_statement -> FOR . LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement

    LPAREN          shift and go to state 304


state 221

    (110) statement -> expression_statement .

    CASE            reduce using rule 110 (statement -> expression_statement .)
    DEFAULT         reduce using rule 110 (statement -> expression_statement .)
    LBRACE          reduce using rule 110 (statement -> expression_statement .)
    IF              reduce using rule 110 (statement -> expression_statement .)
    SWITCH          reduce using rule 110 (statement -> expression_statement .)
    WHILE           reduce using rule 110 (statement -> expression_statement .)
    FOR             reduce using rule 110 (statement -> expression_statement .)
    DO              reduce using rule 110 (statement -> expression_statement .)
    GOTO            reduce using rule 110 (statement -> expression_statement .)
    CONTINUE        reduce using rule 110 (statement -> expression_statement .)
    BREAK           reduce using rule 110 (statement -> expression_statement .)
    RETURN          reduce using rule 110 (statement -> expression_statement .)
    ID              reduce using rule 110 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 110 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 110 (statement -> expression_statement .)
    SIZEOF          reduce using rule 110 (statement -> expression_statement .)
    AND             reduce using rule 110 (statement -> expression_statement .)
    TIMES           reduce using rule 110 (statement -> expression_statement .)
    PLUS            reduce using rule 110 (statement -> expression_statement .)
    MINUS           reduce using rule 110 (statement -> expression_statement .)
    NOT             reduce using rule 110 (statement -> expression_statement .)
    LNOT            reduce using rule 110 (statement -> expression_statement .)
    LPAREN          reduce using rule 110 (statement -> expression_statement .)
    ICONST          reduce using rule 110 (statement -> expression_statement .)
    FCONST          reduce using rule 110 (statement -> expression_statement .)
    CCONST          reduce using rule 110 (statement -> expression_statement .)
    SCONST          reduce using rule 110 (statement -> expression_statement .)
    RBRACE          reduce using rule 110 (statement -> expression_statement .)
    SEMI            reduce using rule 110 (statement -> expression_statement .)
    ELSE            reduce using rule 110 (statement -> expression_statement .)


state 222

    (115) labeled_statement -> identifier . COLON statement
    (205) primary_expression -> identifier .

    COLON           shift and go to state 305
    LBRACKET        reduce using rule 205 (primary_expression -> identifier .)
    LPAREN          reduce using rule 205 (primary_expression -> identifier .)
    PERIOD          reduce using rule 205 (primary_expression -> identifier .)
    ARROW           reduce using rule 205 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 205 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 205 (primary_expression -> identifier .)
    EQUALS          reduce using rule 205 (primary_expression -> identifier .)
    TIMESEQUAL      reduce using rule 205 (primary_expression -> identifier .)
    DIVEQUAL        reduce using rule 205 (primary_expression -> identifier .)
    MODEQUAL        reduce using rule 205 (primary_expression -> identifier .)
    PLUSEQUAL       reduce using rule 205 (primary_expression -> identifier .)
    MINUSEQUAL      reduce using rule 205 (primary_expression -> identifier .)
    LSHIFTEQUAL     reduce using rule 205 (primary_expression -> identifier .)
    RSHIFTEQUAL     reduce using rule 205 (primary_expression -> identifier .)
    ANDEQUAL        reduce using rule 205 (primary_expression -> identifier .)
    OREQUAL         reduce using rule 205 (primary_expression -> identifier .)
    XOREQUAL        reduce using rule 205 (primary_expression -> identifier .)
    TIMES           reduce using rule 205 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 205 (primary_expression -> identifier .)
    MOD             reduce using rule 205 (primary_expression -> identifier .)
    PLUS            reduce using rule 205 (primary_expression -> identifier .)
    MINUS           reduce using rule 205 (primary_expression -> identifier .)
    LSHIFT          reduce using rule 205 (primary_expression -> identifier .)
    RSHIFT          reduce using rule 205 (primary_expression -> identifier .)
    LT              reduce using rule 205 (primary_expression -> identifier .)
    GT              reduce using rule 205 (primary_expression -> identifier .)
    LE              reduce using rule 205 (primary_expression -> identifier .)
    GE              reduce using rule 205 (primary_expression -> identifier .)
    EQ              reduce using rule 205 (primary_expression -> identifier .)
    NE              reduce using rule 205 (primary_expression -> identifier .)
    AND             reduce using rule 205 (primary_expression -> identifier .)
    XOR             reduce using rule 205 (primary_expression -> identifier .)
    OR              reduce using rule 205 (primary_expression -> identifier .)
    LAND            reduce using rule 205 (primary_expression -> identifier .)
    CONDOP          reduce using rule 205 (primary_expression -> identifier .)
    LOR             reduce using rule 205 (primary_expression -> identifier .)
    COMMA           reduce using rule 205 (primary_expression -> identifier .)
    SEMI            reduce using rule 205 (primary_expression -> identifier .)


state 223

    (116) labeled_statement -> CASE . constant_expression COLON statement
    (154) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant_expression            shift and go to state 306
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    constant                       shift and go to state 87
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 108
    primary_expression             shift and go to state 91
    shift_expression               shift and go to state 90
    unary_expression               shift and go to state 93
    additive_expression            shift and go to state 95
    exclusive_or_expression        shift and go to state 110
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    and_expression                 shift and go to state 113
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 102

state 224

    (119) compound_statement -> LBRACE enter_scope insert_mode . declaration_list statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> LBRACE enter_scope insert_mode . declaration_list lookup_mode leave_scope RBRACE
    (12) declaration_list -> . declaration
    (13) declaration_list -> . declaration_list declaration
    (10) declaration -> . declaration_specifiers init_declarator_list SEMI
    (11) declaration -> . declaration_specifiers SEMI
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration                    shift and go to state 58
    declaration_specifiers         shift and go to state 59
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 4
    struct_or_union                shift and go to state 19
    storage_class_specifier        shift and go to state 32
    type_qualifier                 shift and go to state 31
    declaration_list               shift and go to state 307
    type_specifier                 shift and go to state 21

state 225

    (136) expression_option -> expression .
    (138) expression -> expression . COMMA assignment_expression

    RPAREN          reduce using rule 136 (expression_option -> expression .)
    SEMI            reduce using rule 136 (expression_option -> expression .)
    COMMA           shift and go to state 281


state 226

    (134) jump_statement -> RETURN . expression_option SEMI
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    constant                       shift and go to state 87
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    exclusive_or_expression        shift and go to state 110
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    expression_option              shift and go to state 308
    empty                          shift and go to state 294
    expression                     shift and go to state 225
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 227

    (133) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 309


state 228

    (125) selection_statement -> IF . LPAREN expression RPAREN statement
    (126) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 310


state 229

    (64) enumerator_list -> enumerator_list COMMA enumerator .

    RBRACE          reduce using rule 64 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 64 (enumerator_list -> enumerator_list COMMA enumerator .)


state 230

    (66) enumerator -> identifier EQUALS constant_expression .

    RBRACE          reduce using rule 66 (enumerator -> identifier EQUALS constant_expression .)
    COMMA           reduce using rule 66 (enumerator -> identifier EQUALS constant_expression .)


state 231

    (60) enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .

    AUTO            reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    TYPEDEF         reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    TYPEID          reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    ID              reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    LBRACKET        reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    SEMI            reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 60 (enum_specifier -> ENUM identifier LBRACE enumerator_list RBRACE .)


state 232

    (144) assignment_operator -> MODEQUAL .

    PLUSPLUS        reduce using rule 144 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 144 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 144 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 144 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 144 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 144 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 144 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 144 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 144 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 144 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 144 (assignment_operator -> MODEQUAL .)
    ICONST          reduce using rule 144 (assignment_operator -> MODEQUAL .)
    FCONST          reduce using rule 144 (assignment_operator -> MODEQUAL .)
    CCONST          reduce using rule 144 (assignment_operator -> MODEQUAL .)
    SCONST          reduce using rule 144 (assignment_operator -> MODEQUAL .)


state 233

    (143) assignment_operator -> DIVEQUAL .

    PLUSPLUS        reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    SIZEOF          reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    AND             reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    ICONST          reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    FCONST          reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    CCONST          reduce using rule 143 (assignment_operator -> DIVEQUAL .)
    SCONST          reduce using rule 143 (assignment_operator -> DIVEQUAL .)


state 234

    (148) assignment_operator -> RSHIFTEQUAL .

    PLUSPLUS        reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    ICONST          reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    FCONST          reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    CCONST          reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)
    SCONST          reduce using rule 148 (assignment_operator -> RSHIFTEQUAL .)


state 235

    (149) assignment_operator -> ANDEQUAL .

    PLUSPLUS        reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    ICONST          reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    FCONST          reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    CCONST          reduce using rule 149 (assignment_operator -> ANDEQUAL .)
    SCONST          reduce using rule 149 (assignment_operator -> ANDEQUAL .)


state 236

    (140) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 311
    string_literal_list            shift and go to state 117
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    constant                       shift and go to state 87
    exclusive_or_expression        shift and go to state 110
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 102
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 237

    (145) assignment_operator -> PLUSEQUAL .

    PLUSPLUS        reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    ICONST          reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    FCONST          reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    CCONST          reduce using rule 145 (assignment_operator -> PLUSEQUAL .)
    SCONST          reduce using rule 145 (assignment_operator -> PLUSEQUAL .)


state 238

    (146) assignment_operator -> MINUSEQUAL .

    PLUSPLUS        reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    ICONST          reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    FCONST          reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    CCONST          reduce using rule 146 (assignment_operator -> MINUSEQUAL .)
    SCONST          reduce using rule 146 (assignment_operator -> MINUSEQUAL .)


state 239

    (141) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 141 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 141 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 141 (assignment_operator -> EQUALS .)
    AND             reduce using rule 141 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 141 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 141 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 141 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 141 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 141 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 141 (assignment_operator -> EQUALS .)
    ID              reduce using rule 141 (assignment_operator -> EQUALS .)
    ICONST          reduce using rule 141 (assignment_operator -> EQUALS .)
    FCONST          reduce using rule 141 (assignment_operator -> EQUALS .)
    CCONST          reduce using rule 141 (assignment_operator -> EQUALS .)
    SCONST          reduce using rule 141 (assignment_operator -> EQUALS .)


state 240

    (150) assignment_operator -> OREQUAL .

    PLUSPLUS        reduce using rule 150 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 150 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 150 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 150 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 150 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 150 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 150 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 150 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 150 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 150 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 150 (assignment_operator -> OREQUAL .)
    ICONST          reduce using rule 150 (assignment_operator -> OREQUAL .)
    FCONST          reduce using rule 150 (assignment_operator -> OREQUAL .)
    CCONST          reduce using rule 150 (assignment_operator -> OREQUAL .)
    SCONST          reduce using rule 150 (assignment_operator -> OREQUAL .)


state 241

    (147) assignment_operator -> LSHIFTEQUAL .

    PLUSPLUS        reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    ICONST          reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    FCONST          reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    CCONST          reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)
    SCONST          reduce using rule 147 (assignment_operator -> LSHIFTEQUAL .)


state 242

    (151) assignment_operator -> XOREQUAL .

    PLUSPLUS        reduce using rule 151 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 151 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 151 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 151 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 151 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 151 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 151 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 151 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 151 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 151 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 151 (assignment_operator -> XOREQUAL .)
    ICONST          reduce using rule 151 (assignment_operator -> XOREQUAL .)
    FCONST          reduce using rule 151 (assignment_operator -> XOREQUAL .)
    CCONST          reduce using rule 151 (assignment_operator -> XOREQUAL .)
    SCONST          reduce using rule 151 (assignment_operator -> XOREQUAL .)


state 243

    (142) assignment_operator -> TIMESEQUAL .

    PLUSPLUS        reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    SIZEOF          reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    AND             reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    ICONST          reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    FCONST          reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    CCONST          reduce using rule 142 (assignment_operator -> TIMESEQUAL .)
    SCONST          reduce using rule 142 (assignment_operator -> TIMESEQUAL .)


state 244

    (90) initializer -> LBRACE initializer_list . RBRACE
    (91) initializer -> LBRACE initializer_list . COMMA RBRACE
    (93) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 312
    COMMA           shift and go to state 313


state 245

    (92) initializer_list -> initializer .

    RBRACE          reduce using rule 92 (initializer_list -> initializer .)
    COMMA           reduce using rule 92 (initializer_list -> initializer .)


state 246

    (50) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .

    RBRACE          reduce using rule 50 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)


state 247

    (58) struct_declarator -> declarator COLON constant_expression .

    COMMA           reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    VOID            reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    CHAR            reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    SHORT           reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    INT             reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    LONG            reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    FLOAT           reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    DOUBLE          reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    SIGNED          reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    UNSIGNED        reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    TYPEID          reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    CONST           reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    VOLATILE        reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    ENUM            reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    STRUCT          reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    UNION           reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)
    SEMI            reduce using rule 58 (struct_declarator -> declarator COLON constant_expression .)


state 248

    (56) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    COMMA           reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    VOID            reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    CHAR            reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    SHORT           reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    INT             reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    LONG            reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    FLOAT           reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    DOUBLE          reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    SIGNED          reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    UNSIGNED        reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    TYPEID          reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    CONST           reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    VOLATILE        reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    ENUM            reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    STRUCT          reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    UNION           reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    SEMI            reduce using rule 56 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 249

    (39) struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .

    AUTO            reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    TYPEDEF         reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    TYPEID          reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    ID              reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    LBRACKET        reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    SEMI            reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 39 (struct_or_union_specifier -> struct_or_union identifier LBRACE struct_declaration_list RBRACE .)


state 250

    (156) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (158) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    CONDOP          reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    VOID            reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    CHAR            reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SHORT           reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    INT             reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LONG            reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    FLOAT           reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    DOUBLE          reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SIGNED          reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    UNSIGNED        reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    TYPEID          reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    CONST           reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    VOLATILE        reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    ENUM            reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    STRUCT          reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    UNION           reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMI            reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACE          reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACKET        reduce using rule 156 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 169


state 251

    (153) conditional_expression -> logical_or_expression CONDOP expression . COLON conditional_expression
    (138) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 314
    COMMA           shift and go to state 281


state 252

    (160) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (162) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LAND            reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CONDOP          reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LOR             reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACKET        reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMI            reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RBRACE          reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    VOID            reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CHAR            reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SHORT           reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    INT             reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LONG            reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    FLOAT           reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    DOUBLE          reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SIGNED          reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    UNSIGNED        reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    TYPEID          reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CONST           reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    VOLATILE        reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    ENUM            reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    STRUCT          reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    UNION           reduce using rule 160 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    XOR             shift and go to state 185


state 253

    (172) relational_expression -> relational_expression GE shift_expression .
    (174) shift_expression -> shift_expression . LSHIFT additive_expression
    (175) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    GT              reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    EQ              reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    NE              reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    XOR             reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    LAND            reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    CONDOP          reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    LOR             reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    COMMA           reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    SEMI            reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    RPAREN          reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    RBRACKET        reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    VOID            reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    CHAR            reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    SHORT           reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    INT             reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    LONG            reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    FLOAT           reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    DOUBLE          reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    SIGNED          reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    UNSIGNED        reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    TYPEID          reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    CONST           reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    VOLATILE        reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    ENUM            reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    STRUCT          reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    UNION           reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    RBRACE          reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    COLON           reduce using rule 172 (relational_expression -> relational_expression GE shift_expression .)
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 163


state 254

    (169) relational_expression -> relational_expression LT shift_expression .
    (174) shift_expression -> shift_expression . LSHIFT additive_expression
    (175) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    LE              reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    GE              reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    NE              reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    AND             reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    XOR             reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    LAND            reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    CONDOP          reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    LOR             reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    SEMI            reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    RBRACKET        reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    VOID            reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    CHAR            reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    SHORT           reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    INT             reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    LONG            reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    FLOAT           reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    DOUBLE          reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    SIGNED          reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    UNSIGNED        reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    TYPEID          reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    CONST           reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    VOLATILE        reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    ENUM            reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    STRUCT          reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    UNION           reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    COLON           reduce using rule 169 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 163


state 255

    (170) relational_expression -> relational_expression GT shift_expression .
    (174) shift_expression -> shift_expression . LSHIFT additive_expression
    (175) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    LE              reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    GE              reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    NE              reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    AND             reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    XOR             reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    LAND            reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    CONDOP          reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    LOR             reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    SEMI            reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    RBRACKET        reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    VOID            reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    CHAR            reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    SHORT           reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    INT             reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    LONG            reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    FLOAT           reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    DOUBLE          reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    SIGNED          reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    UNSIGNED        reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    TYPEID          reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    CONST           reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    VOLATILE        reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    ENUM            reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    STRUCT          reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    UNION           reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    COLON           reduce using rule 170 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 163


state 256

    (171) relational_expression -> relational_expression LE shift_expression .
    (174) shift_expression -> shift_expression . LSHIFT additive_expression
    (175) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    GT              reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    EQ              reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    NE              reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    XOR             reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    LAND            reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    CONDOP          reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    LOR             reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    COMMA           reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    SEMI            reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    RPAREN          reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    RBRACKET        reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    VOID            reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    CHAR            reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    SHORT           reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    INT             reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    LONG            reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    FLOAT           reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    DOUBLE          reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    SIGNED          reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    UNSIGNED        reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    TYPEID          reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    CONST           reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    VOLATILE        reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    ENUM            reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    STRUCT          reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    UNION           reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    RBRACE          reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    COLON           reduce using rule 171 (relational_expression -> relational_expression LE shift_expression .)
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 163


state 257

    (175) shift_expression -> shift_expression RSHIFT additive_expression .
    (177) additive_expression -> additive_expression . PLUS multiplicative_expression
    (178) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LE              reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GE              reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ              reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NE              reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LAND            reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CONDOP          reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LOR             reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACKET        reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMI            reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    VOID            reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CHAR            reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SHORT           reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    INT             reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LONG            reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    FLOAT           reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    DOUBLE          reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SIGNED          reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    UNSIGNED        reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    TYPEID          reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CONST           reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    VOLATILE        reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ENUM            reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    STRUCT          reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    UNION           reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACE          reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 175 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 258

    (174) shift_expression -> shift_expression LSHIFT additive_expression .
    (177) additive_expression -> additive_expression . PLUS multiplicative_expression
    (178) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LE              reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GE              reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ              reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NE              reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LAND            reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CONDOP          reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LOR             reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACKET        reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMI            reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    VOID            reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CHAR            reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SHORT           reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    INT             reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LONG            reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    FLOAT           reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    DOUBLE          reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SIGNED          reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    UNSIGNED        reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    TYPEID          reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CONST           reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    VOLATILE        reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ENUM            reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    STRUCT          reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    UNION           reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACE          reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 174 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 259

    (190) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 315


state 260

    (177) additive_expression -> additive_expression PLUS multiplicative_expression .
    (180) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (181) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (182) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONDOP          reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    VOID            reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CHAR            reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SHORT           reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INT             reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LONG            reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FLOAT           reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOUBLE          reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SIGNED          reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNSIGNED        reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TYPEID          reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONST           reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    VOLATILE        reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ENUM            reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRUCT          reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNION           reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 177 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 179
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 180


state 261

    (178) additive_expression -> additive_expression MINUS multiplicative_expression .
    (180) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (181) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (182) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONDOP          reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    VOID            reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CHAR            reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SHORT           reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INT             reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LONG            reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FLOAT           reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOUBLE          reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SIGNED          reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNSIGNED        reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TYPEID          reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONST           reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    VOLATILE        reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ENUM            reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STRUCT          reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNION           reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 178 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 179
    DIVIDE          shift and go to state 181
    MOD             shift and go to state 180


state 262

    (158) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .
    (160) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    LAND            reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    CONDOP          reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SEMI            reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACKET        reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    VOID            reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    CHAR            reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SHORT           reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    INT             reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LONG            reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    FLOAT           reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    DOUBLE          reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SIGNED          reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    UNSIGNED        reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    TYPEID          reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    CONST           reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    VOLATILE        reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    ENUM            reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    STRUCT          reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    UNION           reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACE          reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COLON           reduce using rule 158 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    OR              shift and go to state 158


state 263

    (167) equality_expression -> equality_expression NE relational_expression .
    (169) relational_expression -> relational_expression . LT shift_expression
    (170) relational_expression -> relational_expression . GT shift_expression
    (171) relational_expression -> relational_expression . LE shift_expression
    (172) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    XOR             reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    LAND            reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    CONDOP          reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    LOR             reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    SEMI            reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    VOID            reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    CHAR            reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    SHORT           reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    INT             reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    LONG            reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    FLOAT           reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    DOUBLE          reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    SIGNED          reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    UNSIGNED        reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    TYPEID          reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    CONST           reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    VOLATILE        reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    ENUM            reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    STRUCT          reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    UNION           reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    RBRACE          reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    COLON           reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    RBRACKET        reduce using rule 167 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 160
    GT              shift and go to state 161
    LE              shift and go to state 162
    GE              shift and go to state 159


state 264

    (166) equality_expression -> equality_expression EQ relational_expression .
    (169) relational_expression -> relational_expression . LT shift_expression
    (170) relational_expression -> relational_expression . GT shift_expression
    (171) relational_expression -> relational_expression . LE shift_expression
    (172) relational_expression -> relational_expression . GE shift_expression

    EQ              reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    XOR             reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    CONDOP          reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    VOID            reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    CHAR            reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    SHORT           reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    INT             reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    LONG            reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    FLOAT           reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    DOUBLE          reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    SIGNED          reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    UNSIGNED        reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    TYPEID          reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    CONST           reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    VOLATILE        reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    ENUM            reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    STRUCT          reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    UNION           reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 166 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 160
    GT              shift and go to state 161
    LE              shift and go to state 162
    GE              shift and go to state 159


state 265

    (201) postfix_expression -> postfix_expression PERIOD identifier .

    LBRACKET        reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    LPAREN          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    PERIOD          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    ARROW           reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUSPLUS        reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUSMINUS      reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    EQUALS          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    TIMESEQUAL      reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    DIVEQUAL        reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    MODEQUAL        reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUSEQUAL       reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUSEQUAL      reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    LSHIFTEQUAL     reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    RSHIFTEQUAL     reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    ANDEQUAL        reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    OREQUAL         reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    XOREQUAL        reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    TIMES           reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    DIVIDE          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    MOD             reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUS            reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUS           reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    LSHIFT          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    RSHIFT          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    LT              reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    GT              reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    LE              reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    GE              reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    EQ              reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    NE              reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    AND             reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    XOR             reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    OR              reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    LAND            reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    CONDOP          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    LOR             reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    COMMA           reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    SEMI            reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    RBRACKET        reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    VOID            reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    CHAR            reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    SHORT           reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    INT             reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    LONG            reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    FLOAT           reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    DOUBLE          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    SIGNED          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    UNSIGNED        reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    TYPEID          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    CONST           reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    VOLATILE        reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    ENUM            reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    STRUCT          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    UNION           reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    RPAREN          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    RBRACE          reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)
    COLON           reduce using rule 201 (postfix_expression -> postfix_expression PERIOD identifier .)


state 266

    (202) postfix_expression -> postfix_expression ARROW identifier .

    LBRACKET        reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    LPAREN          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    PERIOD          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    ARROW           reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUSPLUS        reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUSMINUS      reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    EQUALS          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    TIMESEQUAL      reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    DIVEQUAL        reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    MODEQUAL        reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUSEQUAL       reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUSEQUAL      reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    LSHIFTEQUAL     reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    RSHIFTEQUAL     reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    ANDEQUAL        reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    OREQUAL         reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    XOREQUAL        reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    TIMES           reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    DIVIDE          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    MOD             reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUS            reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUS           reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    LSHIFT          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    RSHIFT          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    LT              reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    GT              reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    LE              reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    GE              reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    EQ              reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    NE              reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    AND             reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    XOR             reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    OR              reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    LAND            reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    CONDOP          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    LOR             reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    COMMA           reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    SEMI            reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    RBRACKET        reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    VOID            reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    CHAR            reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    SHORT           reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    INT             reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    LONG            reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    FLOAT           reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    DOUBLE          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    SIGNED          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    UNSIGNED        reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    TYPEID          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    CONST           reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    VOLATILE        reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    ENUM            reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    STRUCT          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    UNION           reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    RPAREN          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    RBRACE          reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)
    COLON           reduce using rule 202 (postfix_expression -> postfix_expression ARROW identifier .)


state 267

    (198) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (138) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 316
    COMMA           shift and go to state 281


state 268

    (211) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 211 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 211 (argument_expression_list -> assignment_expression .)


state 269

    (199) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (212) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 318
    COMMA           shift and go to state 317


state 270

    (200) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQUAL      reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQUAL        reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    VOID            reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CHAR            reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SHORT           reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INT             reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LONG            reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    FLOAT           reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOUBLE          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SIGNED          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    UNSIGNED        reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TYPEID          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONST           reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    VOLATILE        reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ENUM            reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    STRUCT          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    UNION           reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 200 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 271

    (180) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LSHIFT          reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RSHIFT          reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE              reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE              reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ              reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE              reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND             reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    XOR             reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR              reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LAND            reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    CONDOP          reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LOR             reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMI            reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACKET        reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    VOID            reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    CHAR            reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SHORT           reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    INT             reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LONG            reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    FLOAT           reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DOUBLE          reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SIGNED          reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    UNSIGNED        reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    TYPEID          reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    CONST           reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    VOLATILE        reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    ENUM            reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    STRUCT          reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    UNION           reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 180 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 272

    (182) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LSHIFT          reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSHIFT          reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT              reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT              reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE              reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE              reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ              reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NE              reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    XOR             reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CONDOP          reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMI            reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACKET        reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    VOID            reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CHAR            reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SHORT           reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    INT             reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LONG            reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    FLOAT           reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DOUBLE          reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SIGNED          reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    UNSIGNED        reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    TYPEID          reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    CONST           reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    VOLATILE        reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    ENUM            reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    STRUCT          reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    UNION           reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 182 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 273

    (181) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LSHIFT          reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSHIFT          reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE              reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE              reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ              reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE              reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    CONDOP          reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMI            reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACKET        reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    VOID            reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    CHAR            reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SHORT           reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    INT             reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LONG            reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    FLOAT           reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DOUBLE          reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SIGNED          reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    UNSIGNED        reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    TYPEID          reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    CONST           reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    VOLATILE        reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    ENUM            reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    STRUCT          reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    UNION           reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 181 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 274

    (162) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (164) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LAND            reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CONDOP          reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LOR             reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SEMI            reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACE          reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACKET        reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    VOID            reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CHAR            reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SHORT           reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    INT             reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LONG            reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    FLOAT           reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    DOUBLE          reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SIGNED          reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    UNSIGNED        reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    TYPEID          reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    CONST           reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    VOLATILE        reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    ENUM            reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    STRUCT          reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    UNION           reduce using rule 162 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND             shift and go to state 187


state 275

    (164) and_expression -> and_expression AND equality_expression .
    (166) equality_expression -> equality_expression . EQ relational_expression
    (167) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    LAND            reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    CONDOP          reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    LOR             reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    SEMI            reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    RPAREN          reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    RBRACE          reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    RBRACKET        reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    VOID            reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    CHAR            reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    SHORT           reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    INT             reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    LONG            reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    FLOAT           reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    DOUBLE          reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    SIGNED          reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    UNSIGNED        reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    TYPEID          reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    CONST           reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    VOLATILE        reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    ENUM            reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    STRUCT          reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    UNION           reduce using rule 164 (and_expression -> and_expression AND equality_expression .)
    EQ              shift and go to state 171
    NE              shift and go to state 170


state 276

    (184) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    cast_expression                shift and go to state 319
    unary_operator                 shift and go to state 104
    constant                       shift and go to state 87
    identifier                     shift and go to state 106
    string_literal_list            shift and go to state 117
    unary_expression               shift and go to state 93
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 91

state 277

    (94) type_name -> specifier_qualifier_list abstract_declarator_option .

    RPAREN          reduce using rule 94 (type_name -> specifier_qualifier_list abstract_declarator_option .)


state 278

    (97) abstract_declarator -> pointer .
    (98) abstract_declarator -> pointer . direct_abstract_declarator
    (100) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (101) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (102) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (103) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (104) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN

    RPAREN          reduce using rule 97 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 279
    LBRACKET        shift and go to state 200

    direct_abstract_declarator     shift and go to state 285

state 279

    (100) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (104) direct_abstract_declarator -> LPAREN . parameter_type_list_option RPAREN
    (97) abstract_declarator -> . pointer
    (98) abstract_declarator -> . pointer direct_abstract_declarator
    (99) abstract_declarator -> . direct_abstract_declarator
    (107) parameter_type_list_option -> . empty
    (108) parameter_type_list_option -> . parameter_type_list
    (75) pointer -> . TIMES type_qualifier_list
    (76) pointer -> . TIMES
    (77) pointer -> . TIMES type_qualifier_list pointer
    (78) pointer -> . TIMES pointer
    (100) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (101) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET constant_expression_option RBRACKET
    (102) direct_abstract_declarator -> . LBRACKET constant_expression_option RBRACKET
    (103) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_option RPAREN
    (104) direct_abstract_declarator -> . LPAREN parameter_type_list_option RPAREN
    (217) empty -> .
    (81) parameter_type_list -> . parameter_list
    (82) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (83) parameter_list -> . parameter_declaration
    (84) parameter_list -> . parameter_list COMMA parameter_declaration
    (85) parameter_declaration -> . declaration_specifiers declarator
    (86) parameter_declaration -> . declaration_specifiers abstract_declarator_option
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    TIMES           shift and go to state 36
    LPAREN          shift and go to state 279
    LBRACKET        shift and go to state 200
    RPAREN          reduce using rule 217 (empty -> .)
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    enum_specifier                 shift and go to state 4
    pointer                        shift and go to state 278
    struct_or_union                shift and go to state 19
    storage_class_specifier        shift and go to state 32
    type_qualifier                 shift and go to state 31
    parameter_declaration          shift and go to state 119
    direct_abstract_declarator     shift and go to state 195
    declaration_specifiers         shift and go to state 121
    parameter_type_list_option     shift and go to state 288
    parameter_list                 shift and go to state 122
    empty                          shift and go to state 289
    abstract_declarator            shift and go to state 287
    struct_or_union_specifier      shift and go to state 25
    parameter_type_list            shift and go to state 290
    type_specifier                 shift and go to state 21

state 280

    (210) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    VOID            reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    SHORT           reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    LONG            reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    SIGNED          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    UNSIGNED        reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    TYPEID          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    CONST           reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    VOLATILE        reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    ENUM            reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    STRUCT          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    UNION           reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 210 (primary_expression -> LPAREN expression RPAREN .)


state 281

    (138) expression -> expression COMMA . assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 320
    string_literal_list            shift and go to state 117
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    constant                       shift and go to state 87
    exclusive_or_expression        shift and go to state 110
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 102
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 282

    (88) identifier_list -> identifier_list COMMA identifier .

    RPAREN          reduce using rule 88 (identifier_list -> identifier_list COMMA identifier .)
    COMMA           reduce using rule 88 (identifier_list -> identifier_list COMMA identifier .)


state 283

    (101) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . constant_expression_option RBRACKET
    (105) constant_expression_option -> . empty
    (106) constant_expression_option -> . constant_expression
    (217) empty -> .
    (154) constant_expression -> . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    RBRACKET        reduce using rule 217 (empty -> .)
    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    constant_expression            shift and go to state 114
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 108
    shift_expression               shift and go to state 90
    and_expression                 shift and go to state 113
    unary_expression               shift and go to state 93
    additive_expression            shift and go to state 95
    exclusive_or_expression        shift and go to state 110
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    empty                          shift and go to state 116
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    constant_expression_option     shift and go to state 321
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 102

state 284

    (103) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list_option RPAREN
    (107) parameter_type_list_option -> . empty
    (108) parameter_type_list_option -> . parameter_type_list
    (217) empty -> .
    (81) parameter_type_list -> . parameter_list
    (82) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (83) parameter_list -> . parameter_declaration
    (84) parameter_list -> . parameter_list COMMA parameter_declaration
    (85) parameter_declaration -> . declaration_specifiers declarator
    (86) parameter_declaration -> . declaration_specifiers abstract_declarator_option
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION

    RPAREN          reduce using rule 217 (empty -> .)
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5

    declaration_specifiers         shift and go to state 121
    parameter_type_list            shift and go to state 290
    parameter_list                 shift and go to state 122
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 4
    empty                          shift and go to state 289
    struct_or_union                shift and go to state 19
    storage_class_specifier        shift and go to state 32
    type_qualifier                 shift and go to state 31
    parameter_type_list_option     shift and go to state 322
    parameter_declaration          shift and go to state 119
    type_specifier                 shift and go to state 21

state 285

    (98) abstract_declarator -> pointer direct_abstract_declarator .
    (101) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET constant_expression_option RBRACKET
    (103) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_option RPAREN

    RPAREN          reduce using rule 98 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 98 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 283
    LPAREN          shift and go to state 284


state 286

    (102) direct_abstract_declarator -> LBRACKET constant_expression_option . RBRACKET

    RBRACKET        shift and go to state 323


state 287

    (100) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 324


state 288

    (104) direct_abstract_declarator -> LPAREN parameter_type_list_option . RPAREN

    RPAREN          shift and go to state 325


state 289

    (107) parameter_type_list_option -> empty .

    RPAREN          reduce using rule 107 (parameter_type_list_option -> empty .)


state 290

    (108) parameter_type_list_option -> parameter_type_list .

    RPAREN          reduce using rule 108 (parameter_type_list_option -> parameter_type_list .)


state 291

    (82) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 82 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 292

    (84) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 84 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 84 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 293

    (130) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 326


state 294

    (135) expression_option -> empty .

    RPAREN          reduce using rule 135 (expression_option -> empty .)
    SEMI            reduce using rule 135 (expression_option -> empty .)


state 295

    (128) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    string_literal_list            shift and go to state 117
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    constant                       shift and go to state 87
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 327
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 296

    (131) jump_statement -> GOTO identifier . SEMI

    SEMI            shift and go to state 328


state 297

    (118) expression_statement -> expression_option SEMI .

    CASE            reduce using rule 118 (expression_statement -> expression_option SEMI .)
    DEFAULT         reduce using rule 118 (expression_statement -> expression_option SEMI .)
    LBRACE          reduce using rule 118 (expression_statement -> expression_option SEMI .)
    IF              reduce using rule 118 (expression_statement -> expression_option SEMI .)
    SWITCH          reduce using rule 118 (expression_statement -> expression_option SEMI .)
    WHILE           reduce using rule 118 (expression_statement -> expression_option SEMI .)
    FOR             reduce using rule 118 (expression_statement -> expression_option SEMI .)
    DO              reduce using rule 118 (expression_statement -> expression_option SEMI .)
    GOTO            reduce using rule 118 (expression_statement -> expression_option SEMI .)
    CONTINUE        reduce using rule 118 (expression_statement -> expression_option SEMI .)
    BREAK           reduce using rule 118 (expression_statement -> expression_option SEMI .)
    RETURN          reduce using rule 118 (expression_statement -> expression_option SEMI .)
    ID              reduce using rule 118 (expression_statement -> expression_option SEMI .)
    PLUSPLUS        reduce using rule 118 (expression_statement -> expression_option SEMI .)
    MINUSMINUS      reduce using rule 118 (expression_statement -> expression_option SEMI .)
    SIZEOF          reduce using rule 118 (expression_statement -> expression_option SEMI .)
    AND             reduce using rule 118 (expression_statement -> expression_option SEMI .)
    TIMES           reduce using rule 118 (expression_statement -> expression_option SEMI .)
    PLUS            reduce using rule 118 (expression_statement -> expression_option SEMI .)
    MINUS           reduce using rule 118 (expression_statement -> expression_option SEMI .)
    NOT             reduce using rule 118 (expression_statement -> expression_option SEMI .)
    LNOT            reduce using rule 118 (expression_statement -> expression_option SEMI .)
    LPAREN          reduce using rule 118 (expression_statement -> expression_option SEMI .)
    ICONST          reduce using rule 118 (expression_statement -> expression_option SEMI .)
    FCONST          reduce using rule 118 (expression_statement -> expression_option SEMI .)
    CCONST          reduce using rule 118 (expression_statement -> expression_option SEMI .)
    SCONST          reduce using rule 118 (expression_statement -> expression_option SEMI .)
    RBRACE          reduce using rule 118 (expression_statement -> expression_option SEMI .)
    SEMI            reduce using rule 118 (expression_statement -> expression_option SEMI .)
    ELSE            reduce using rule 118 (expression_statement -> expression_option SEMI .)


state 298

    (127) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    string_literal_list            shift and go to state 117
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    constant                       shift and go to state 87
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 329
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 299

    (132) jump_statement -> CONTINUE SEMI .

    CASE            reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    ID              reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    AND             reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    ICONST          reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    FCONST          reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    CCONST          reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    SCONST          reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 132 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 132 (jump_statement -> CONTINUE SEMI .)


state 300

    (117) labeled_statement -> DEFAULT COLON . statement
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    selection_statement            shift and go to state 210
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    iteration_statement            shift and go to state 209
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    logical_and_expression         shift and go to state 97
    postfix_expression             shift and go to state 101
    statement                      shift and go to state 330
    jump_statement                 shift and go to state 208
    empty                          shift and go to state 294
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 225
    expression_statement           shift and go to state 221
    and_expression                 shift and go to state 113

state 301

    (124) statement_list -> statement_list statement .

    CASE            reduce using rule 124 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 124 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 124 (statement_list -> statement_list statement .)
    IF              reduce using rule 124 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 124 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 124 (statement_list -> statement_list statement .)
    FOR             reduce using rule 124 (statement_list -> statement_list statement .)
    DO              reduce using rule 124 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 124 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 124 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 124 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 124 (statement_list -> statement_list statement .)
    ID              reduce using rule 124 (statement_list -> statement_list statement .)
    PLUSPLUS        reduce using rule 124 (statement_list -> statement_list statement .)
    MINUSMINUS      reduce using rule 124 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 124 (statement_list -> statement_list statement .)
    AND             reduce using rule 124 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 124 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 124 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 124 (statement_list -> statement_list statement .)
    NOT             reduce using rule 124 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 124 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 124 (statement_list -> statement_list statement .)
    ICONST          reduce using rule 124 (statement_list -> statement_list statement .)
    FCONST          reduce using rule 124 (statement_list -> statement_list statement .)
    CCONST          reduce using rule 124 (statement_list -> statement_list statement .)
    SCONST          reduce using rule 124 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 124 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 124 (statement_list -> statement_list statement .)


state 302

    (120) compound_statement -> LBRACE enter_scope statement_list lookup_mode . leave_scope RBRACE
    (220) leave_scope -> . empty
    (217) empty -> .

    RBRACE          reduce using rule 217 (empty -> .)

    leave_scope                    shift and go to state 331
    empty                          shift and go to state 332

state 303

    (221) lookup_mode -> empty .
    (135) expression_option -> empty .

    RBRACE          reduce using rule 221 (lookup_mode -> empty .)
    SEMI            reduce using rule 135 (expression_option -> empty .)


state 304

    (129) iteration_statement -> FOR LPAREN . expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    constant                       shift and go to state 87
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    expression_option              shift and go to state 333
    empty                          shift and go to state 294
    expression                     shift and go to state 225
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 305

    (115) labeled_statement -> identifier COLON . statement
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    selection_statement            shift and go to state 210
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    iteration_statement            shift and go to state 209
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    logical_and_expression         shift and go to state 97
    postfix_expression             shift and go to state 101
    statement                      shift and go to state 334
    jump_statement                 shift and go to state 208
    empty                          shift and go to state 294
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 225
    expression_statement           shift and go to state 221
    and_expression                 shift and go to state 113

state 306

    (116) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 335


state 307

    (119) compound_statement -> LBRACE enter_scope insert_mode declaration_list . statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> LBRACE enter_scope insert_mode declaration_list . lookup_mode leave_scope RBRACE
    (13) declaration_list -> declaration_list . declaration
    (123) statement_list -> . statement
    (124) statement_list -> . statement_list statement
    (221) lookup_mode -> . empty
    (10) declaration -> . declaration_specifiers init_declarator_list SEMI
    (11) declaration -> . declaration_specifiers SEMI
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (217) empty -> .
    (14) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_specifier declaration_specifiers
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . storage_class_specifier
    (18) declaration_specifiers -> . type_specifier
    (19) declaration_specifiers -> . type_qualifier
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (20) storage_class_specifier -> . AUTO
    (21) storage_class_specifier -> . REGISTER
    (22) storage_class_specifier -> . STATIC
    (23) storage_class_specifier -> . EXTERN
    (24) storage_class_specifier -> . TYPEDEF
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . struct_or_union_specifier
    (35) type_specifier -> . enum_specifier
    (36) type_specifier -> . TYPEID
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . VOLATILE
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (39) struct_or_union_specifier -> . struct_or_union identifier LBRACE struct_declaration_list RBRACE
    (40) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (41) struct_or_union_specifier -> . struct_or_union identifier
    (60) enum_specifier -> . ENUM identifier LBRACE enumerator_list RBRACE
    (61) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (62) enum_specifier -> . ENUM identifier
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (42) struct_or_union -> . STRUCT
    (43) struct_or_union -> . UNION
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          reduce using rule 217 (empty -> .)
    SEMI            reduce using rule 217 (empty -> .)
    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    AUTO            shift and go to state 1
    REGISTER        shift and go to state 22
    STATIC          shift and go to state 20
    EXTERN          shift and go to state 17
    TYPEDEF         shift and go to state 2
    VOID            shift and go to state 16
    CHAR            shift and go to state 29
    SHORT           shift and go to state 35
    INT             shift and go to state 6
    LONG            shift and go to state 13
    FLOAT           shift and go to state 34
    DOUBLE          shift and go to state 15
    SIGNED          shift and go to state 9
    UNSIGNED        shift and go to state 18
    TYPEID          shift and go to state 26
    CONST           shift and go to state 14
    VOLATILE        shift and go to state 37
    ID              shift and go to state 10
    ENUM            shift and go to state 3
    STRUCT          shift and go to state 8
    UNION           shift and go to state 5
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    unary_operator                 shift and go to state 104
    enum_specifier                 shift and go to state 4
    additive_expression            shift and go to state 95
    labeled_statement              shift and go to state 217
    constant                       shift and go to state 87
    shift_expression               shift and go to state 90
    declaration_specifiers         shift and go to state 59
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    jump_statement                 shift and go to state 208
    equality_expression            shift and go to state 99
    statement_list                 shift and go to state 337
    expression_option              shift and go to state 212
    postfix_expression             shift and go to state 101
    type_specifier                 shift and go to state 21
    and_expression                 shift and go to state 113
    lookup_mode                    shift and go to state 336
    declaration                    shift and go to state 132
    logical_and_expression         shift and go to state 97
    string_literal_list            shift and go to state 117
    selection_statement            shift and go to state 210
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    statement                      shift and go to state 207
    struct_or_union                shift and go to state 19
    storage_class_specifier        shift and go to state 32
    conditional_expression         shift and go to state 143
    type_qualifier                 shift and go to state 31
    exclusive_or_expression        shift and go to state 110
    iteration_statement            shift and go to state 209
    compound_statement             shift and go to state 213
    expression_statement           shift and go to state 221
    empty                          shift and go to state 303
    struct_or_union_specifier      shift and go to state 25
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 225
    relational_expression          shift and go to state 88

state 308

    (134) jump_statement -> RETURN expression_option . SEMI

    SEMI            shift and go to state 338


state 309

    (133) jump_statement -> BREAK SEMI .

    CASE            reduce using rule 133 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 133 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 133 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 133 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 133 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 133 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 133 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 133 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 133 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 133 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 133 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 133 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 133 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 133 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 133 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 133 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 133 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 133 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 133 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 133 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 133 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 133 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 133 (jump_statement -> BREAK SEMI .)
    ICONST          reduce using rule 133 (jump_statement -> BREAK SEMI .)
    FCONST          reduce using rule 133 (jump_statement -> BREAK SEMI .)
    CCONST          reduce using rule 133 (jump_statement -> BREAK SEMI .)
    SCONST          reduce using rule 133 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 133 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 133 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 133 (jump_statement -> BREAK SEMI .)


state 310

    (125) selection_statement -> IF LPAREN . expression RPAREN statement
    (126) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    string_literal_list            shift and go to state 117
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    constant                       shift and go to state 87
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 339
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 311

    (140) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 140 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 140 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 140 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 140 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 140 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 140 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 312

    (90) initializer -> LBRACE initializer_list RBRACE .

    SEMI            reduce using rule 90 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 90 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 90 (initializer -> LBRACE initializer_list RBRACE .)


state 313

    (91) initializer -> LBRACE initializer_list COMMA . RBRACE
    (93) initializer_list -> initializer_list COMMA . initializer
    (89) initializer -> . assignment_expression
    (90) initializer -> . LBRACE initializer_list RBRACE
    (91) initializer -> . LBRACE initializer_list COMMA RBRACE
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 341
    LBRACE          shift and go to state 145
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 142
    constant                       shift and go to state 87
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    exclusive_or_expression        shift and go to state 110
    initializer                    shift and go to state 340
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    multiplicative_expression      shift and go to state 102
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 314

    (153) conditional_expression -> logical_or_expression CONDOP expression COLON . conditional_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST

    LPAREN          shift and go to state 118
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    constant                       shift and go to state 87
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    unary_operator                 shift and go to state 104
    primary_expression             shift and go to state 91
    identifier                     shift and go to state 106
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 342
    exclusive_or_expression        shift and go to state 110
    unary_expression               shift and go to state 93
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    and_expression                 shift and go to state 113
    postfix_expression             shift and go to state 101
    multiplicative_expression      shift and go to state 102

state 315

    (190) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    EQUALS          reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE              reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE              reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE              reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    VOID            reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CHAR            reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SHORT           reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    INT             reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LONG            reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SIGNED          reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    UNSIGNED        reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TYPEID          reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONST           reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    VOLATILE        reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ENUM            reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    STRUCT          reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    UNION           reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 190 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 316

    (198) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    VOID            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CHAR            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SHORT           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INT             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LONG            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOUBLE          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SIGNED          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    UNSIGNED        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TYPEID          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONST           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    VOLATILE        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ENUM            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    STRUCT          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    UNION           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 317

    (212) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 343
    string_literal_list            shift and go to state 117
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    constant                       shift and go to state 87
    exclusive_or_expression        shift and go to state 110
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 102
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 318

    (199) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMESEQUAL      reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVEQUAL        reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    VOID            reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CHAR            reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SHORT           reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INT             reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LONG            reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    FLOAT           reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOUBLE          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SIGNED          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    UNSIGNED        reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TYPEID          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONST           reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    VOLATILE        reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ENUM            reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    STRUCT          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    UNION           reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 199 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 319

    (184) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE              reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    CONDOP          reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    VOID            reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    CHAR            reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SHORT           reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    INT             reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LONG            reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    FLOAT           reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DOUBLE          reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SIGNED          reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    UNSIGNED        reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TYPEID          reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    CONST           reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    VOLATILE        reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ENUM            reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    STRUCT          reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    UNION           reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMESEQUAL      reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQUAL        reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 184 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 320

    (138) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 138 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 138 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 138 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 138 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 138 (expression -> expression COMMA assignment_expression .)


state 321

    (101) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option . RBRACKET

    RBRACKET        shift and go to state 344


state 322

    (103) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option . RPAREN

    RPAREN          shift and go to state 345


state 323

    (102) direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET .

    LBRACKET        reduce using rule 102 (direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET .)
    LPAREN          reduce using rule 102 (direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET .)
    RPAREN          reduce using rule 102 (direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET .)
    COMMA           reduce using rule 102 (direct_abstract_declarator -> LBRACKET constant_expression_option RBRACKET .)


state 324

    (100) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 100 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 100 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 100 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 100 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 325

    (104) direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN .

    LBRACKET        reduce using rule 104 (direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN .)
    LPAREN          reduce using rule 104 (direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN .)
    RPAREN          reduce using rule 104 (direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN .)
    COMMA           reduce using rule 104 (direct_abstract_declarator -> LPAREN parameter_type_list_option RPAREN .)


state 326

    (130) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 346


state 327

    (128) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (138) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 347
    COMMA           shift and go to state 281


state 328

    (131) jump_statement -> GOTO identifier SEMI .

    CASE            reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    DEFAULT         reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    LBRACE          reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    IF              reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    SWITCH          reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    WHILE           reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    FOR             reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    DO              reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    GOTO            reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    CONTINUE        reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    BREAK           reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    RETURN          reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    ID              reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    PLUSPLUS        reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    MINUSMINUS      reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    SIZEOF          reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    AND             reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    TIMES           reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    PLUS            reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    MINUS           reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    NOT             reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    LNOT            reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    LPAREN          reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    ICONST          reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    FCONST          reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    CCONST          reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    SCONST          reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    RBRACE          reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    SEMI            reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)
    ELSE            reduce using rule 131 (jump_statement -> GOTO identifier SEMI .)


state 329

    (127) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (138) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 348
    COMMA           shift and go to state 281


state 330

    (117) labeled_statement -> DEFAULT COLON statement .

    CASE            reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    ID              reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    PLUSPLUS        reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    MINUSMINUS      reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    AND             reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    LNOT            reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    ICONST          reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    FCONST          reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    CCONST          reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    SCONST          reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    RBRACE          reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 117 (labeled_statement -> DEFAULT COLON statement .)


state 331

    (120) compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope . RBRACE

    RBRACE          shift and go to state 349


state 332

    (220) leave_scope -> empty .

    RBRACE          reduce using rule 220 (leave_scope -> empty .)


state 333

    (129) iteration_statement -> FOR LPAREN expression_option . SEMI expression_option SEMI expression_option RPAREN statement

    SEMI            shift and go to state 350


state 334

    (115) labeled_statement -> identifier COLON statement .

    CASE            reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    DEFAULT         reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    LBRACE          reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    IF              reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    SWITCH          reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    WHILE           reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    FOR             reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    DO              reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    GOTO            reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    CONTINUE        reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    BREAK           reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    RETURN          reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    ID              reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    PLUSPLUS        reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    MINUSMINUS      reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    SIZEOF          reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    AND             reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    TIMES           reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    PLUS            reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    MINUS           reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    NOT             reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    LNOT            reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    LPAREN          reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    ICONST          reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    FCONST          reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    CCONST          reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    SCONST          reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    RBRACE          reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    SEMI            reduce using rule 115 (labeled_statement -> identifier COLON statement .)
    ELSE            reduce using rule 115 (labeled_statement -> identifier COLON statement .)


state 335

    (116) labeled_statement -> CASE constant_expression COLON . statement
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    selection_statement            shift and go to state 210
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    iteration_statement            shift and go to state 209
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    logical_and_expression         shift and go to state 97
    postfix_expression             shift and go to state 101
    statement                      shift and go to state 351
    jump_statement                 shift and go to state 208
    empty                          shift and go to state 294
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 225
    expression_statement           shift and go to state 221
    and_expression                 shift and go to state 113

state 336

    (121) compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode . leave_scope RBRACE
    (220) leave_scope -> . empty
    (217) empty -> .

    RBRACE          reduce using rule 217 (empty -> .)

    empty                          shift and go to state 332
    leave_scope                    shift and go to state 352

state 337

    (119) compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list . lookup_mode leave_scope RBRACE
    (124) statement_list -> statement_list . statement
    (221) lookup_mode -> . empty
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (217) empty -> .
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          reduce using rule 217 (empty -> .)
    SEMI            reduce using rule 217 (empty -> .)
    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    lookup_mode                    shift and go to state 353
    iteration_statement            shift and go to state 209
    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    jump_statement                 shift and go to state 208
    postfix_expression             shift and go to state 101
    statement                      shift and go to state 301
    selection_statement            shift and go to state 210
    empty                          shift and go to state 303
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    and_expression                 shift and go to state 113
    expression                     shift and go to state 225
    expression_statement           shift and go to state 221
    logical_and_expression         shift and go to state 97

state 338

    (134) jump_statement -> RETURN expression_option SEMI .

    CASE            reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    DEFAULT         reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    LBRACE          reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    IF              reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    SWITCH          reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    WHILE           reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    FOR             reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    DO              reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    GOTO            reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    CONTINUE        reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    BREAK           reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    RETURN          reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    ID              reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    PLUSPLUS        reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    MINUSMINUS      reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    SIZEOF          reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    AND             reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    TIMES           reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    PLUS            reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    MINUS           reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    NOT             reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    LNOT            reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    LPAREN          reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    ICONST          reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    FCONST          reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    CCONST          reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    SCONST          reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    RBRACE          reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    SEMI            reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)
    ELSE            reduce using rule 134 (jump_statement -> RETURN expression_option SEMI .)


state 339

    (125) selection_statement -> IF LPAREN expression . RPAREN statement
    (126) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (138) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 354
    COMMA           shift and go to state 281


state 340

    (93) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 93 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 93 (initializer_list -> initializer_list COMMA initializer .)


state 341

    (91) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMI            reduce using rule 91 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 91 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 91 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 342

    (153) conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .

    COMMA           reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    SEMI            reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RPAREN          reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    VOID            reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    CHAR            reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    SHORT           reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    INT             reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    LONG            reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    FLOAT           reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    DOUBLE          reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    SIGNED          reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    UNSIGNED        reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    TYPEID          reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    CONST           reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    VOLATILE        reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    ENUM            reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    STRUCT          reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    UNION           reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 153 (conditional_expression -> logical_or_expression CONDOP expression COLON conditional_expression .)


state 343

    (212) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 212 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 212 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 344

    (101) direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET .

    LBRACKET        reduce using rule 101 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET .)
    LPAREN          reduce using rule 101 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET .)
    RPAREN          reduce using rule 101 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET .)
    COMMA           reduce using rule 101 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET constant_expression_option RBRACKET .)


state 345

    (103) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN .

    LBRACKET        reduce using rule 103 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN .)
    LPAREN          reduce using rule 103 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN .)
    RPAREN          reduce using rule 103 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN .)
    COMMA           reduce using rule 103 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_option RPAREN .)


state 346

    (130) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    string_literal_list            shift and go to state 117
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    constant                       shift and go to state 87
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 355
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 347

    (128) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    selection_statement            shift and go to state 210
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    iteration_statement            shift and go to state 209
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    logical_and_expression         shift and go to state 97
    postfix_expression             shift and go to state 101
    statement                      shift and go to state 356
    jump_statement                 shift and go to state 208
    empty                          shift and go to state 294
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 225
    expression_statement           shift and go to state 221
    and_expression                 shift and go to state 113

state 348

    (127) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    selection_statement            shift and go to state 210
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    iteration_statement            shift and go to state 209
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    logical_and_expression         shift and go to state 97
    postfix_expression             shift and go to state 101
    statement                      shift and go to state 357
    jump_statement                 shift and go to state 208
    empty                          shift and go to state 294
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 225
    expression_statement           shift and go to state 221
    and_expression                 shift and go to state 113

state 349

    (120) compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .

    WHILE           reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    CASE            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    DEFAULT         reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    LBRACE          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    IF              reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    SWITCH          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    FOR             reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    DO              reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    GOTO            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    CONTINUE        reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    BREAK           reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    RETURN          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    ID              reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    PLUSPLUS        reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    MINUSMINUS      reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    SIZEOF          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    AND             reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    TIMES           reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    PLUS            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    MINUS           reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    NOT             reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    LNOT            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    LPAREN          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    ICONST          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    FCONST          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    CCONST          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    SCONST          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    RBRACE          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    SEMI            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    ELSE            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    AUTO            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    REGISTER        reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    STATIC          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    EXTERN          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    TYPEDEF         reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    VOID            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    CHAR            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    SHORT           reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    INT             reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    LONG            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    FLOAT           reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    DOUBLE          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    SIGNED          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    UNSIGNED        reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    TYPEID          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    CONST           reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    VOLATILE        reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    ENUM            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    STRUCT          reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    UNION           reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)
    $end            reduce using rule 120 (compound_statement -> LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE .)


state 350

    (129) iteration_statement -> FOR LPAREN expression_option SEMI . expression_option SEMI expression_option RPAREN statement
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    constant                       shift and go to state 87
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    expression_option              shift and go to state 358
    empty                          shift and go to state 294
    expression                     shift and go to state 225
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 351

    (116) labeled_statement -> CASE constant_expression COLON statement .

    CASE            reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    ID              reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSPLUS        reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSMINUS      reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    AND             reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    LNOT            reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    ICONST          reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    FCONST          reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    CCONST          reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    SCONST          reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    RBRACE          reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 116 (labeled_statement -> CASE constant_expression COLON statement .)


state 352

    (121) compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope . RBRACE

    RBRACE          shift and go to state 359


state 353

    (119) compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode . leave_scope RBRACE
    (220) leave_scope -> . empty
    (217) empty -> .

    RBRACE          reduce using rule 217 (empty -> .)

    empty                          shift and go to state 332
    leave_scope                    shift and go to state 360

state 354

    (125) selection_statement -> IF LPAREN expression RPAREN . statement
    (126) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    selection_statement            shift and go to state 210
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    iteration_statement            shift and go to state 209
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    logical_and_expression         shift and go to state 97
    postfix_expression             shift and go to state 101
    statement                      shift and go to state 361
    jump_statement                 shift and go to state 208
    empty                          shift and go to state 294
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 225
    expression_statement           shift and go to state 221
    and_expression                 shift and go to state 113

state 355

    (130) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI
    (138) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 362
    COMMA           shift and go to state 281


state 356

    (128) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    CASE            reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 128 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 357

    (127) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    CASE            reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ID              reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AND             reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 127 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 358

    (129) iteration_statement -> FOR LPAREN expression_option SEMI expression_option . SEMI expression_option RPAREN statement

    SEMI            shift and go to state 363


state 359

    (121) compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .

    WHILE           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    CASE            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    DEFAULT         reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    LBRACE          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    IF              reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SWITCH          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    FOR             reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    DO              reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    GOTO            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    CONTINUE        reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    BREAK           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    RETURN          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    ID              reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    PLUSPLUS        reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    MINUSMINUS      reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SIZEOF          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    AND             reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    TIMES           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    PLUS            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    MINUS           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    NOT             reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    LNOT            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    LPAREN          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    ICONST          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    FCONST          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    CCONST          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SCONST          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    RBRACE          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SEMI            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    ELSE            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    AUTO            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    REGISTER        reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    STATIC          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    EXTERN          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    TYPEDEF         reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    VOID            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    CHAR            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SHORT           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    INT             reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    LONG            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    FLOAT           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    DOUBLE          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    SIGNED          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    UNSIGNED        reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    TYPEID          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    CONST           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    VOLATILE        reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    ENUM            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    STRUCT          reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    UNION           reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)
    $end            reduce using rule 121 (compound_statement -> LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE .)


state 360

    (119) compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope . RBRACE

    RBRACE          shift and go to state 364


state 361

    (125) selection_statement -> IF LPAREN expression RPAREN statement .
    (126) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    CASE            reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CCONST          reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCONST          reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 365

  ! ELSE            [ reduce using rule 125 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 362

    (130) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 366


state 363

    (129) iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI . expression_option RPAREN statement
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (216) identifier -> . ID
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ID              shift and go to state 10
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    constant                       shift and go to state 87
    shift_expression               shift and go to state 90
    relational_expression          shift and go to state 88
    conditional_expression         shift and go to state 143
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    unary_expression               shift and go to state 141
    primary_expression             shift and go to state 91
    postfix_expression             shift and go to state 101
    cast_expression                shift and go to state 96
    logical_and_expression         shift and go to state 97
    equality_expression            shift and go to state 99
    string_literal_list            shift and go to state 117
    expression_option              shift and go to state 367
    empty                          shift and go to state 294
    expression                     shift and go to state 225
    identifier                     shift and go to state 106
    and_expression                 shift and go to state 113

state 364

    (119) compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .

    WHILE           reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    CASE            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    DEFAULT         reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    LBRACE          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    IF              reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    SWITCH          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    FOR             reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    DO              reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    GOTO            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    CONTINUE        reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    BREAK           reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    RETURN          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    ID              reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    PLUSPLUS        reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    MINUSMINUS      reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    SIZEOF          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    AND             reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    TIMES           reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    PLUS            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    MINUS           reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    NOT             reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    LNOT            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    LPAREN          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    ICONST          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    FCONST          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    CCONST          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    SCONST          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    RBRACE          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    SEMI            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    ELSE            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    AUTO            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    REGISTER        reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    STATIC          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    EXTERN          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    TYPEDEF         reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    VOID            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    CHAR            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    SHORT           reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    INT             reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    LONG            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    FLOAT           reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    DOUBLE          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    SIGNED          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    UNSIGNED        reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    TYPEID          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    CONST           reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    VOLATILE        reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    ENUM            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    STRUCT          reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    UNION           reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)
    $end            reduce using rule 119 (compound_statement -> LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE .)


state 365

    (126) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    selection_statement            shift and go to state 210
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    iteration_statement            shift and go to state 209
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    logical_and_expression         shift and go to state 97
    postfix_expression             shift and go to state 101
    statement                      shift and go to state 368
    jump_statement                 shift and go to state 208
    empty                          shift and go to state 294
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 225
    expression_statement           shift and go to state 221
    and_expression                 shift and go to state 113

state 366

    (130) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    CASE            reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    GOTO            reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIZEOF          reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AND             reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ICONST          reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FCONST          reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CCONST          reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SCONST          reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 130 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)


state 367

    (129) iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option . RPAREN statement

    RPAREN          shift and go to state 369


state 368

    (126) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    CASE            reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ICONST          reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FCONST          reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CCONST          reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCONST          reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 126 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 369

    (129) iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN . statement
    (109) statement -> . labeled_statement
    (110) statement -> . expression_statement
    (111) statement -> . compound_statement
    (112) statement -> . selection_statement
    (113) statement -> . iteration_statement
    (114) statement -> . jump_statement
    (115) labeled_statement -> . identifier COLON statement
    (116) labeled_statement -> . CASE constant_expression COLON statement
    (117) labeled_statement -> . DEFAULT COLON statement
    (118) expression_statement -> . expression_option SEMI
    (119) compound_statement -> . LBRACE enter_scope insert_mode declaration_list statement_list lookup_mode leave_scope RBRACE
    (120) compound_statement -> . LBRACE enter_scope statement_list lookup_mode leave_scope RBRACE
    (121) compound_statement -> . LBRACE enter_scope insert_mode declaration_list lookup_mode leave_scope RBRACE
    (122) compound_statement -> . LBRACE RBRACE
    (125) selection_statement -> . IF LPAREN expression RPAREN statement
    (126) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (127) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (128) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (129) iteration_statement -> . FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement
    (130) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (131) jump_statement -> . GOTO identifier SEMI
    (132) jump_statement -> . CONTINUE SEMI
    (133) jump_statement -> . BREAK SEMI
    (134) jump_statement -> . RETURN expression_option SEMI
    (216) identifier -> . ID
    (135) expression_option -> . empty
    (136) expression_option -> . expression
    (217) empty -> .
    (137) expression -> . assignment_expression
    (138) expression -> . expression COMMA assignment_expression
    (139) assignment_expression -> . conditional_expression
    (140) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (152) conditional_expression -> . logical_or_expression
    (153) conditional_expression -> . logical_or_expression CONDOP expression COLON conditional_expression
    (185) unary_expression -> . postfix_expression
    (186) unary_expression -> . PLUSPLUS unary_expression
    (187) unary_expression -> . MINUSMINUS unary_expression
    (188) unary_expression -> . unary_operator cast_expression
    (189) unary_expression -> . SIZEOF unary_expression
    (190) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (155) logical_or_expression -> . logical_and_expression
    (156) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (197) postfix_expression -> . primary_expression
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (200) postfix_expression -> . postfix_expression LPAREN RPAREN
    (201) postfix_expression -> . postfix_expression PERIOD identifier
    (202) postfix_expression -> . postfix_expression ARROW identifier
    (203) postfix_expression -> . postfix_expression PLUSPLUS
    (204) postfix_expression -> . postfix_expression MINUSMINUS
    (191) unary_operator -> . AND
    (192) unary_operator -> . TIMES
    (193) unary_operator -> . PLUS
    (194) unary_operator -> . MINUS
    (195) unary_operator -> . NOT
    (196) unary_operator -> . LNOT
    (157) logical_and_expression -> . inclusive_or_expression
    (158) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (205) primary_expression -> . identifier
    (206) primary_expression -> . constant
    (207) primary_expression -> . string_literal_list
    (210) primary_expression -> . LPAREN expression RPAREN
    (159) inclusive_or_expression -> . exclusive_or_expression
    (160) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (213) constant -> . ICONST
    (214) constant -> . FCONST
    (215) constant -> . CCONST
    (208) string_literal_list -> . SCONST
    (209) string_literal_list -> . string_literal_list SCONST
    (161) exclusive_or_expression -> . and_expression
    (162) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (163) and_expression -> . equality_expression
    (164) and_expression -> . and_expression AND equality_expression
    (165) equality_expression -> . relational_expression
    (166) equality_expression -> . equality_expression EQ relational_expression
    (167) equality_expression -> . equality_expression NE relational_expression
    (168) relational_expression -> . shift_expression
    (169) relational_expression -> . relational_expression LT shift_expression
    (170) relational_expression -> . relational_expression GT shift_expression
    (171) relational_expression -> . relational_expression LE shift_expression
    (172) relational_expression -> . relational_expression GE shift_expression
    (173) shift_expression -> . additive_expression
    (174) shift_expression -> . shift_expression LSHIFT additive_expression
    (175) shift_expression -> . shift_expression RSHIFT additive_expression
    (176) additive_expression -> . multiplicative_expression
    (177) additive_expression -> . additive_expression PLUS multiplicative_expression
    (178) additive_expression -> . additive_expression MINUS multiplicative_expression
    (179) multiplicative_expression -> . cast_expression
    (180) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (181) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (182) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (183) cast_expression -> . unary_expression
    (184) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CASE            shift and go to state 223
    DEFAULT         shift and go to state 218
    LBRACE          shift and go to state 61
    IF              shift and go to state 228
    SWITCH          shift and go to state 215
    WHILE           shift and go to state 206
    FOR             shift and go to state 220
    DO              shift and go to state 205
    GOTO            shift and go to state 211
    CONTINUE        shift and go to state 216
    BREAK           shift and go to state 227
    RETURN          shift and go to state 226
    ID              shift and go to state 10
    SEMI            reduce using rule 217 (empty -> .)
    PLUSPLUS        shift and go to state 107
    MINUSMINUS      shift and go to state 111
    SIZEOF          shift and go to state 92
    AND             shift and go to state 89
    TIMES           shift and go to state 103
    PLUS            shift and go to state 83
    MINUS           shift and go to state 94
    NOT             shift and go to state 98
    LNOT            shift and go to state 112
    LPAREN          shift and go to state 146
    ICONST          shift and go to state 105
    FCONST          shift and go to state 115
    CCONST          shift and go to state 109
    SCONST          shift and go to state 86

    unary_operator                 shift and go to state 104
    logical_or_expression          shift and go to state 84
    selection_statement            shift and go to state 210
    inclusive_or_expression        shift and go to state 85
    assignment_expression          shift and go to state 191
    identifier                     shift and go to state 222
    constant                       shift and go to state 87
    primary_expression             shift and go to state 91
    cast_expression                shift and go to state 96
    shift_expression               shift and go to state 90
    labeled_statement              shift and go to state 217
    conditional_expression         shift and go to state 143
    string_literal_list            shift and go to state 117
    exclusive_or_expression        shift and go to state 110
    additive_expression            shift and go to state 95
    iteration_statement            shift and go to state 209
    relational_expression          shift and go to state 88
    unary_expression               shift and go to state 141
    compound_statement             shift and go to state 213
    logical_and_expression         shift and go to state 97
    postfix_expression             shift and go to state 101
    statement                      shift and go to state 370
    jump_statement                 shift and go to state 208
    empty                          shift and go to state 294
    equality_expression            shift and go to state 99
    expression_option              shift and go to state 212
    multiplicative_expression      shift and go to state 102
    expression                     shift and go to state 225
    expression_statement           shift and go to state 221
    and_expression                 shift and go to state 113

state 370

    (129) iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .

    CASE            reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    DEFAULT         reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    LBRACE          reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    IF              reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    SWITCH          reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    WHILE           reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    FOR             reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    DO              reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    GOTO            reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    CONTINUE        reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    BREAK           reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    RETURN          reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    ID              reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    PLUSPLUS        reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    MINUSMINUS      reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    SIZEOF          reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    AND             reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    TIMES           reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    PLUS            reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    MINUS           reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    NOT             reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    LNOT            reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    LPAREN          reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    ICONST          reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    FCONST          reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    CCONST          reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    SCONST          reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    RBRACE          reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    SEMI            reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)
    ELSE            reduce using rule 129 (iteration_statement -> FOR LPAREN expression_option SEMI expression_option SEMI expression_option RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 361 resolved as shift
