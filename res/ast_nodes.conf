[
  {
    "comment": "This type of node handles all loops: for, while, and do...while.",
    "name": "IterationNode",
    "attributes": ["is_pre_test_loop"],
    "single_children": ["initialization_expression", "stop_condition_expression", "increment_expression"],
    "list_children": ["body_statements"],
    "python_3ac_gen_code": "",
    "3ac_parameters": ["a_dummy_parameter"]
  },

  {
    "comment": "This is a nested declaration of an array with the given type",
    "name": "ArrayDeclaration",
    "attributes": ["dim", "dim_qualifiers"],
    "single_children": ["type"]
  },

  {
    "comment": "REVISIT ME - Might need to switch attrs to children depending on how we handle arrays",
    "name": "ArrayReference",
    "attributes": ["array_name", "subscript"]
  },

  {
    "comment": "",
    "name": "Assignment",
    "attributes": ["op"],
    "single_children": ["lvalue", "rvalue"]
  },

  {
    "comment": "",
    "name": "BinaryOperator",
    "attributes": ["op"],
    "single_children": ["lvalue", "rvalue"]
  },

  {
    "comment": "REVISIT ME - May need to add in stuff for line numbers for jumps in 3ac",
    "name": "Break",
    "3ac_parameters": ["break_to_label"]
  },

  {
    "comment": "",
    "name": "Case",
    "single_children": ["expression"],
    "list_children": ["statement_list"]
  },

  {
    "comment": "",
    "name": "Cast",
    "single_children": ["to_type", "expression"]
  },

  {
    "comment": "",
    "name": "Constant",
    "attributes": ["type", "value"]
  },

  {
    "comment": "",
    "name": "Continue",
    "3ac_parameters": ["continue_to_label"]
  },

  {
    "comment": "",
    "name": "Declaration",
    "attributes": ["name", "qualifiers", "storage","funcspec"],
    "single_children": ["type", "initialization_value","bitsize"]
  },

  {
    "comment": "",
    "name": "DeclarationList",
    "list_children": ["declaration_list"]
  },

  {
    "comment": "",
    "name": "Default",
    "list_children": ["statement_list"]
  },

  {
    "comment": "",
    "name": "EmptyStatement"
  },

  {
    "comment": "",
    "name": "ExpressionList",
    "list_children": ["expressions"]
  },

  {
    "comment": "This is the top of the AST",
    "name": "FileAST",
    "list_children": ["external_declarations"]
  },

  {
    "comment": "",
    "name": "FunctionCall",
    "single_children": ["name","arguments"]
  },

  {
    "comment": "",
    "name": "FunctionDeclaration",
    "single_children": ["arguments", "type"]
  },

  {
    "comment": "",
    "name": "Goto",
    "attributes": ["name"]
  },


  {
    "comment": "",
    "name": "ID",
    "attributes": ["name"]
  },

  {
    "comment": "",
    "name": "IdentifierType",
    "attributes": ["names"]
  },

  {
    "comment": "",
    "name": "If",
    "single_children": ["conditional","if_true","if_false"]
  },


  {
    "comment": "",
    "name": "InitializerList",
    "list_children": ["initializers"]
  },

  {
    "comment": "",
    "name": "Label",
    "attributes": ["label_name"],
    "single_children": ["body_statement"]
  },

  {
    "comment": "",
    "name": "ParameterList",
    "list_children": ["parameters"]
  },

  {
    "comment": "",
    "name": "PointerDeclaration",
    "attributes": ["qualifiers"],
    "single_children": ["type"]
  },

  {
    "comment": "",
    "name": "Return",
    "single_children": ["expression"]
  },

  {
    "comment": "",
    "name": "Switch",
    "attributes": [],
    "single_children": ["conditional", "body_statement"]
  },

  {
    "comment": "",
    "name": "TernaryOperator",
    "single_children": ["conditional", "if_true_expression", "if_false_expression"]
  },

  {
    "comment": "WHAT ARE SOME OF THESE THINGS? I kinda think we can throw this one out since it prolly doesn't generate code.",
    "name": "TypeDeclaration",
    "attributes": ["declaration_name", "qualifiers"],
    "single_children": ["type"]
  },

  {
    "comment": "",
    "name": "Unary Operator",
    "attributes": ["operator"],
    "single_children": ["expression"]
  }
]